
446RE_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005588  08005588  00015588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08005850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  2000067c  08005ecc  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007d4  08005ecc  000207d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000105a6  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002490  00000000  00000000  00030c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c8b  00000000  00000000  000330e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006c8  00000000  00000000  00036d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008d8  00000000  00000000  00037438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000045f3  00000000  00000000  00037d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002e50  00000000  00000000  0003c303  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f153  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001be0  00000000  00000000  0003f1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000067c 	.word	0x2000067c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800556c 	.word	0x0800556c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000680 	.word	0x20000680
 800020c:	0800556c 	.word	0x0800556c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9e08      	ldr	r6, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d151      	bne.n	8000cc4 <__udivmoddi4+0xb4>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0xf2>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c4c:	0c25      	lsrs	r5, r4, #16
 8000c4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c52:	fa1f f987 	uxth.w	r9, r7
 8000c56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c5e:	fb08 f309 	mul.w	r3, r8, r9
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x6c>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c6c:	f080 8123 	bcs.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	f240 8120 	bls.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	1aed      	subs	r5, r5, r3
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb00 f909 	mul.w	r9, r0, r9
 8000c90:	45a1      	cmp	r9, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	f080 810a 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8107 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	eba4 0409 	sub.w	r4, r4, r9
 8000cac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d061      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6034      	str	r4, [r6, #0]
 8000cbe:	6073      	str	r3, [r6, #4]
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0xc8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d054      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	fab3 f183 	clz	r1, r3
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	f040 808e 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xdc>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2d0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	46ac      	mov	ip, r5
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d03f      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b912      	cbnz	r2, 8000d0a <__udivmoddi4+0xfa>
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d0a:	fab7 fe87 	clz	lr, r7
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d134      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d14:	1beb      	subs	r3, r5, r7
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d22:	0c25      	lsrs	r5, r4, #16
 8000d24:	fb02 3318 	mls	r3, r2, r8, r3
 8000d28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2c:	fb0c f308 	mul.w	r3, ip, r8
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f200 80d1 	bhi.w	8000ee4 <__udivmoddi4+0x2d4>
 8000d42:	4680      	mov	r8, r0
 8000d44:	1aed      	subs	r5, r5, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d54:	fb0c fc00 	mul.w	ip, ip, r0
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d74:	e79d      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0420 	rsb	r4, lr, #32
 8000d82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa25 f404 	lsr.w	r4, r5, r4
 8000d94:	ea48 0803 	orr.w	r8, r8, r3
 8000d98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000da0:	fb02 4411 	mls	r4, r2, r1, r4
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dac:	fb01 f30c 	mul.w	r3, r1, ip
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1bc>
 8000db8:	19ed      	adds	r5, r5, r7
 8000dba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dbe:	f080 808a 	bcs.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	f240 8087 	bls.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	1aeb      	subs	r3, r5, r3
 8000dce:	fa1f f588 	uxth.w	r5, r8
 8000dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dde:	fb00 f30c 	mul.w	r3, r0, ip
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1e6>
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dec:	d26f      	bcs.n	8000ece <__udivmoddi4+0x2be>
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d96d      	bls.n	8000ece <__udivmoddi4+0x2be>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	1aeb      	subs	r3, r5, r3
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0c:	ea48 0303 	orr.w	r3, r8, r3
 8000e10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e2a:	fa1f f883 	uxth.w	r8, r3
 8000e2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e32:	fb09 f408 	mul.w	r4, r9, r8
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18ed      	adds	r5, r5, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	d243      	bcs.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	d941      	bls.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441d      	add	r5, r3
 8000e54:	1b2d      	subs	r5, r5, r4
 8000e56:	fa1f fe8e 	uxth.w	lr, lr
 8000e5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e66:	fb00 f808 	mul.w	r8, r0, r8
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x26e>
 8000e6e:	18e4      	adds	r4, r4, r3
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e74:	d229      	bcs.n	8000eca <__udivmoddi4+0x2ba>
 8000e76:	45a0      	cmp	r8, r4
 8000e78:	d927      	bls.n	8000eca <__udivmoddi4+0x2ba>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	441c      	add	r4, r3
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	eba4 0408 	sub.w	r4, r4, r8
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d315      	bcc.n	8000ebe <__udivmoddi4+0x2ae>
 8000e92:	d012      	beq.n	8000eba <__udivmoddi4+0x2aa>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x29c>
 8000e96:	ebba 030e 	subs.w	r3, sl, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	6037      	str	r7, [r6, #0]
 8000eaa:	6074      	str	r4, [r6, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e6f8      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e6e0      	b.n	8000c7c <__udivmoddi4+0x6c>
 8000eba:	45c2      	cmp	sl, r8
 8000ebc:	d2ea      	bcs.n	8000e94 <__udivmoddi4+0x284>
 8000ebe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7e4      	b.n	8000e94 <__udivmoddi4+0x284>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e7d7      	b.n	8000e7e <__udivmoddi4+0x26e>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	e791      	b.n	8000df6 <__udivmoddi4+0x1e6>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	e7be      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	e778      	b.n	8000dcc <__udivmoddi4+0x1bc>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	e745      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xe6>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_InitTick+0x3c>)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_InitTick+0x40>)
{
 8000ef6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	7818      	ldrb	r0, [r3, #0]
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 faa8 	bl	800145c <HAL_SYSTICK_Config>
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	b958      	cbnz	r0, 8000f28 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	2d0f      	cmp	r5, #15
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	4602      	mov	r2, r0
 8000f16:	4629      	mov	r1, r5
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fa5e 	bl	80013dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_InitTick+0x44>)
 8000f22:	4620      	mov	r0, r4
 8000f24:	601d      	str	r5, [r3, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_Init>:
{
 8000f38:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x30>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f52:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fa2f 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ffc8 	bl	8000ef0 <HAL_InitTick>
  HAL_MspInit();
 8000f60:	f001 fae7 	bl	8002532 <HAL_MspInit>
}
 8000f64:	2000      	movs	r0, #0
 8000f66:	bd08      	pop	{r3, pc}
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_IncTick+0x10>)
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_IncTick+0x14>)
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	440b      	add	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200006d0 	.word	0x200006d0
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <HAL_GetTick+0x8>)
 8000f86:	6818      	ldr	r0, [r3, #0]
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200006d0 	.word	0x200006d0

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff6 	bl	8000f84 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f98:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	bf1c      	itt	ne
 8000f9c:	4b05      	ldrne	r3, [pc, #20]	; (8000fb4 <HAL_Delay+0x24>)
 8000f9e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	bf18      	it	ne
 8000fa4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	f7ff ffed 	bl	8000f84 <HAL_GetTick>
 8000faa:	1b40      	subs	r0, r0, r5
 8000fac:	4284      	cmp	r4, r0
 8000fae:	d8fa      	bhi.n	8000fa6 <HAL_Delay+0x16>
  {
  }
}
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fba:	4604      	mov	r4, r0
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	f000 8099 	beq.w	80010f4 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fc4:	b923      	cbnz	r3, 8000fd0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc6:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fcc:	f001 fae2 	bl	8002594 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fd2:	06db      	lsls	r3, r3, #27
 8000fd4:	f100 808c 	bmi.w	80010f0 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_ADC_Init+0x140>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ff0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	6861      	ldr	r1, [r4, #4]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ffa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ffc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800100c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800100e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001010:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001012:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001016:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800101e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001020:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800102e:	4933      	ldr	r1, [pc, #204]	; (80010fc <HAL_ADC_Init+0x144>)
 8001030:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001032:	428a      	cmp	r2, r1
 8001034:	d050      	beq.n	80010d8 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800103c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	430a      	orrs	r2, r1
 8001042:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001044:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001046:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800104c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001052:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001054:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001056:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001058:	f022 0202 	bic.w	r2, r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001066:	6a22      	ldr	r2, [r4, #32]
 8001068:	2a00      	cmp	r2, #0
 800106a:	d03d      	beq.n	80010e8 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800106c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800106e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001074:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800107c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	3901      	subs	r1, #1
 8001082:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800108a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800108c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	3901      	subs	r1, #1
 8001096:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800109c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800109e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010ac:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ae:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010ba:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010bc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010c0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010d0:	2300      	movs	r3, #0
 80010d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80010d6:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010e6:	e7b4      	b.n	8001052 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ee:	e7ca      	b.n	8001086 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
 80010f2:	e7ed      	b.n	80010d0 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
}
 80010f6:	bd10      	pop	{r4, pc}
 80010f8:	40012300 	.word	0x40012300
 80010fc:	0f000001 	.word	0x0f000001

08001100 <HAL_ADC_Start_DMA>:
{
 8001100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001102:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001104:	2200      	movs	r2, #0
 8001106:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001108:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800110c:	2a01      	cmp	r2, #1
{
 800110e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001110:	d065      	beq.n	80011de <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001112:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8001114:	2201      	movs	r2, #1
 8001116:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800111a:	68aa      	ldr	r2, [r5, #8]
 800111c:	07d2      	lsls	r2, r2, #31
 800111e:	d505      	bpl.n	800112c <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001120:	68aa      	ldr	r2, [r5, #8]
 8001122:	07d0      	lsls	r0, r2, #31
 8001124:	d415      	bmi.n	8001152 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
}
 8001128:	b003      	add	sp, #12
 800112a:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800112c:	68aa      	ldr	r2, [r5, #8]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <HAL_ADC_Start_DMA+0xe4>)
 8001136:	6810      	ldr	r0, [r2, #0]
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <HAL_ADC_Start_DMA+0xe8>)
 800113a:	fbb0 f0f2 	udiv	r0, r0, r2
 800113e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001142:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001144:	9a01      	ldr	r2, [sp, #4]
 8001146:	2a00      	cmp	r2, #0
 8001148:	d0ea      	beq.n	8001120 <HAL_ADC_Start_DMA+0x20>
      counter--;
 800114a:	9a01      	ldr	r2, [sp, #4]
 800114c:	3a01      	subs	r2, #1
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	e7f8      	b.n	8001144 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001154:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001158:	f020 0001 	bic.w	r0, r0, #1
 800115c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001160:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001162:	686a      	ldr	r2, [r5, #4]
 8001164:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001166:	bf41      	itttt	mi
 8001168:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800116a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800116e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001172:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001174:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800117c:	bf1c      	itt	ne
 800117e:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8001180:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001184:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001186:	2200      	movs	r2, #0
 8001188:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_ADC_Start_DMA+0xec>)
 800118e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_ADC_Start_DMA+0xf0>)
 8001192:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_ADC_Start_DMA+0xf4>)
 8001196:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001198:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800119c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800119e:	686a      	ldr	r2, [r5, #4]
 80011a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011a4:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011a6:	68aa      	ldr	r2, [r5, #8]
 80011a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ac:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ae:	460a      	mov	r2, r1
 80011b0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80011b4:	f000 fa0e 	bl	80015d4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_ADC_Start_DMA+0xf8>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f013 0f1f 	tst.w	r3, #31
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	d108      	bne.n	80011d6 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c4:	6898      	ldr	r0, [r3, #8]
 80011c6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011ca:	d1ac      	bne.n	8001126 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e7a8      	b.n	8001128 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_ADC_Start_DMA+0xfc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d1a4      	bne.n	8001126 <HAL_ADC_Start_DMA+0x26>
 80011dc:	e7f2      	b.n	80011c4 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 80011de:	2002      	movs	r0, #2
 80011e0:	e7a2      	b.n	8001128 <HAL_ADC_Start_DMA+0x28>
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	000f4240 	.word	0x000f4240
 80011ec:	08001203 	.word	0x08001203
 80011f0:	08001265 	.word	0x08001265
 80011f4:	08001271 	.word	0x08001271
 80011f8:	40012300 	.word	0x40012300
 80011fc:	40012000 	.word	0x40012000

08001200 <HAL_ADC_ConvCpltCallback>:
 8001200:	4770      	bx	lr

08001202 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001202:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800120a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800120c:	d124      	bne.n	8001258 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	6891      	ldr	r1, [r2, #8]
 800121a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800121e:	d117      	bne.n	8001250 <ADC_DMAConvCplt+0x4e>
 8001220:	6999      	ldr	r1, [r3, #24]
 8001222:	b9a9      	cbnz	r1, 8001250 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001224:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001226:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800122a:	d002      	beq.n	8001232 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800122c:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800122e:	0549      	lsls	r1, r1, #21
 8001230:	d40e      	bmi.n	8001250 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001232:	6851      	ldr	r1, [r2, #4]
 8001234:	f021 0120 	bic.w	r1, r1, #32
 8001238:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800123a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001244:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001246:	bf5e      	ittt	pl
 8001248:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800124a:	f042 0201 	orrpl.w	r2, r2, #1
 800124e:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ffd5 	bl	8001200 <HAL_ADC_ConvCpltCallback>
 8001256:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 800125a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	4718      	bx	r3

08001262 <HAL_ADC_ConvHalfCpltCallback>:
 8001262:	4770      	bx	lr

08001264 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001264:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001266:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001268:	f7ff fffb 	bl	8001262 <HAL_ADC_ConvHalfCpltCallback>
 800126c:	bd08      	pop	{r3, pc}

0800126e <HAL_ADC_ErrorCallback>:
{
 800126e:	4770      	bx	lr

08001270 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001270:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001272:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001278:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8001280:	f7ff fff5 	bl	800126e <HAL_ADC_ErrorCallback>
 8001284:	bd08      	pop	{r3, pc}
	...

08001288 <HAL_ADC_ConfigChannel>:
{
 8001288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800128e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d06a      	beq.n	800136c <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001296:	680d      	ldr	r5, [r1, #0]
 8001298:	6804      	ldr	r4, [r0, #0]
 800129a:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800129c:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800129e:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80012a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80012a4:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a6:	d92a      	bls.n	80012fe <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80012ac:	68e7      	ldr	r7, [r4, #12]
 80012ae:	3b1e      	subs	r3, #30
 80012b0:	f04f 0e07 	mov.w	lr, #7
 80012b4:	fa0e fe03 	lsl.w	lr, lr, r3
 80012b8:	ea27 070e 	bic.w	r7, r7, lr
 80012bc:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012be:	68e7      	ldr	r7, [r4, #12]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	433b      	orrs	r3, r7
 80012c6:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80012c8:	684a      	ldr	r2, [r1, #4]
 80012ca:	2a06      	cmp	r2, #6
 80012cc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80012d0:	d825      	bhi.n	800131e <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d2:	4413      	add	r3, r2
 80012d4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80012d6:	1f59      	subs	r1, r3, #5
 80012d8:	231f      	movs	r3, #31
 80012da:	408b      	lsls	r3, r1
 80012dc:	ea27 0303 	bic.w	r3, r7, r3
 80012e0:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80012e4:	fa06 f101 	lsl.w	r1, r6, r1
 80012e8:	4311      	orrs	r1, r2
 80012ea:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_ADC_ConfigChannel+0x11c>)
 80012ee:	429c      	cmp	r4, r3
 80012f0:	d034      	beq.n	800135c <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80012f2:	2300      	movs	r3, #0
 80012f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80012f8:	4618      	mov	r0, r3
}
 80012fa:	b003      	add	sp, #12
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012fe:	6927      	ldr	r7, [r4, #16]
 8001300:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001304:	f04f 0e07 	mov.w	lr, #7
 8001308:	fa0e fe03 	lsl.w	lr, lr, r3
 800130c:	ea27 070e 	bic.w	r7, r7, lr
 8001310:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001312:	6927      	ldr	r7, [r4, #16]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	433b      	orrs	r3, r7
 800131a:	6123      	str	r3, [r4, #16]
 800131c:	e7d4      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800131e:	2a0c      	cmp	r2, #12
 8001320:	d80e      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001322:	4413      	add	r3, r2
 8001324:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001326:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800132a:	231f      	movs	r3, #31
 800132c:	4093      	lsls	r3, r2
 800132e:	ea21 0303 	bic.w	r3, r1, r3
 8001332:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001336:	fa06 f202 	lsl.w	r2, r6, r2
 800133a:	431a      	orrs	r2, r3
 800133c:	6322      	str	r2, [r4, #48]	; 0x30
 800133e:	e7d5      	b.n	80012ec <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001340:	4413      	add	r3, r2
 8001342:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001344:	3b41      	subs	r3, #65	; 0x41
 8001346:	221f      	movs	r2, #31
 8001348:	409a      	lsls	r2, r3
 800134a:	ea21 0202 	bic.w	r2, r1, r2
 800134e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001352:	fa06 f103 	lsl.w	r1, r6, r3
 8001356:	4311      	orrs	r1, r2
 8001358:	62e1      	str	r1, [r4, #44]	; 0x2c
 800135a:	e7c7      	b.n	80012ec <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800135c:	2d12      	cmp	r5, #18
 800135e:	d107      	bne.n	8001370 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_ADC_ConfigChannel+0x120>)
 8001362:	6853      	ldr	r3, [r2, #4]
 8001364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001368:	6053      	str	r3, [r2, #4]
 800136a:	e7c2      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800136c:	2002      	movs	r0, #2
 800136e:	e7c4      	b.n	80012fa <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_ADC_ConfigChannel+0x124>)
 8001372:	429d      	cmp	r5, r3
 8001374:	d001      	beq.n	800137a <HAL_ADC_ConfigChannel+0xf2>
 8001376:	2d11      	cmp	r5, #17
 8001378:	d1bb      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800137a:	490b      	ldr	r1, [pc, #44]	; (80013a8 <HAL_ADC_ConfigChannel+0x120>)
 800137c:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800137e:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001380:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001384:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001386:	d1b4      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_ADC_ConfigChannel+0x128>)
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_ADC_ConfigChannel+0x12c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001392:	230a      	movs	r3, #10
 8001394:	4353      	muls	r3, r2
        counter--;
 8001396:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0a9      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800139e:	9b01      	ldr	r3, [sp, #4]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	e7f8      	b.n	8001396 <HAL_ADC_ConfigChannel+0x10e>
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40012300 	.word	0x40012300
 80013ac:	10000012 	.word	0x10000012
 80013b0:	20000008 	.word	0x20000008
 80013b4:	000f4240 	.word	0x000f4240

080013b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013c8:	0200      	lsls	r0, r0, #8
 80013ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80013d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013d4:	60d3      	str	r3, [r2, #12]
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b530      	push	{r4, r5, lr}
 80013e0:	68dc      	ldr	r4, [r3, #12]
 80013e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	bf28      	it	cs
 80013f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 0501 	mov.w	r5, #1
 80013f8:	fa05 f303 	lsl.w	r3, r5, r3
 80013fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001400:	bf8c      	ite	hi
 8001402:	3c03      	subhi	r4, #3
 8001404:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001406:	4019      	ands	r1, r3
 8001408:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140a:	fa05 f404 	lsl.w	r4, r5, r4
 800140e:	3c01      	subs	r4, #1
 8001410:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001412:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	ea42 0201 	orr.w	r2, r2, r1
 8001418:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	bfaf      	iteee	ge
 800141e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	f000 000f 	andlt.w	r0, r0, #15
 8001426:	4b06      	ldrlt	r3, [pc, #24]	; (8001440 <HAL_NVIC_SetPriority+0x64>)
 8001428:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	bfa5      	ittet	ge
 800142c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001430:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001438:	bd30      	pop	{r4, r5, pc}
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	e000ed14 	.word	0xe000ed14

08001444 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001444:	0942      	lsrs	r2, r0, #5
 8001446:	2301      	movs	r3, #1
 8001448:	f000 001f 	and.w	r0, r0, #31
 800144c:	fa03 f000 	lsl.w	r0, r3, r0
 8001450:	4b01      	ldr	r3, [pc, #4]	; (8001458 <HAL_NVIC_EnableIRQ+0x14>)
 8001452:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100

0800145c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	3801      	subs	r0, #1
 800145e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001462:	d20a      	bcs.n	800147a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001468:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	21f0      	movs	r1, #240	; 0xf0
 800146c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800148a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800148c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800148e:	bf0c      	ite	eq
 8001490:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001494:	f022 0204 	bicne.w	r2, r2, #4
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	4770      	bx	lr
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014a0:	4770      	bx	lr

080014a2 <HAL_SYSTICK_IRQHandler>:
{
 80014a2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80014a4:	f7ff fffc 	bl	80014a0 <HAL_SYSTICK_Callback>
 80014a8:	bd08      	pop	{r3, pc}
	...

080014ac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	2118      	movs	r1, #24
 80014ba:	3a10      	subs	r2, #16
 80014bc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80014c2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014c4:	bf88      	it	hi
 80014c6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014c8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ca:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014cc:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80014ce:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08005588 	.word	0x08005588

080014d8 <HAL_DMA_Init>:
{
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fd52 	bl	8000f84 <HAL_GetTick>
 80014e0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80014e2:	2c00      	cmp	r4, #0
 80014e4:	d071      	beq.n	80015ca <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80014e6:	2300      	movs	r3, #0
 80014e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80014ec:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80014f4:	6813      	ldr	r3, [r2, #0]
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fc:	6821      	ldr	r1, [r4, #0]
 80014fe:	680b      	ldr	r3, [r1, #0]
 8001500:	07d8      	lsls	r0, r3, #31
 8001502:	d43c      	bmi.n	800157e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001504:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001506:	4d32      	ldr	r5, [pc, #200]	; (80015d0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001508:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800150c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	68a3      	ldr	r3, [r4, #8]
 8001510:	4313      	orrs	r3, r2
 8001512:	68e2      	ldr	r2, [r4, #12]
 8001514:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	6922      	ldr	r2, [r4, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	6962      	ldr	r2, [r4, #20]
 800151c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	69e2      	ldr	r2, [r4, #28]
 8001520:	4303      	orrs	r3, r0
 8001522:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	6a22      	ldr	r2, [r4, #32]
 8001526:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001528:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800152a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001530:	bf01      	itttt	eq
 8001532:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001534:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001536:	4335      	orreq	r5, r6
 8001538:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800153a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800153c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001540:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001544:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001548:	d10b      	bne.n	8001562 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800154a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800154e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001550:	b13d      	cbz	r5, 8001562 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001552:	b9f8      	cbnz	r0, 8001594 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001554:	2a01      	cmp	r2, #1
 8001556:	d02d      	beq.n	80015b4 <HAL_DMA_Init+0xdc>
 8001558:	d301      	bcc.n	800155e <HAL_DMA_Init+0x86>
 800155a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800155c:	d101      	bne.n	8001562 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155e:	01ea      	lsls	r2, r5, #7
 8001560:	d42b      	bmi.n	80015ba <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001562:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ffa1 	bl	80014ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800156c:	233f      	movs	r3, #63	; 0x3f
 800156e:	4093      	lsls	r3, r2
 8001570:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001572:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001574:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001576:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001578:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800157c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157e:	f7ff fd01 	bl	8000f84 <HAL_GetTick>
 8001582:	1b40      	subs	r0, r0, r5
 8001584:	2805      	cmp	r0, #5
 8001586:	d9b9      	bls.n	80014fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	2320      	movs	r3, #32
 800158a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001592:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001594:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001598:	d113      	bne.n	80015c2 <HAL_DMA_Init+0xea>
    switch (tmp)
 800159a:	2a03      	cmp	r2, #3
 800159c:	d8e1      	bhi.n	8001562 <HAL_DMA_Init+0x8a>
 800159e:	a001      	add	r0, pc, #4	; (adr r0, 80015a4 <HAL_DMA_Init+0xcc>)
 80015a0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80015a4:	080015bb 	.word	0x080015bb
 80015a8:	0800155f 	.word	0x0800155f
 80015ac:	080015bb 	.word	0x080015bb
 80015b0:	080015b5 	.word	0x080015b5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015b4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80015b8:	d1d3      	bne.n	8001562 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015ba:	2340      	movs	r3, #64	; 0x40
 80015bc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80015be:	2001      	movs	r0, #1
 80015c0:	e7e5      	b.n	800158e <HAL_DMA_Init+0xb6>
    switch (tmp)
 80015c2:	2a02      	cmp	r2, #2
 80015c4:	d9f9      	bls.n	80015ba <HAL_DMA_Init+0xe2>
 80015c6:	2a03      	cmp	r2, #3
 80015c8:	e7c8      	b.n	800155c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
 80015ce:	bf00      	nop
 80015d0:	f010803f 	.word	0xf010803f

080015d4 <HAL_DMA_Start_IT>:
{
 80015d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80015d6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80015da:	2c01      	cmp	r4, #1
 80015dc:	d036      	beq.n	800164c <HAL_DMA_Start_IT+0x78>
 80015de:	2401      	movs	r4, #1
 80015e0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80015e4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ea:	2c01      	cmp	r4, #1
 80015ec:	f04f 0500 	mov.w	r5, #0
 80015f0:	f04f 0402 	mov.w	r4, #2
 80015f4:	d128      	bne.n	8001648 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fe:	6825      	ldr	r5, [r4, #0]
 8001600:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001604:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001606:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001608:	6883      	ldr	r3, [r0, #8]
 800160a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800160c:	bf0e      	itee	eq
 800160e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001610:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001612:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001614:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001616:	bf08      	it	eq
 8001618:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161a:	233f      	movs	r3, #63	; 0x3f
 800161c:	4093      	lsls	r3, r2
 800161e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	f043 0316 	orr.w	r3, r3, #22
 8001626:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001628:	6963      	ldr	r3, [r4, #20]
 800162a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001630:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001632:	b11b      	cbz	r3, 800163c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001644:	2000      	movs	r0, #0
 8001646:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001648:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800164c:	2002      	movs	r0, #2
}
 800164e:	bd70      	pop	{r4, r5, r6, pc}

08001650 <HAL_DMA_IRQHandler>:
{
 8001650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001658:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800165a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800165e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	2208      	movs	r2, #8
 8001662:	409a      	lsls	r2, r3
 8001664:	4216      	tst	r6, r2
{
 8001666:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001668:	d00c      	beq.n	8001684 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800166a:	6801      	ldr	r1, [r0, #0]
 800166c:	6808      	ldr	r0, [r1, #0]
 800166e:	0740      	lsls	r0, r0, #29
 8001670:	d508      	bpl.n	8001684 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001672:	6808      	ldr	r0, [r1, #0]
 8001674:	f020 0004 	bic.w	r0, r0, #4
 8001678:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800167a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800167c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	2201      	movs	r2, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	4216      	tst	r6, r2
 800168a:	d008      	beq.n	800169e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	6949      	ldr	r1, [r1, #20]
 8001690:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001692:	bf41      	itttt	mi
 8001694:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001696:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001698:	f042 0202 	orrmi.w	r2, r2, #2
 800169c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800169e:	2204      	movs	r2, #4
 80016a0:	409a      	lsls	r2, r3
 80016a2:	4216      	tst	r6, r2
 80016a4:	d008      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016a6:	6821      	ldr	r1, [r4, #0]
 80016a8:	6809      	ldr	r1, [r1, #0]
 80016aa:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016ac:	bf41      	itttt	mi
 80016ae:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80016b2:	f042 0204 	orrmi.w	r2, r2, #4
 80016b6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	2210      	movs	r2, #16
 80016ba:	409a      	lsls	r2, r3
 80016bc:	4216      	tst	r6, r2
 80016be:	d010      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	0709      	lsls	r1, r1, #28
 80016c6:	d50c      	bpl.n	80016e2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016c8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	0350      	lsls	r0, r2, #13
 80016ce:	d535      	bpl.n	800173c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0319      	lsls	r1, r3, #12
 80016d4:	d401      	bmi.n	80016da <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d8:	e000      	b.n	80016dc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	b10b      	cbz	r3, 80016e2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80016de:	4620      	mov	r0, r4
 80016e0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80016e4:	2220      	movs	r2, #32
 80016e6:	408a      	lsls	r2, r1
 80016e8:	4216      	tst	r6, r2
 80016ea:	d038      	beq.n	800175e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	06c6      	lsls	r6, r0, #27
 80016f2:	d534      	bpl.n	800175e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016f4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016f6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80016fa:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016fe:	d125      	bne.n	800174c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001700:	f022 0216 	bic.w	r2, r2, #22
 8001704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001710:	b90a      	cbnz	r2, 8001716 <HAL_DMA_IRQHandler+0xc6>
 8001712:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001714:	b11a      	cbz	r2, 800171e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171e:	233f      	movs	r3, #63	; 0x3f
 8001720:	408b      	lsls	r3, r1
 8001722:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001724:	2300      	movs	r3, #0
 8001726:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800172a:	2301      	movs	r3, #1
 800172c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001730:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001732:	b10b      	cbz	r3, 8001738 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001734:	4620      	mov	r0, r4
 8001736:	4798      	blx	r3
}
 8001738:	b003      	add	sp, #12
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001740:	bf5e      	ittt	pl
 8001742:	681a      	ldrpl	r2, [r3, #0]
 8001744:	f022 0208 	bicpl.w	r2, r2, #8
 8001748:	601a      	strpl	r2, [r3, #0]
 800174a:	e7c4      	b.n	80016d6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174c:	0350      	lsls	r0, r2, #13
 800174e:	d528      	bpl.n	80017a2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0319      	lsls	r1, r3, #12
 8001754:	d432      	bmi.n	80017bc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001756:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001758:	b10b      	cbz	r3, 800175e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800175a:	4620      	mov	r0, r4
 800175c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800175e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0e9      	beq.n	8001738 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001764:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001766:	07da      	lsls	r2, r3, #31
 8001768:	d519      	bpl.n	800179e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800176a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800176c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800176e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800177e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	3301      	adds	r3, #1
 8001786:	429f      	cmp	r7, r3
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	d302      	bcc.n	8001792 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	07db      	lsls	r3, r3, #31
 8001790:	d4f7      	bmi.n	8001782 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001792:	2300      	movs	r3, #0
 8001794:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001798:	2301      	movs	r3, #1
 800179a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800179e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017a0:	e7c7      	b.n	8001732 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80017a8:	d108      	bne.n	80017bc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	f021 0110 	bic.w	r1, r1, #16
 80017b0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80017b2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80017b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80017b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80017bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017be:	e7cb      	b.n	8001758 <HAL_DMA_IRQHandler+0x108>
 80017c0:	20000008 	.word	0x20000008

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001970 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d0:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001974 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017da:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80017e0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80017e8:	45b6      	cmp	lr, r6
 80017ea:	f040 80aa 	bne.w	8001942 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ee:	684c      	ldr	r4, [r1, #4]
 80017f0:	f024 0710 	bic.w	r7, r4, #16
 80017f4:	2f02      	cmp	r7, #2
 80017f6:	d116      	bne.n	8001826 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80017fc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001800:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001804:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001808:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800180c:	f04f 0c0f 	mov.w	ip, #15
 8001810:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001814:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001818:	690d      	ldr	r5, [r1, #16]
 800181a:	fa05 f50b 	lsl.w	r5, r5, fp
 800181e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	f8ca 5020 	str.w	r5, [sl, #32]
 8001826:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800182c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001830:	fa05 f50a 	lsl.w	r5, r5, sl
 8001834:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001836:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001842:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001844:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800184a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184e:	d811      	bhi.n	8001874 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001850:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001852:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001856:	68cf      	ldr	r7, [r1, #12]
 8001858:	fa07 fc0a 	lsl.w	ip, r7, sl
 800185c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001860:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001862:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001868:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800186c:	409f      	lsls	r7, r3
 800186e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001872:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001874:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	688f      	ldr	r7, [r1, #8]
 800187a:	fa07 f70a 	lsl.w	r7, r7, sl
 800187e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001880:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001882:	00e5      	lsls	r5, r4, #3
 8001884:	d55d      	bpl.n	8001942 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	f04f 0b00 	mov.w	fp, #0
 800188a:	f8cd b00c 	str.w	fp, [sp, #12]
 800188e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	4d36      	ldr	r5, [pc, #216]	; (800196c <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001898:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800189c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018a0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018a4:	9703      	str	r7, [sp, #12]
 80018a6:	9f03      	ldr	r7, [sp, #12]
 80018a8:	f023 0703 	bic.w	r7, r3, #3
 80018ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018b0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018b8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018c0:	f04f 0e0f 	mov.w	lr, #15
 80018c4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ca:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	d03f      	beq.n	8001950 <HAL_GPIO_Init+0x18c>
 80018d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018d4:	42a8      	cmp	r0, r5
 80018d6:	d03d      	beq.n	8001954 <HAL_GPIO_Init+0x190>
 80018d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018dc:	42a8      	cmp	r0, r5
 80018de:	d03b      	beq.n	8001958 <HAL_GPIO_Init+0x194>
 80018e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e4:	42a8      	cmp	r0, r5
 80018e6:	d039      	beq.n	800195c <HAL_GPIO_Init+0x198>
 80018e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d037      	beq.n	8001960 <HAL_GPIO_Init+0x19c>
 80018f0:	4548      	cmp	r0, r9
 80018f2:	d037      	beq.n	8001964 <HAL_GPIO_Init+0x1a0>
 80018f4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80018f8:	42a8      	cmp	r0, r5
 80018fa:	bf14      	ite	ne
 80018fc:	2507      	movne	r5, #7
 80018fe:	2506      	moveq	r5, #6
 8001900:	fa05 f50c 	lsl.w	r5, r5, ip
 8001904:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001908:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800190a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800190c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001912:	bf0c      	ite	eq
 8001914:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001916:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001918:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800191a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001920:	bf0c      	ite	eq
 8001922:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001924:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001926:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001928:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800192e:	bf0c      	ite	eq
 8001930:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001932:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001934:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001936:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001938:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800193a:	bf54      	ite	pl
 800193c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800193e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001940:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	3301      	adds	r3, #1
 8001944:	2b10      	cmp	r3, #16
 8001946:	f47f af48 	bne.w	80017da <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800194a:	b005      	add	sp, #20
 800194c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001950:	465d      	mov	r5, fp
 8001952:	e7d5      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 8001954:	2501      	movs	r5, #1
 8001956:	e7d3      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 8001958:	2502      	movs	r5, #2
 800195a:	e7d1      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 800195c:	2503      	movs	r5, #3
 800195e:	e7cf      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 8001960:	2504      	movs	r5, #4
 8001962:	e7cd      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 8001964:	2505      	movs	r5, #5
 8001966:	e7cb      	b.n	8001900 <HAL_GPIO_Init+0x13c>
 8001968:	40013c00 	.word	0x40013c00
 800196c:	40020000 	.word	0x40020000
 8001970:	40023800 	.word	0x40023800
 8001974:	40021400 	.word	0x40021400

08001978 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001978:	b10a      	cbz	r2, 800197e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	6181      	str	r1, [r0, #24]
 800197c:	4770      	bx	lr
 800197e:	0409      	lsls	r1, r1, #16
 8001980:	e7fb      	b.n	800197a <HAL_GPIO_WritePin+0x2>
	...

08001984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001984:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800198c:	4c18      	ldr	r4, [pc, #96]	; (80019f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001990:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_PWREx_EnableOverDrive+0x70>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019a6:	f7ff faed 	bl	8000f84 <HAL_GetTick>
 80019aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019ac:	6863      	ldr	r3, [r4, #4]
 80019ae:	03da      	lsls	r2, r3, #15
 80019b0:	d50b      	bpl.n	80019ca <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019b4:	4c0e      	ldr	r4, [pc, #56]	; (80019f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019ba:	f7ff fae3 	bl	8000f84 <HAL_GetTick>
 80019be:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019c0:	6863      	ldr	r3, [r4, #4]
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	d50a      	bpl.n	80019dc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80019c6:	2000      	movs	r0, #0
 80019c8:	e006      	b.n	80019d8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019ca:	f7ff fadb 	bl	8000f84 <HAL_GetTick>
 80019ce:	1b40      	subs	r0, r0, r5
 80019d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019d4:	d9ea      	bls.n	80019ac <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
}
 80019d8:	b003      	add	sp, #12
 80019da:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019dc:	f7ff fad2 	bl	8000f84 <HAL_GetTick>
 80019e0:	1b40      	subs	r0, r0, r5
 80019e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019e6:	d9eb      	bls.n	80019c0 <HAL_PWREx_EnableOverDrive+0x3c>
 80019e8:	e7f5      	b.n	80019d6 <HAL_PWREx_EnableOverDrive+0x52>
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40007000 	.word	0x40007000
 80019f4:	420e0040 	.word	0x420e0040
 80019f8:	420e0044 	.word	0x420e0044

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a00:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	4604      	mov	r4, r0
 8001a04:	b910      	cbnz	r0, 8001a0c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_ClockConfig+0x124>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f002 020f 	and.w	r2, r2, #15
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d328      	bcc.n	8001a6a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	6821      	ldr	r1, [r4, #0]
 8001a1a:	078f      	lsls	r7, r1, #30
 8001a1c:	d42d      	bmi.n	8001a7a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	07c8      	lsls	r0, r1, #31
 8001a20:	d440      	bmi.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_ClockConfig+0x124>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f002 020f 	and.w	r2, r2, #15
 8001a2a:	4295      	cmp	r5, r2
 8001a2c:	d366      	bcc.n	8001afc <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	0751      	lsls	r1, r2, #29
 8001a32:	d46c      	bmi.n	8001b0e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	0713      	lsls	r3, r2, #28
 8001a36:	d507      	bpl.n	8001a48 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a38:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
 8001a3a:	6921      	ldr	r1, [r4, #16]
 8001a3c:	6893      	ldr	r3, [r2, #8]
 8001a3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a46:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a48:	f000 f898 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_RCC_ClockConfig+0x12c>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	40d8      	lsrs	r0, r3
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_ClockConfig+0x130>)
 8001a5c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fa46 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
 8001a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4299      	cmp	r1, r3
 8001a76:	d1c6      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xa>
 8001a78:	e7ce      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1c>
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	bf1e      	ittt	ne
 8001a82:	689a      	ldrne	r2, [r3, #8]
 8001a84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001a88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	bf42      	ittt	mi
 8001a8e:	689a      	ldrmi	r2, [r3, #8]
 8001a90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001a94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68a0      	ldr	r0, [r4, #8]
 8001a9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a9e:	4302      	orrs	r2, r0
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	e7bc      	b.n	8001a1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	6862      	ldr	r2, [r4, #4]
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
 8001aa8:	2a01      	cmp	r2, #1
 8001aaa:	d11d      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	d0a8      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab4:	4e1b      	ldr	r6, [pc, #108]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
 8001ab6:	68b3      	ldr	r3, [r6, #8]
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fa60 	bl	8000f84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ac8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	68b3      	ldr	r3, [r6, #8]
 8001acc:	6862      	ldr	r2, [r4, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ad6:	d0a4      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff fa54 	bl	8000f84 <HAL_GetTick>
 8001adc:	1bc0      	subs	r0, r0, r7
 8001ade:	4540      	cmp	r0, r8
 8001ae0:	d9f3      	bls.n	8001aca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001ae2:	2003      	movs	r0, #3
}
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae8:	1e91      	subs	r1, r2, #2
 8001aea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	d802      	bhi.n	8001af6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af4:	e7dd      	b.n	8001ab2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	f013 0f02 	tst.w	r3, #2
 8001afa:	e7da      	b.n	8001ab2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	b2ea      	uxtb	r2, r5
 8001afe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	429d      	cmp	r5, r3
 8001b08:	f47f af7d 	bne.w	8001a06 <HAL_RCC_ClockConfig+0xa>
 8001b0c:	e78f      	b.n	8001a2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0e:	4905      	ldr	r1, [pc, #20]	; (8001b24 <HAL_RCC_ClockConfig+0x128>)
 8001b10:	68e0      	ldr	r0, [r4, #12]
 8001b12:	688b      	ldr	r3, [r1, #8]
 8001b14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	608b      	str	r3, [r1, #8]
 8001b1c:	e78a      	b.n	8001a34 <HAL_RCC_ClockConfig+0x38>
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080055b9 	.word	0x080055b9
 8001b2c:	20000008 	.word	0x20000008

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b30:	4b01      	ldr	r3, [pc, #4]	; (8001b38 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b4a:	6810      	ldr	r0, [r2, #0]
}
 8001b4c:	40d8      	lsrs	r0, r3
 8001b4e:	4770      	bx	lr
 8001b50:	40023800 	.word	0x40023800
 8001b54:	080055c9 	.word	0x080055c9
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b6a:	6810      	ldr	r0, [r2, #0]
}
 8001b6c:	40d8      	lsrs	r0, r3
 8001b6e:	4770      	bx	lr
 8001b70:	40023800 	.word	0x40023800
 8001b74:	080055c9 	.word	0x080055c9
 8001b78:	20000008 	.word	0x20000008

08001b7c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7c:	4920      	ldr	r1, [pc, #128]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b80:	688b      	ldr	r3, [r1, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d007      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x1e>
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d020      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x88>)
 8001b90:	481d      	ldr	r0, [pc, #116]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf18      	it	ne
 8001b96:	4610      	movne	r0, r2
 8001b98:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba4:	bf14      	ite	ne
 8001ba6:	4818      	ldrne	r0, [pc, #96]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4816      	ldreq	r0, [pc, #88]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bae:	bf18      	it	ne
 8001bb0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	fba1 0100 	umull	r0, r1, r1, r0
 8001bba:	f7ff f811 	bl	8000be0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x84>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8001bca:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bce:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	bf14      	ite	ne
 8001bdc:	480a      	ldrne	r0, [pc, #40]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4809      	ldreq	r0, [pc, #36]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001be4:	bf18      	it	ne
 8001be6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bec:	fba1 0100 	umull	r0, r1, r1, r0
 8001bf0:	f7fe fff6 	bl	8000be0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x84>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001bfc:	e7e5      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x4e>
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0c:	6803      	ldr	r3, [r0, #0]
{
 8001c0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	07df      	lsls	r7, r3, #31
{
 8001c14:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c16:	d410      	bmi.n	8001c3a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	079e      	lsls	r6, r3, #30
 8001c1c:	d467      	bmi.n	8001cee <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	071a      	lsls	r2, r3, #28
 8001c22:	f100 80b2 	bmi.w	8001d8a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	075b      	lsls	r3, r3, #29
 8001c2a:	f100 80d0 	bmi.w	8001dce <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2e:	69a2      	ldr	r2, [r4, #24]
 8001c30:	2a00      	cmp	r2, #0
 8001c32:	f040 8139 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	e01e      	b.n	8001c78 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	f002 020c 	and.w	r2, r2, #12
 8001c42:	2a04      	cmp	r2, #4
 8001c44:	d010      	beq.n	8001c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c4c:	2a08      	cmp	r2, #8
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	025d      	lsls	r5, r3, #9
 8001c54:	d408      	bmi.n	8001c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c56:	4b90      	ldr	r3, [pc, #576]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5e:	2a0c      	cmp	r2, #12
 8001c60:	d10d      	bne.n	8001c7e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	0250      	lsls	r0, r2, #9
 8001c66:	d50a      	bpl.n	8001c7e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b8b      	ldr	r3, [pc, #556]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0399      	lsls	r1, r3, #14
 8001c6e:	d5d3      	bpl.n	8001c18 <HAL_RCC_OscConfig+0xc>
 8001c70:	6863      	ldr	r3, [r4, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1d0      	bne.n	8001c18 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
}
 8001c78:	b002      	add	sp, #8
 8001c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	6862      	ldr	r2, [r4, #4]
 8001c80:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c84:	d111      	bne.n	8001caa <HAL_RCC_OscConfig+0x9e>
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f979 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4d81      	ldr	r5, [pc, #516]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001c94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	039a      	lsls	r2, r3, #14
 8001c9a:	d4bd      	bmi.n	8001c18 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f972 	bl	8000f84 <HAL_GetTick>
 8001ca0:	1b80      	subs	r0, r0, r6
 8001ca2:	2864      	cmp	r0, #100	; 0x64
 8001ca4:	d9f7      	bls.n	8001c96 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	e7e6      	b.n	8001c78 <HAL_RCC_OscConfig+0x6c>
 8001caa:	4d7b      	ldr	r5, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cac:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xb8>
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	602b      	str	r3, [r5, #0]
 8001cba:	682b      	ldr	r3, [r5, #0]
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	e7e4      	b.n	8001c8e <HAL_RCC_OscConfig+0x82>
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	602b      	str	r3, [r5, #0]
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d1db      	bne.n	8001c8e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f955 	bl	8000f84 <HAL_GetTick>
 8001cda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	039b      	lsls	r3, r3, #14
 8001ce0:	d59a      	bpl.n	8001c18 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f94f 	bl	8000f84 <HAL_GetTick>
 8001ce6:	1b80      	subs	r0, r0, r6
 8001ce8:	2864      	cmp	r0, #100	; 0x64
 8001cea:	d9f7      	bls.n	8001cdc <HAL_RCC_OscConfig+0xd0>
 8001cec:	e7db      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	f012 0f0c 	tst.w	r2, #12
 8001cf6:	d010      	beq.n	8001d1a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cfe:	2a08      	cmp	r2, #8
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	025f      	lsls	r7, r3, #9
 8001d06:	d508      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d08:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001d0a:	6893      	ldr	r3, [r2, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d111      	bne.n	8001d38 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d14:	6853      	ldr	r3, [r2, #4]
 8001d16:	025e      	lsls	r6, r3, #9
 8001d18:	d40e      	bmi.n	8001d38 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	0795      	lsls	r5, r2, #30
 8001d20:	d502      	bpl.n	8001d28 <HAL_RCC_OscConfig+0x11c>
 8001d22:	68e2      	ldr	r2, [r4, #12]
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d1a6      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	6921      	ldr	r1, [r4, #16]
 8001d2c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001d30:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001d34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e772      	b.n	8001c1e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d38:	68e2      	ldr	r2, [r4, #12]
 8001d3a:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x290>)
 8001d3c:	b1b2      	cbz	r2, 8001d6c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d42:	f7ff f91f 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4d54      	ldr	r5, [pc, #336]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001d48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	682b      	ldr	r3, [r5, #0]
 8001d4c:	0798      	lsls	r0, r3, #30
 8001d4e:	d507      	bpl.n	8001d60 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	6922      	ldr	r2, [r4, #16]
 8001d54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	e75e      	b.n	8001c1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff f910 	bl	8000f84 <HAL_GetTick>
 8001d64:	1b80      	subs	r0, r0, r6
 8001d66:	2802      	cmp	r0, #2
 8001d68:	d9ef      	bls.n	8001d4a <HAL_RCC_OscConfig+0x13e>
 8001d6a:	e79c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001d6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f909 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	4d49      	ldr	r5, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001d74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	682b      	ldr	r3, [r5, #0]
 8001d78:	0799      	lsls	r1, r3, #30
 8001d7a:	f57f af50 	bpl.w	8001c1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f901 	bl	8000f84 <HAL_GetTick>
 8001d82:	1b80      	subs	r0, r0, r6
 8001d84:	2802      	cmp	r0, #2
 8001d86:	d9f6      	bls.n	8001d76 <HAL_RCC_OscConfig+0x16a>
 8001d88:	e78d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d8a:	6962      	ldr	r2, [r4, #20]
 8001d8c:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x294>)
 8001d8e:	b17a      	cbz	r2, 8001db0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d94:	f7ff f8f6 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d98:	4d3f      	ldr	r5, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001d9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d9e:	079f      	lsls	r7, r3, #30
 8001da0:	f53f af41 	bmi.w	8001c26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff f8ee 	bl	8000f84 <HAL_GetTick>
 8001da8:	1b80      	subs	r0, r0, r6
 8001daa:	2802      	cmp	r0, #2
 8001dac:	d9f6      	bls.n	8001d9c <HAL_RCC_OscConfig+0x190>
 8001dae:	e77a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001db0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001db2:	f7ff f8e7 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	4d38      	ldr	r5, [pc, #224]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001db8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001dbc:	0798      	lsls	r0, r3, #30
 8001dbe:	f57f af32 	bpl.w	8001c26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f8df 	bl	8000f84 <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d9f6      	bls.n	8001dba <HAL_RCC_OscConfig+0x1ae>
 8001dcc:	e76b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001dd6:	d128      	bne.n	8001e2a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	9201      	str	r2, [sp, #4]
 8001dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ddc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001dec:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4d2d      	ldr	r5, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x298>)
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	05d9      	lsls	r1, r3, #23
 8001df4:	d51b      	bpl.n	8001e2e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	68a3      	ldr	r3, [r4, #8]
 8001df8:	4d27      	ldr	r5, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d127      	bne.n	8001e4e <HAL_RCC_OscConfig+0x242>
 8001dfe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e06:	f7ff f8bd 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4d23      	ldr	r5, [pc, #140]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001e0c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e14:	079b      	lsls	r3, r3, #30
 8001e16:	d539      	bpl.n	8001e8c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001e18:	2e00      	cmp	r6, #0
 8001e1a:	f43f af08 	beq.w	8001c2e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_RCC_OscConfig+0x28c>)
 8001e20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
 8001e28:	e701      	b.n	8001c2e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	e7df      	b.n	8001dee <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001e36:	f7ff f8a5 	bl	8000f84 <HAL_GetTick>
 8001e3a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	05da      	lsls	r2, r3, #23
 8001e40:	d4d9      	bmi.n	8001df6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff f89f 	bl	8000f84 <HAL_GetTick>
 8001e46:	1bc0      	subs	r0, r0, r7
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9f7      	bls.n	8001e3c <HAL_RCC_OscConfig+0x230>
 8001e4c:	e72b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d104      	bne.n	8001e5c <HAL_RCC_OscConfig+0x250>
 8001e52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	672b      	str	r3, [r5, #112]	; 0x70
 8001e5a:	e7d0      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f2>
 8001e5c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	672a      	str	r2, [r5, #112]	; 0x70
 8001e64:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ca      	bne.n	8001e06 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001e70:	f7ff f888 	bl	8000f84 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e78:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e7c:	0798      	lsls	r0, r3, #30
 8001e7e:	d5cb      	bpl.n	8001e18 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff f880 	bl	8000f84 <HAL_GetTick>
 8001e84:	1bc0      	subs	r0, r0, r7
 8001e86:	4540      	cmp	r0, r8
 8001e88:	d9f7      	bls.n	8001e7a <HAL_RCC_OscConfig+0x26e>
 8001e8a:	e70c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f87a 	bl	8000f84 <HAL_GetTick>
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	4540      	cmp	r0, r8
 8001e94:	d9bd      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
 8001e96:	e706      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	42470000 	.word	0x42470000
 8001ea0:	42470e80 	.word	0x42470e80
 8001ea4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea8:	4d23      	ldr	r5, [pc, #140]	; (8001f38 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	68ab      	ldr	r3, [r5, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	f43f aee0 	beq.w	8001c76 <HAL_RCC_OscConfig+0x6a>
 8001eb6:	4e21      	ldr	r6, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x330>)
 8001eb8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebe:	d12d      	bne.n	8001f1c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f860 	bl	8000f84 <HAL_GetTick>
 8001ec4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	0199      	lsls	r1, r3, #6
 8001eca:	d421      	bmi.n	8001f10 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	6a22      	ldr	r2, [r4, #32]
 8001ece:	69e3      	ldr	r3, [r4, #28]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ed4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ede:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ee0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4c14      	ldr	r4, [pc, #80]	; (8001f38 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	0852      	lsrs	r2, r2, #1
 8001eea:	3a01      	subs	r2, #1
 8001eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ef0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f845 	bl	8000f84 <HAL_GetTick>
 8001efa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	019a      	lsls	r2, r3, #6
 8001f00:	f53f ae99 	bmi.w	8001c36 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f83e 	bl	8000f84 <HAL_GetTick>
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	2802      	cmp	r0, #2
 8001f0c:	d9f6      	bls.n	8001efc <HAL_RCC_OscConfig+0x2f0>
 8001f0e:	e6ca      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f838 	bl	8000f84 <HAL_GetTick>
 8001f14:	1bc0      	subs	r0, r0, r7
 8001f16:	2802      	cmp	r0, #2
 8001f18:	d9d5      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x2ba>
 8001f1a:	e6c4      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f832 	bl	8000f84 <HAL_GetTick>
 8001f20:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	f57f ae86 	bpl.w	8001c36 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff f82b 	bl	8000f84 <HAL_GetTick>
 8001f2e:	1b00      	subs	r0, r0, r4
 8001f30:	2802      	cmp	r0, #2
 8001f32:	d9f6      	bls.n	8001f22 <HAL_RCC_OscConfig+0x316>
 8001f34:	e6b7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470060 	.word	0x42470060

08001f40 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001f44:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f46:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001f48:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f4a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001f4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f50:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001f52:	6133      	str	r3, [r6, #16]
{
 8001f54:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f56:	6883      	ldr	r3, [r0, #8]
 8001f58:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001f5a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5c:	4303      	orrs	r3, r0
 8001f5e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f60:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f64:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f66:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f6e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f70:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f72:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001f78:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001f7e:	6173      	str	r3, [r6, #20]
 8001f80:	4b7a      	ldr	r3, [pc, #488]	; (800216c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f82:	d17c      	bne.n	800207e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f84:	429e      	cmp	r6, r3
 8001f86:	d003      	beq.n	8001f90 <UART_SetConfig+0x50>
 8001f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f8c:	429e      	cmp	r6, r3
 8001f8e:	d144      	bne.n	800201a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f90:	f7ff fde4 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001f94:	2519      	movs	r5, #25
 8001f96:	fb05 f300 	mul.w	r3, r5, r0
 8001f9a:	6860      	ldr	r0, [r4, #4]
 8001f9c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fa0:	0040      	lsls	r0, r0, #1
 8001fa2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fa6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001faa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fae:	f7ff fdd5 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	4368      	muls	r0, r5
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fbc:	f7ff fdce 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	4368      	muls	r0, r5
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fce:	fb09 7313 	mls	r3, r9, r3, r7
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	3332      	adds	r3, #50	; 0x32
 8001fd6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fe0:	f7ff fdbc 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001fe4:	6862      	ldr	r2, [r4, #4]
 8001fe6:	4368      	muls	r0, r5
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	fbb0 faf2 	udiv	sl, r0, r2
 8001fee:	f7ff fdb5 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ff2:	6863      	ldr	r3, [r4, #4]
 8001ff4:	4368      	muls	r0, r5
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002000:	fb09 a313 	mls	r3, r9, r3, sl
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	3332      	adds	r3, #50	; 0x32
 8002008:	fbb3 f3f9 	udiv	r3, r3, r9
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002012:	443b      	add	r3, r7
 8002014:	60b3      	str	r3, [r6, #8]
 8002016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800201a:	f7ff fd8f 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800201e:	2519      	movs	r5, #25
 8002020:	fb05 f300 	mul.w	r3, r5, r0
 8002024:	6860      	ldr	r0, [r4, #4]
 8002026:	f04f 0964 	mov.w	r9, #100	; 0x64
 800202a:	0040      	lsls	r0, r0, #1
 800202c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002030:	fbb3 f3f9 	udiv	r3, r3, r9
 8002034:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002038:	f7ff fd80 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800203c:	6863      	ldr	r3, [r4, #4]
 800203e:	4368      	muls	r0, r5
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fbb0 f7f3 	udiv	r7, r0, r3
 8002046:	f7ff fd79 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	4368      	muls	r0, r5
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fbb0 f3f3 	udiv	r3, r0, r3
 8002054:	fbb3 f3f9 	udiv	r3, r3, r9
 8002058:	fb09 7313 	mls	r3, r9, r3, r7
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	3332      	adds	r3, #50	; 0x32
 8002060:	fbb3 f3f9 	udiv	r3, r3, r9
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800206a:	f7ff fd67 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800206e:	6862      	ldr	r2, [r4, #4]
 8002070:	4368      	muls	r0, r5
 8002072:	0052      	lsls	r2, r2, #1
 8002074:	fbb0 faf2 	udiv	sl, r0, r2
 8002078:	f7ff fd60 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800207c:	e7b9      	b.n	8001ff2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800207e:	429e      	cmp	r6, r3
 8002080:	d002      	beq.n	8002088 <UART_SetConfig+0x148>
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <UART_SetConfig+0x230>)
 8002084:	429e      	cmp	r6, r3
 8002086:	d140      	bne.n	800210a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002088:	f7ff fd68 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 800208c:	6867      	ldr	r7, [r4, #4]
 800208e:	2519      	movs	r5, #25
 8002090:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002094:	fb05 f300 	mul.w	r3, r5, r0
 8002098:	00bf      	lsls	r7, r7, #2
 800209a:	fbb3 f3f7 	udiv	r3, r3, r7
 800209e:	fbb3 f3f9 	udiv	r3, r3, r9
 80020a2:	011f      	lsls	r7, r3, #4
 80020a4:	f7ff fd5a 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	4368      	muls	r0, r5
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	fbb0 f8f3 	udiv	r8, r0, r3
 80020b2:	f7ff fd53 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	4368      	muls	r0, r5
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c4:	fb09 8313 	mls	r3, r9, r3, r8
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80020d0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020d4:	f7ff fd42 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	4368      	muls	r0, r5
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	fbb0 faf2 	udiv	sl, r0, r2
 80020e2:	f7ff fd3b 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	4368      	muls	r0, r5
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f4:	fb09 a313 	mls	r3, r9, r3, sl
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	3332      	adds	r3, #50	; 0x32
 80020fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	ea43 0308 	orr.w	r3, r3, r8
 8002108:	e783      	b.n	8002012 <UART_SetConfig+0xd2>
 800210a:	f7ff fd17 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800210e:	6867      	ldr	r7, [r4, #4]
 8002110:	2519      	movs	r5, #25
 8002112:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002116:	fb05 f300 	mul.w	r3, r5, r0
 800211a:	00bf      	lsls	r7, r7, #2
 800211c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002120:	fbb3 f3f9 	udiv	r3, r3, r9
 8002124:	011f      	lsls	r7, r3, #4
 8002126:	f7ff fd09 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	4368      	muls	r0, r5
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fbb0 f8f3 	udiv	r8, r0, r3
 8002134:	f7ff fd02 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	4368      	muls	r0, r5
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002142:	fbb3 f3f9 	udiv	r3, r3, r9
 8002146:	fb09 8313 	mls	r3, r9, r3, r8
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	3332      	adds	r3, #50	; 0x32
 800214e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002152:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002156:	f7ff fcf1 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	4368      	muls	r0, r5
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	fbb0 faf2 	udiv	sl, r0, r2
 8002164:	f7ff fcea 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8002168:	e7bd      	b.n	80020e6 <UART_SetConfig+0x1a6>
 800216a:	bf00      	nop
 800216c:	40011000 	.word	0x40011000
 8002170:	40011400 	.word	0x40011400

08002174 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	4604      	mov	r4, r0
 8002178:	460e      	mov	r6, r1
 800217a:	4617      	mov	r7, r2
 800217c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800217e:	6821      	ldr	r1, [r4, #0]
 8002180:	680b      	ldr	r3, [r1, #0]
 8002182:	ea36 0303 	bics.w	r3, r6, r3
 8002186:	d101      	bne.n	800218c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002188:	2000      	movs	r0, #0
}
 800218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800218c:	1c6b      	adds	r3, r5, #1
 800218e:	d0f7      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002190:	b995      	cbnz	r5, 80021b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800219a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021a4:	2320      	movs	r3, #32
 80021a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021ae:	2300      	movs	r3, #0
 80021b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021b4:	2003      	movs	r0, #3
 80021b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021b8:	f7fe fee4 	bl	8000f84 <HAL_GetTick>
 80021bc:	1bc0      	subs	r0, r0, r7
 80021be:	4285      	cmp	r5, r0
 80021c0:	d2dd      	bcs.n	800217e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021c2:	e7e6      	b.n	8002192 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021c4 <HAL_UART_Init>:
{
 80021c4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021c6:	4604      	mov	r4, r0
 80021c8:	b340      	cbz	r0, 800221c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021d2:	b91b      	cbnz	r3, 80021dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021d8:	f000 fa24 	bl	8002624 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021de:	2324      	movs	r3, #36	; 0x24
 80021e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021e4:	68d3      	ldr	r3, [r2, #12]
 80021e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7ff fea7 	bl	8001f40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002202:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800220a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800220e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002212:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002216:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800221a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800221c:	2001      	movs	r0, #1
}
 800221e:	bd10      	pop	{r4, pc}

08002220 <HAL_UART_Transmit>:
{
 8002220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002224:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002226:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800222a:	2b20      	cmp	r3, #32
{
 800222c:	4604      	mov	r4, r0
 800222e:	460d      	mov	r5, r1
 8002230:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002232:	d14f      	bne.n	80022d4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002234:	2900      	cmp	r1, #0
 8002236:	d04a      	beq.n	80022ce <HAL_UART_Transmit+0xae>
 8002238:	2a00      	cmp	r2, #0
 800223a:	d048      	beq.n	80022ce <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800223c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002240:	2b01      	cmp	r3, #1
 8002242:	d047      	beq.n	80022d4 <HAL_UART_Transmit+0xb4>
 8002244:	2301      	movs	r3, #1
 8002246:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224a:	2300      	movs	r3, #0
 800224c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	2321      	movs	r3, #33	; 0x21
 8002250:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002254:	f7fe fe96 	bl	8000f84 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002258:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800225c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800225e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002262:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002264:	b29b      	uxth	r3, r3
 8002266:	b96b      	cbnz	r3, 8002284 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	4632      	mov	r2, r6
 800226c:	2140      	movs	r1, #64	; 0x40
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff ff80 	bl	8002174 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002274:	b9b0      	cbnz	r0, 80022a4 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002276:	2320      	movs	r3, #32
 8002278:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800227c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002284:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002286:	3b01      	subs	r3, #1
 8002288:	b29b      	uxth	r3, r3
 800228a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	4632      	mov	r2, r6
 8002294:	463b      	mov	r3, r7
 8002296:	f04f 0180 	mov.w	r1, #128	; 0x80
 800229a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800229c:	d10e      	bne.n	80022bc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	f7ff ff69 	bl	8002174 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022a2:	b110      	cbz	r0, 80022aa <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80022a4:	2003      	movs	r0, #3
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022aa:	882b      	ldrh	r3, [r5, #0]
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80022b4:	6923      	ldr	r3, [r4, #16]
 80022b6:	b943      	cbnz	r3, 80022ca <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80022b8:	3502      	adds	r5, #2
 80022ba:	e7d2      	b.n	8002262 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022bc:	f7ff ff5a 	bl	8002174 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d1ef      	bne.n	80022a4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	782a      	ldrb	r2, [r5, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	3501      	adds	r5, #1
 80022cc:	e7c9      	b.n	8002262 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022ce:	2001      	movs	r0, #1
 80022d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022d4:	2002      	movs	r0, #2
}
 80022d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b530      	push	{r4, r5, lr}
 80022de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <SystemClock_Config+0xb0>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	9100      	str	r1, [sp, #0]
 80022e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <SystemClock_Config+0xb4>)
 80022fa:	9101      	str	r1, [sp, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230e:	2301      	movs	r3, #1
 8002310:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002316:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002320:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002322:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002324:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002326:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002328:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800232a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800232e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002330:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002332:	f7ff fc6b 	bl	8001c0c <HAL_RCC_OscConfig>
 8002336:	b100      	cbz	r0, 800233a <SystemClock_Config+0x5e>
 8002338:	e7fe      	b.n	8002338 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800233a:	f7ff fb23 	bl	8001984 <HAL_PWREx_EnableOverDrive>
 800233e:	b100      	cbz	r0, 8002342 <SystemClock_Config+0x66>
 8002340:	e7fe      	b.n	8002340 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
 8002344:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002346:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800234e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002354:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002356:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002358:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800235a:	f7ff fb4f 	bl	80019fc <HAL_RCC_ClockConfig>
 800235e:	4604      	mov	r4, r0
 8002360:	b100      	cbz	r0, 8002364 <SystemClock_Config+0x88>
 8002362:	e7fe      	b.n	8002362 <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002364:	f7ff fbe4 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8002368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002370:	f7ff f874 	bl	800145c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002374:	4628      	mov	r0, r5
 8002376:	f7ff f887 	bl	8001488 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800237a:	4622      	mov	r2, r4
 800237c:	4621      	mov	r1, r4
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	f7ff f82b 	bl	80013dc <HAL_NVIC_SetPriority>
}
 8002386:	b015      	add	sp, #84	; 0x54
 8002388:	bd30      	pop	{r4, r5, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000

08002394 <main>:
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b09a      	sub	sp, #104	; 0x68
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	2400      	movs	r4, #0
 800239a:	4d59      	ldr	r5, [pc, #356]	; (8002500 <main+0x16c>)
  HAL_Init();
 800239c:	f7fe fdcc 	bl	8000f38 <HAL_Init>
  SystemClock_Config();
 80023a0:	f7ff ff9c 	bl	80022dc <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a4:	9402      	str	r4, [sp, #8]
 80023a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023a8:	4856      	ldr	r0, [pc, #344]	; (8002504 <main+0x170>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	632b      	str	r3, [r5, #48]	; 0x30
 80023b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	9403      	str	r4, [sp, #12]
 80023bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c2:	632b      	str	r3, [r5, #48]	; 0x30
 80023c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	9303      	str	r3, [sp, #12]
 80023cc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	9404      	str	r4, [sp, #16]
 80023d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	632b      	str	r3, [r5, #48]	; 0x30
 80023d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	9304      	str	r3, [sp, #16]
 80023e0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	9405      	str	r4, [sp, #20]
 80023e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	632b      	str	r3, [r5, #48]	; 0x30
 80023ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023ee:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023f2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023f6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023fa:	f7ff fabd 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002402:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002404:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002406:	4b40      	ldr	r3, [pc, #256]	; (8002508 <main+0x174>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002408:	4840      	ldr	r0, [pc, #256]	; (800250c <main+0x178>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800240a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	9408      	str	r4, [sp, #32]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002410:	f7ff f9d8 	bl	80017c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002414:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002416:	a906      	add	r1, sp, #24
 8002418:	483a      	ldr	r0, [pc, #232]	; (8002504 <main+0x170>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800241a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002422:	f7ff f9cf 	bl	80017c4 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002426:	9401      	str	r4, [sp, #4]
 8002428:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800242a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242e:	632b      	str	r3, [r5, #48]	; 0x30
 8002430:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Instance = USART2;
 8002432:	4d37      	ldr	r5, [pc, #220]	; (8002510 <main+0x17c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002438:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800243a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800243c:	4622      	mov	r2, r4
 800243e:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002440:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002442:	f7fe ffcb 	bl	80013dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002446:	2038      	movs	r0, #56	; 0x38
 8002448:	f7fe fffc 	bl	8001444 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 800244c:	4931      	ldr	r1, [pc, #196]	; (8002514 <main+0x180>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 8002450:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002454:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002458:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245e:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002460:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002466:	f7ff fead 	bl	80021c4 <HAL_UART_Init>
 800246a:	b100      	cbz	r0, 800246e <main+0xda>
 800246c:	e7fe      	b.n	800246c <main+0xd8>
  hadc1.Instance = ADC1;
 800246e:	4c2a      	ldr	r4, [pc, #168]	; (8002518 <main+0x184>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <main+0x188>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002472:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800247c:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800247e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <main+0x18c>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002482:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002484:	2702      	movs	r7, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002486:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8002488:	6126      	str	r6, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800248a:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800248c:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 800248e:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002490:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002492:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002494:	f7fe fd90 	bl	8000fb8 <HAL_ADC_Init>
 8002498:	b100      	cbz	r0, 800249c <main+0x108>
 800249a:	e7fe      	b.n	800249a <main+0x106>
  sConfig.Channel = ADC_CHANNEL_0;
 800249c:	9006      	str	r0, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800249e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a0:	a906      	add	r1, sp, #24
 80024a2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 80024a4:	9607      	str	r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024a6:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a8:	f7fe feee 	bl	8001288 <HAL_ADC_ConfigChannel>
 80024ac:	b100      	cbz	r0, 80024b0 <main+0x11c>
 80024ae:	e7fe      	b.n	80024ae <main+0x11a>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b0:	a906      	add	r1, sp, #24
 80024b2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80024b4:	9606      	str	r6, [sp, #24]
  sConfig.Rank = 2;
 80024b6:	9707      	str	r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b8:	f7fe fee6 	bl	8001288 <HAL_ADC_ConfigChannel>
 80024bc:	b100      	cbz	r0, 80024c0 <main+0x12c>
 80024be:	e7fe      	b.n	80024be <main+0x12a>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_Data,2);
 80024c0:	4620      	mov	r0, r4
 80024c2:	463a      	mov	r2, r7
 80024c4:	4917      	ldr	r1, [pc, #92]	; (8002524 <main+0x190>)
	  sprintf(str,"%15lu%15lu",ADC_Data[0],ADC_Data[1]);
 80024c6:	4c17      	ldr	r4, [pc, #92]	; (8002524 <main+0x190>)
 80024c8:	4e17      	ldr	r6, [pc, #92]	; (8002528 <main+0x194>)
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_Data,2);
 80024ca:	f7fe fe19 	bl	8001100 <HAL_ADC_Start_DMA>
	  HAL_Delay(100);
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f7fe fd5e 	bl	8000f90 <HAL_Delay>
	  sprintf(str,"%15lu%15lu",ADC_Data[0],ADC_Data[1]);
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	4631      	mov	r1, r6
 80024da:	a806      	add	r0, sp, #24
 80024dc:	f000 f94c 	bl	8002778 <sprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)str,30,1000);
 80024e0:	a906      	add	r1, sp, #24
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	221e      	movs	r2, #30
 80024e8:	4628      	mov	r0, r5
 80024ea:	f7ff fe99 	bl	8002220 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n",2,1000);
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	2202      	movs	r2, #2
 80024f4:	490d      	ldr	r1, [pc, #52]	; (800252c <main+0x198>)
 80024f6:	4628      	mov	r0, r5
 80024f8:	f7ff fe92 	bl	8002220 <HAL_UART_Transmit>
 80024fc:	e7e7      	b.n	80024ce <main+0x13a>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	10210000 	.word	0x10210000
 800250c:	40020800 	.word	0x40020800
 8002510:	2000077c 	.word	0x2000077c
 8002514:	40004400 	.word	0x40004400
 8002518:	200006d4 	.word	0x200006d4
 800251c:	40012000 	.word	0x40012000
 8002520:	0f000001 	.word	0x0f000001
 8002524:	200007bc 	.word	0x200007bc
 8002528:	08005590 	.word	0x08005590
 800252c:	0800559b 	.word	0x0800559b

08002530 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002530:	e7fe      	b.n	8002530 <_Error_Handler>

08002532 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002532:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002534:	2007      	movs	r0, #7
 8002536:	f7fe ff3f 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	4611      	mov	r1, r2
 800253e:	f06f 000b 	mvn.w	r0, #11
 8002542:	f7fe ff4b 	bl	80013dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	4611      	mov	r1, r2
 800254a:	f06f 000a 	mvn.w	r0, #10
 800254e:	f7fe ff45 	bl	80013dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	4611      	mov	r1, r2
 8002556:	f06f 0009 	mvn.w	r0, #9
 800255a:	f7fe ff3f 	bl	80013dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	4611      	mov	r1, r2
 8002562:	f06f 0004 	mvn.w	r0, #4
 8002566:	f7fe ff39 	bl	80013dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	4611      	mov	r1, r2
 800256e:	f06f 0003 	mvn.w	r0, #3
 8002572:	f7fe ff33 	bl	80013dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	4611      	mov	r1, r2
 800257a:	f06f 0001 	mvn.w	r0, #1
 800257e:	f7fe ff2d 	bl	80013dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	4611      	mov	r1, r2
 8002586:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800258e:	f7fe bf25 	b.w	80013dc <HAL_NVIC_SetPriority>
	...

08002594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002594:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_ADC_MspInit+0x7c>)
 800259a:	429a      	cmp	r2, r3
{
 800259c:	b086      	sub	sp, #24
 800259e:	4606      	mov	r6, r0
  if(hadc->Instance==ADC1)
 80025a0:	d134      	bne.n	800260c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025a2:	2500      	movs	r5, #0
 80025a4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80025a8:	9500      	str	r5, [sp, #0]
 80025aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	4819      	ldr	r0, [pc, #100]	; (8002614 <HAL_ADC_MspInit+0x80>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025ae:	4c1a      	ldr	r4, [pc, #104]	; (8002618 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025c4:	2303      	movs	r3, #3
 80025c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f7ff f8fb 	bl	80017c4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d0:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025d2:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025da:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025e6:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ec:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025ee:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f4:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025f6:	6223      	str	r3, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f8:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025fa:	f7fe ff6d 	bl	80014d8 <HAL_DMA_Init>
 80025fe:	b118      	cbz	r0, 8002608 <HAL_ADC_MspInit+0x74>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002600:	2173      	movs	r1, #115	; 0x73
 8002602:	4807      	ldr	r0, [pc, #28]	; (8002620 <HAL_ADC_MspInit+0x8c>)
 8002604:	f7ff ff94 	bl	8002530 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002608:	63b4      	str	r4, [r6, #56]	; 0x38
 800260a:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800260c:	b006      	add	sp, #24
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	40012000 	.word	0x40012000
 8002614:	40020000 	.word	0x40020000
 8002618:	2000071c 	.word	0x2000071c
 800261c:	40026410 	.word	0x40026410
 8002620:	0800559e 	.word	0x0800559e

08002624 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002626:	6802      	ldr	r2, [r0, #0]
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_UART_MspInit+0x44>)
 800262a:	429a      	cmp	r2, r3
 800262c:	d119      	bne.n	8002662 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	480e      	ldr	r0, [pc, #56]	; (8002670 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002638:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002648:	230c      	movs	r3, #12
 800264a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002650:	2301      	movs	r3, #1
 8002652:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265a:	2307      	movs	r3, #7
 800265c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f7ff f8b1 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002662:	b007      	add	sp, #28
 8002664:	f85d fb04 	ldr.w	pc, [sp], #4
 8002668:	40004400 	.word	0x40004400
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000

08002674 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f7fe fc79 	bl	8000f6c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800267e:	f7fe bf10 	b.w	80014a2 <HAL_SYSTICK_IRQHandler>
	...

08002684 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002684:	4801      	ldr	r0, [pc, #4]	; (800268c <DMA2_Stream0_IRQHandler+0x8>)
 8002686:	f7fe bfe3 	b.w	8001650 <HAL_DMA_IRQHandler>
 800268a:	bf00      	nop
 800268c:	2000071c 	.word	0x2000071c

08002690 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	490f      	ldr	r1, [pc, #60]	; (80026d0 <SystemInit+0x40>)
 8002692:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002696:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <SystemInit+0x44>)
 80026a0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026a2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80026aa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <SystemInit+0x48>)
 80026ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026c4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026ca:	608b      	str	r3, [r1, #8]
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	24003010 	.word	0x24003010

080026dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026e2:	e003      	b.n	80026ec <LoopCopyDataInit>

080026e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026ea:	3104      	adds	r1, #4

080026ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026ec:	480b      	ldr	r0, [pc, #44]	; (800271c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026f4:	d3f6      	bcc.n	80026e4 <CopyDataInit>
  ldr  r2, =_sbss
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026f8:	e002      	b.n	8002700 <LoopFillZerobss>

080026fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026fc:	f842 3b04 	str.w	r3, [r2], #4

08002700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002704:	d3f9      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002706:	f7ff ffc3 	bl	8002690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270a:	f000 f811 	bl	8002730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270e:	f7ff fe41 	bl	8002394 <main>
  bx  lr    
 8002712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002714:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002718:	08005850 	.word	0x08005850
  ldr  r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002720:	2000067c 	.word	0x2000067c
  ldr  r2, =_sbss
 8002724:	2000067c 	.word	0x2000067c
  ldr  r3, = _ebss
 8002728:	200007d4 	.word	0x200007d4

0800272c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <__libc_init_array>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4e0d      	ldr	r6, [pc, #52]	; (8002768 <__libc_init_array+0x38>)
 8002734:	4c0d      	ldr	r4, [pc, #52]	; (800276c <__libc_init_array+0x3c>)
 8002736:	1ba4      	subs	r4, r4, r6
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	2500      	movs	r5, #0
 800273c:	42a5      	cmp	r5, r4
 800273e:	d109      	bne.n	8002754 <__libc_init_array+0x24>
 8002740:	4e0b      	ldr	r6, [pc, #44]	; (8002770 <__libc_init_array+0x40>)
 8002742:	4c0c      	ldr	r4, [pc, #48]	; (8002774 <__libc_init_array+0x44>)
 8002744:	f002 ff12 	bl	800556c <_init>
 8002748:	1ba4      	subs	r4, r4, r6
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	2500      	movs	r5, #0
 800274e:	42a5      	cmp	r5, r4
 8002750:	d105      	bne.n	800275e <__libc_init_array+0x2e>
 8002752:	bd70      	pop	{r4, r5, r6, pc}
 8002754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002758:	4798      	blx	r3
 800275a:	3501      	adds	r5, #1
 800275c:	e7ee      	b.n	800273c <__libc_init_array+0xc>
 800275e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002762:	4798      	blx	r3
 8002764:	3501      	adds	r5, #1
 8002766:	e7f2      	b.n	800274e <__libc_init_array+0x1e>
 8002768:	08005848 	.word	0x08005848
 800276c:	08005848 	.word	0x08005848
 8002770:	08005848 	.word	0x08005848
 8002774:	0800584c 	.word	0x0800584c

08002778 <sprintf>:
 8002778:	b40e      	push	{r1, r2, r3}
 800277a:	b500      	push	{lr}
 800277c:	b09c      	sub	sp, #112	; 0x70
 800277e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002782:	ab1d      	add	r3, sp, #116	; 0x74
 8002784:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002788:	9002      	str	r0, [sp, #8]
 800278a:	9006      	str	r0, [sp, #24]
 800278c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <sprintf+0x44>)
 8002792:	9104      	str	r1, [sp, #16]
 8002794:	9107      	str	r1, [sp, #28]
 8002796:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800279a:	f853 2b04 	ldr.w	r2, [r3], #4
 800279e:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027a2:	6800      	ldr	r0, [r0, #0]
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	a902      	add	r1, sp, #8
 80027a8:	f000 f80a 	bl	80027c0 <_svfprintf_r>
 80027ac:	9b02      	ldr	r3, [sp, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	b01c      	add	sp, #112	; 0x70
 80027b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b8:	b003      	add	sp, #12
 80027ba:	4770      	bx	lr
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <_svfprintf_r>:
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	b0bd      	sub	sp, #244	; 0xf4
 80027c6:	468a      	mov	sl, r1
 80027c8:	4615      	mov	r5, r2
 80027ca:	461f      	mov	r7, r3
 80027cc:	4683      	mov	fp, r0
 80027ce:	f001 fe25 	bl	800441c <_localeconv_r>
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	930d      	str	r3, [sp, #52]	; 0x34
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fd6a 	bl	80002b0 <strlen>
 80027dc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80027e0:	9008      	str	r0, [sp, #32]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	d518      	bpl.n	8002818 <_svfprintf_r+0x58>
 80027e6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80027ea:	b9ab      	cbnz	r3, 8002818 <_svfprintf_r+0x58>
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	4658      	mov	r0, fp
 80027f0:	f001 fe2a 	bl	8004448 <_malloc_r>
 80027f4:	f8ca 0000 	str.w	r0, [sl]
 80027f8:	f8ca 0010 	str.w	r0, [sl, #16]
 80027fc:	b948      	cbnz	r0, 8002812 <_svfprintf_r+0x52>
 80027fe:	230c      	movs	r3, #12
 8002800:	f8cb 3000 	str.w	r3, [fp]
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	9309      	str	r3, [sp, #36]	; 0x24
 800280a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280c:	b03d      	add	sp, #244	; 0xf4
 800280e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	f8ca 3014 	str.w	r3, [sl, #20]
 8002818:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002a80 <_svfprintf_r+0x2c0>
 800281c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002820:	2300      	movs	r3, #0
 8002822:	ac2c      	add	r4, sp, #176	; 0xb0
 8002824:	941f      	str	r4, [sp, #124]	; 0x7c
 8002826:	9321      	str	r3, [sp, #132]	; 0x84
 8002828:	9320      	str	r3, [sp, #128]	; 0x80
 800282a:	9505      	str	r5, [sp, #20]
 800282c:	9303      	str	r3, [sp, #12]
 800282e:	9311      	str	r3, [sp, #68]	; 0x44
 8002830:	9310      	str	r3, [sp, #64]	; 0x40
 8002832:	9309      	str	r3, [sp, #36]	; 0x24
 8002834:	9d05      	ldr	r5, [sp, #20]
 8002836:	462b      	mov	r3, r5
 8002838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800283c:	b112      	cbz	r2, 8002844 <_svfprintf_r+0x84>
 800283e:	2a25      	cmp	r2, #37	; 0x25
 8002840:	f040 8083 	bne.w	800294a <_svfprintf_r+0x18a>
 8002844:	9b05      	ldr	r3, [sp, #20]
 8002846:	1aee      	subs	r6, r5, r3
 8002848:	d00d      	beq.n	8002866 <_svfprintf_r+0xa6>
 800284a:	e884 0048 	stmia.w	r4, {r3, r6}
 800284e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002850:	4433      	add	r3, r6
 8002852:	9321      	str	r3, [sp, #132]	; 0x84
 8002854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002856:	3301      	adds	r3, #1
 8002858:	2b07      	cmp	r3, #7
 800285a:	9320      	str	r3, [sp, #128]	; 0x80
 800285c:	dc77      	bgt.n	800294e <_svfprintf_r+0x18e>
 800285e:	3408      	adds	r4, #8
 8002860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002862:	4433      	add	r3, r6
 8002864:	9309      	str	r3, [sp, #36]	; 0x24
 8002866:	782b      	ldrb	r3, [r5, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8729 	beq.w	80036c0 <_svfprintf_r+0xf00>
 800286e:	2300      	movs	r3, #0
 8002870:	1c69      	adds	r1, r5, #1
 8002872:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002876:	461a      	mov	r2, r3
 8002878:	f04f 39ff 	mov.w	r9, #4294967295
 800287c:	930a      	str	r3, [sp, #40]	; 0x28
 800287e:	461d      	mov	r5, r3
 8002880:	200a      	movs	r0, #10
 8002882:	1c4e      	adds	r6, r1, #1
 8002884:	7809      	ldrb	r1, [r1, #0]
 8002886:	9605      	str	r6, [sp, #20]
 8002888:	9102      	str	r1, [sp, #8]
 800288a:	9902      	ldr	r1, [sp, #8]
 800288c:	3920      	subs	r1, #32
 800288e:	2958      	cmp	r1, #88	; 0x58
 8002890:	f200 8418 	bhi.w	80030c4 <_svfprintf_r+0x904>
 8002894:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002898:	041600a6 	.word	0x041600a6
 800289c:	00ab0416 	.word	0x00ab0416
 80028a0:	04160416 	.word	0x04160416
 80028a4:	04160416 	.word	0x04160416
 80028a8:	04160416 	.word	0x04160416
 80028ac:	006500ae 	.word	0x006500ae
 80028b0:	00b70416 	.word	0x00b70416
 80028b4:	041600ba 	.word	0x041600ba
 80028b8:	00da00d7 	.word	0x00da00d7
 80028bc:	00da00da 	.word	0x00da00da
 80028c0:	00da00da 	.word	0x00da00da
 80028c4:	00da00da 	.word	0x00da00da
 80028c8:	00da00da 	.word	0x00da00da
 80028cc:	04160416 	.word	0x04160416
 80028d0:	04160416 	.word	0x04160416
 80028d4:	04160416 	.word	0x04160416
 80028d8:	04160416 	.word	0x04160416
 80028dc:	04160416 	.word	0x04160416
 80028e0:	012b0115 	.word	0x012b0115
 80028e4:	012b0416 	.word	0x012b0416
 80028e8:	04160416 	.word	0x04160416
 80028ec:	04160416 	.word	0x04160416
 80028f0:	041600ed 	.word	0x041600ed
 80028f4:	03400416 	.word	0x03400416
 80028f8:	04160416 	.word	0x04160416
 80028fc:	04160416 	.word	0x04160416
 8002900:	03a80416 	.word	0x03a80416
 8002904:	04160416 	.word	0x04160416
 8002908:	04160086 	.word	0x04160086
 800290c:	04160416 	.word	0x04160416
 8002910:	04160416 	.word	0x04160416
 8002914:	04160416 	.word	0x04160416
 8002918:	04160416 	.word	0x04160416
 800291c:	01070416 	.word	0x01070416
 8002920:	012b006b 	.word	0x012b006b
 8002924:	012b012b 	.word	0x012b012b
 8002928:	006b00f0 	.word	0x006b00f0
 800292c:	04160416 	.word	0x04160416
 8002930:	041600fa 	.word	0x041600fa
 8002934:	03420322 	.word	0x03420322
 8002938:	01010376 	.word	0x01010376
 800293c:	03870416 	.word	0x03870416
 8002940:	03aa0416 	.word	0x03aa0416
 8002944:	04160416 	.word	0x04160416
 8002948:	03c2      	.short	0x03c2
 800294a:	461d      	mov	r5, r3
 800294c:	e773      	b.n	8002836 <_svfprintf_r+0x76>
 800294e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002950:	4651      	mov	r1, sl
 8002952:	4658      	mov	r0, fp
 8002954:	f002 fa7e 	bl	8004e54 <__ssprint_r>
 8002958:	2800      	cmp	r0, #0
 800295a:	f040 8692 	bne.w	8003682 <_svfprintf_r+0xec2>
 800295e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002960:	e77e      	b.n	8002860 <_svfprintf_r+0xa0>
 8002962:	2301      	movs	r3, #1
 8002964:	222b      	movs	r2, #43	; 0x2b
 8002966:	9905      	ldr	r1, [sp, #20]
 8002968:	e78b      	b.n	8002882 <_svfprintf_r+0xc2>
 800296a:	460f      	mov	r7, r1
 800296c:	e7fb      	b.n	8002966 <_svfprintf_r+0x1a6>
 800296e:	b10b      	cbz	r3, 8002974 <_svfprintf_r+0x1b4>
 8002970:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002974:	06ae      	lsls	r6, r5, #26
 8002976:	f140 80aa 	bpl.w	8002ace <_svfprintf_r+0x30e>
 800297a:	3707      	adds	r7, #7
 800297c:	f027 0707 	bic.w	r7, r7, #7
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	2e00      	cmp	r6, #0
 800298c:	f177 0300 	sbcs.w	r3, r7, #0
 8002990:	da06      	bge.n	80029a0 <_svfprintf_r+0x1e0>
 8002992:	4276      	negs	r6, r6
 8002994:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002998:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800299c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80029a0:	2301      	movs	r3, #1
 80029a2:	e2ca      	b.n	8002f3a <_svfprintf_r+0x77a>
 80029a4:	b10b      	cbz	r3, 80029aa <_svfprintf_r+0x1ea>
 80029a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <_svfprintf_r+0x2c8>)
 80029ac:	9311      	str	r3, [sp, #68]	; 0x44
 80029ae:	06ab      	lsls	r3, r5, #26
 80029b0:	f140 8339 	bpl.w	8003026 <_svfprintf_r+0x866>
 80029b4:	3707      	adds	r7, #7
 80029b6:	f027 0707 	bic.w	r7, r7, #7
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	e9d7 6700 	ldrd	r6, r7, [r7]
 80029c2:	9304      	str	r3, [sp, #16]
 80029c4:	07e8      	lsls	r0, r5, #31
 80029c6:	d50b      	bpl.n	80029e0 <_svfprintf_r+0x220>
 80029c8:	ea56 0307 	orrs.w	r3, r6, r7
 80029cc:	d008      	beq.n	80029e0 <_svfprintf_r+0x220>
 80029ce:	2330      	movs	r3, #48	; 0x30
 80029d0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80029d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80029d8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80029dc:	f045 0502 	orr.w	r5, r5, #2
 80029e0:	2302      	movs	r3, #2
 80029e2:	e2a7      	b.n	8002f34 <_svfprintf_r+0x774>
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d1be      	bne.n	8002966 <_svfprintf_r+0x1a6>
 80029e8:	2301      	movs	r3, #1
 80029ea:	2220      	movs	r2, #32
 80029ec:	e7bb      	b.n	8002966 <_svfprintf_r+0x1a6>
 80029ee:	f045 0501 	orr.w	r5, r5, #1
 80029f2:	e7b8      	b.n	8002966 <_svfprintf_r+0x1a6>
 80029f4:	683e      	ldr	r6, [r7, #0]
 80029f6:	960a      	str	r6, [sp, #40]	; 0x28
 80029f8:	2e00      	cmp	r6, #0
 80029fa:	f107 0104 	add.w	r1, r7, #4
 80029fe:	dab4      	bge.n	800296a <_svfprintf_r+0x1aa>
 8002a00:	4276      	negs	r6, r6
 8002a02:	960a      	str	r6, [sp, #40]	; 0x28
 8002a04:	460f      	mov	r7, r1
 8002a06:	f045 0504 	orr.w	r5, r5, #4
 8002a0a:	e7ac      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002a0c:	9905      	ldr	r1, [sp, #20]
 8002a0e:	1c4e      	adds	r6, r1, #1
 8002a10:	7809      	ldrb	r1, [r1, #0]
 8002a12:	9102      	str	r1, [sp, #8]
 8002a14:	292a      	cmp	r1, #42	; 0x2a
 8002a16:	d010      	beq.n	8002a3a <_svfprintf_r+0x27a>
 8002a18:	f04f 0900 	mov.w	r9, #0
 8002a1c:	9605      	str	r6, [sp, #20]
 8002a1e:	9902      	ldr	r1, [sp, #8]
 8002a20:	3930      	subs	r1, #48	; 0x30
 8002a22:	2909      	cmp	r1, #9
 8002a24:	f63f af31 	bhi.w	800288a <_svfprintf_r+0xca>
 8002a28:	fb00 1909 	mla	r9, r0, r9, r1
 8002a2c:	9905      	ldr	r1, [sp, #20]
 8002a2e:	460e      	mov	r6, r1
 8002a30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002a34:	9102      	str	r1, [sp, #8]
 8002a36:	9605      	str	r6, [sp, #20]
 8002a38:	e7f1      	b.n	8002a1e <_svfprintf_r+0x25e>
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	9605      	str	r6, [sp, #20]
 8002a3e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002a42:	3704      	adds	r7, #4
 8002a44:	e78f      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002a46:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002a4a:	e78c      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	910a      	str	r1, [sp, #40]	; 0x28
 8002a50:	9902      	ldr	r1, [sp, #8]
 8002a52:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002a54:	3930      	subs	r1, #48	; 0x30
 8002a56:	fb00 1106 	mla	r1, r0, r6, r1
 8002a5a:	910a      	str	r1, [sp, #40]	; 0x28
 8002a5c:	9905      	ldr	r1, [sp, #20]
 8002a5e:	460e      	mov	r6, r1
 8002a60:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002a64:	9102      	str	r1, [sp, #8]
 8002a66:	9902      	ldr	r1, [sp, #8]
 8002a68:	9605      	str	r6, [sp, #20]
 8002a6a:	3930      	subs	r1, #48	; 0x30
 8002a6c:	2909      	cmp	r1, #9
 8002a6e:	d9ef      	bls.n	8002a50 <_svfprintf_r+0x290>
 8002a70:	e70b      	b.n	800288a <_svfprintf_r+0xca>
 8002a72:	f045 0508 	orr.w	r5, r5, #8
 8002a76:	e776      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002a78:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002a7c:	e773      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002a7e:	bf00      	nop
	...
 8002a88:	080055e1 	.word	0x080055e1
 8002a8c:	9905      	ldr	r1, [sp, #20]
 8002a8e:	7809      	ldrb	r1, [r1, #0]
 8002a90:	296c      	cmp	r1, #108	; 0x6c
 8002a92:	d105      	bne.n	8002aa0 <_svfprintf_r+0x2e0>
 8002a94:	9905      	ldr	r1, [sp, #20]
 8002a96:	3101      	adds	r1, #1
 8002a98:	9105      	str	r1, [sp, #20]
 8002a9a:	f045 0520 	orr.w	r5, r5, #32
 8002a9e:	e762      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002aa0:	f045 0510 	orr.w	r5, r5, #16
 8002aa4:	e75f      	b.n	8002966 <_svfprintf_r+0x1a6>
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	9304      	str	r3, [sp, #16]
 8002aaa:	2600      	movs	r6, #0
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002ab2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002ab6:	f04f 0901 	mov.w	r9, #1
 8002aba:	4637      	mov	r7, r6
 8002abc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002ac0:	e11b      	b.n	8002cfa <_svfprintf_r+0x53a>
 8002ac2:	b10b      	cbz	r3, 8002ac8 <_svfprintf_r+0x308>
 8002ac4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002ac8:	f045 0510 	orr.w	r5, r5, #16
 8002acc:	e752      	b.n	8002974 <_svfprintf_r+0x1b4>
 8002ace:	f015 0f10 	tst.w	r5, #16
 8002ad2:	f107 0304 	add.w	r3, r7, #4
 8002ad6:	d003      	beq.n	8002ae0 <_svfprintf_r+0x320>
 8002ad8:	683e      	ldr	r6, [r7, #0]
 8002ada:	9304      	str	r3, [sp, #16]
 8002adc:	17f7      	asrs	r7, r6, #31
 8002ade:	e754      	b.n	800298a <_svfprintf_r+0x1ca>
 8002ae0:	683e      	ldr	r6, [r7, #0]
 8002ae2:	9304      	str	r3, [sp, #16]
 8002ae4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ae8:	bf18      	it	ne
 8002aea:	b236      	sxthne	r6, r6
 8002aec:	e7f6      	b.n	8002adc <_svfprintf_r+0x31c>
 8002aee:	b10b      	cbz	r3, 8002af4 <_svfprintf_r+0x334>
 8002af0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002af4:	3707      	adds	r7, #7
 8002af6:	f027 0707 	bic.w	r7, r7, #7
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	9304      	str	r3, [sp, #16]
 8002b00:	ed97 7b00 	vldr	d7, [r7]
 8002b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002b08:	9b06      	ldr	r3, [sp, #24]
 8002b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8002b0c:	9b07      	ldr	r3, [sp, #28]
 8002b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <_svfprintf_r+0x484>)
 8002b1a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002b1e:	f7fe f821 	bl	8000b64 <__aeabi_dcmpun>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	f040 85d5 	bne.w	80036d2 <_svfprintf_r+0xf12>
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <_svfprintf_r+0x484>)
 8002b2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002b32:	f7fd fff9 	bl	8000b28 <__aeabi_dcmple>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	f040 85cb 	bne.w	80036d2 <_svfprintf_r+0xf12>
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b44:	f7fd ffe6 	bl	8000b14 <__aeabi_dcmplt>
 8002b48:	b110      	cbz	r0, 8002b50 <_svfprintf_r+0x390>
 8002b4a:	232d      	movs	r3, #45	; 0x2d
 8002b4c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <_svfprintf_r+0x488>)
 8002b52:	4a3e      	ldr	r2, [pc, #248]	; (8002c4c <_svfprintf_r+0x48c>)
 8002b54:	9902      	ldr	r1, [sp, #8]
 8002b56:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002b5a:	2947      	cmp	r1, #71	; 0x47
 8002b5c:	bfcc      	ite	gt
 8002b5e:	4690      	movgt	r8, r2
 8002b60:	4698      	movle	r8, r3
 8002b62:	f04f 0903 	mov.w	r9, #3
 8002b66:	2600      	movs	r6, #0
 8002b68:	4637      	mov	r7, r6
 8002b6a:	e0c6      	b.n	8002cfa <_svfprintf_r+0x53a>
 8002b6c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002b70:	d022      	beq.n	8002bb8 <_svfprintf_r+0x3f8>
 8002b72:	9b02      	ldr	r3, [sp, #8]
 8002b74:	f023 0320 	bic.w	r3, r3, #32
 8002b78:	2b47      	cmp	r3, #71	; 0x47
 8002b7a:	d104      	bne.n	8002b86 <_svfprintf_r+0x3c6>
 8002b7c:	f1b9 0f00 	cmp.w	r9, #0
 8002b80:	bf08      	it	eq
 8002b82:	f04f 0901 	moveq.w	r9, #1
 8002b86:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002b8a:	930c      	str	r3, [sp, #48]	; 0x30
 8002b8c:	9b07      	ldr	r3, [sp, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da15      	bge.n	8002bbe <_svfprintf_r+0x3fe>
 8002b92:	9b06      	ldr	r3, [sp, #24]
 8002b94:	930e      	str	r3, [sp, #56]	; 0x38
 8002b96:	9b07      	ldr	r3, [sp, #28]
 8002b98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b9e:	232d      	movs	r3, #45	; 0x2d
 8002ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ba2:	9b02      	ldr	r3, [sp, #8]
 8002ba4:	f023 0720 	bic.w	r7, r3, #32
 8002ba8:	2f46      	cmp	r7, #70	; 0x46
 8002baa:	d00e      	beq.n	8002bca <_svfprintf_r+0x40a>
 8002bac:	2f45      	cmp	r7, #69	; 0x45
 8002bae:	d146      	bne.n	8002c3e <_svfprintf_r+0x47e>
 8002bb0:	f109 0601 	add.w	r6, r9, #1
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	e00a      	b.n	8002bce <_svfprintf_r+0x40e>
 8002bb8:	f04f 0906 	mov.w	r9, #6
 8002bbc:	e7e3      	b.n	8002b86 <_svfprintf_r+0x3c6>
 8002bbe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002bc8:	e7ea      	b.n	8002ba0 <_svfprintf_r+0x3e0>
 8002bca:	464e      	mov	r6, r9
 8002bcc:	2103      	movs	r1, #3
 8002bce:	ab1d      	add	r3, sp, #116	; 0x74
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	ab1a      	add	r3, sp, #104	; 0x68
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4632      	mov	r2, r6
 8002bd8:	ab19      	add	r3, sp, #100	; 0x64
 8002bda:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002bde:	4658      	mov	r0, fp
 8002be0:	f000 fe4e 	bl	8003880 <_dtoa_r>
 8002be4:	2f47      	cmp	r7, #71	; 0x47
 8002be6:	4680      	mov	r8, r0
 8002be8:	d102      	bne.n	8002bf0 <_svfprintf_r+0x430>
 8002bea:	07e8      	lsls	r0, r5, #31
 8002bec:	f140 857e 	bpl.w	80036ec <_svfprintf_r+0xf2c>
 8002bf0:	eb08 0306 	add.w	r3, r8, r6
 8002bf4:	2f46      	cmp	r7, #70	; 0x46
 8002bf6:	9303      	str	r3, [sp, #12]
 8002bf8:	d111      	bne.n	8002c1e <_svfprintf_r+0x45e>
 8002bfa:	f898 3000 	ldrb.w	r3, [r8]
 8002bfe:	2b30      	cmp	r3, #48	; 0x30
 8002c00:	d109      	bne.n	8002c16 <_svfprintf_r+0x456>
 8002c02:	2200      	movs	r2, #0
 8002c04:	2300      	movs	r3, #0
 8002c06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c0a:	f7fd ff79 	bl	8000b00 <__aeabi_dcmpeq>
 8002c0e:	b910      	cbnz	r0, 8002c16 <_svfprintf_r+0x456>
 8002c10:	f1c6 0601 	rsb	r6, r6, #1
 8002c14:	9619      	str	r6, [sp, #100]	; 0x64
 8002c16:	9a03      	ldr	r2, [sp, #12]
 8002c18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c1a:	441a      	add	r2, r3
 8002c1c:	9203      	str	r2, [sp, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2300      	movs	r3, #0
 8002c22:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c26:	f7fd ff6b 	bl	8000b00 <__aeabi_dcmpeq>
 8002c2a:	b988      	cbnz	r0, 8002c50 <_svfprintf_r+0x490>
 8002c2c:	2230      	movs	r2, #48	; 0x30
 8002c2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002c30:	9903      	ldr	r1, [sp, #12]
 8002c32:	4299      	cmp	r1, r3
 8002c34:	d90e      	bls.n	8002c54 <_svfprintf_r+0x494>
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	911d      	str	r1, [sp, #116]	; 0x74
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e7f7      	b.n	8002c2e <_svfprintf_r+0x46e>
 8002c3e:	464e      	mov	r6, r9
 8002c40:	e7b8      	b.n	8002bb4 <_svfprintf_r+0x3f4>
 8002c42:	bf00      	nop
 8002c44:	7fefffff 	.word	0x7fefffff
 8002c48:	080055d1 	.word	0x080055d1
 8002c4c:	080055d5 	.word	0x080055d5
 8002c50:	9b03      	ldr	r3, [sp, #12]
 8002c52:	931d      	str	r3, [sp, #116]	; 0x74
 8002c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002c56:	2f47      	cmp	r7, #71	; 0x47
 8002c58:	eba3 0308 	sub.w	r3, r3, r8
 8002c5c:	9303      	str	r3, [sp, #12]
 8002c5e:	f040 80fa 	bne.w	8002e56 <_svfprintf_r+0x696>
 8002c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c64:	1cd9      	adds	r1, r3, #3
 8002c66:	db02      	blt.n	8002c6e <_svfprintf_r+0x4ae>
 8002c68:	4599      	cmp	r9, r3
 8002c6a:	f280 8120 	bge.w	8002eae <_svfprintf_r+0x6ee>
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	3b02      	subs	r3, #2
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002c76:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002c7a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002c7e:	1e53      	subs	r3, r2, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	9319      	str	r3, [sp, #100]	; 0x64
 8002c84:	bfb6      	itet	lt
 8002c86:	f1c2 0301 	rsblt	r3, r2, #1
 8002c8a:	222b      	movge	r2, #43	; 0x2b
 8002c8c:	222d      	movlt	r2, #45	; 0x2d
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002c94:	f340 80fb 	ble.w	8002e8e <_svfprintf_r+0x6ce>
 8002c98:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002c9c:	260a      	movs	r6, #10
 8002c9e:	fb93 f0f6 	sdiv	r0, r3, r6
 8002ca2:	fb06 3310 	mls	r3, r6, r0, r3
 8002ca6:	3330      	adds	r3, #48	; 0x30
 8002ca8:	2809      	cmp	r0, #9
 8002caa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002cae:	f102 31ff 	add.w	r1, r2, #4294967295
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f300 80e4 	bgt.w	8002e80 <_svfprintf_r+0x6c0>
 8002cb8:	3330      	adds	r3, #48	; 0x30
 8002cba:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002cbe:	3a02      	subs	r2, #2
 8002cc0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002cc4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002cc8:	4282      	cmp	r2, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f0c0 80da 	bcc.w	8002e84 <_svfprintf_r+0x6c4>
 8002cd0:	9a03      	ldr	r2, [sp, #12]
 8002cd2:	ab1b      	add	r3, sp, #108	; 0x6c
 8002cd4:	1acb      	subs	r3, r1, r3
 8002cd6:	2a01      	cmp	r2, #1
 8002cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8002cda:	eb03 0902 	add.w	r9, r3, r2
 8002cde:	dc02      	bgt.n	8002ce6 <_svfprintf_r+0x526>
 8002ce0:	f015 0701 	ands.w	r7, r5, #1
 8002ce4:	d002      	beq.n	8002cec <_svfprintf_r+0x52c>
 8002ce6:	9b08      	ldr	r3, [sp, #32]
 8002ce8:	2700      	movs	r7, #0
 8002cea:	4499      	add	r9, r3
 8002cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cee:	b113      	cbz	r3, 8002cf6 <_svfprintf_r+0x536>
 8002cf0:	232d      	movs	r3, #45	; 0x2d
 8002cf2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	454e      	cmp	r6, r9
 8002cfc:	4633      	mov	r3, r6
 8002cfe:	bfb8      	it	lt
 8002d00:	464b      	movlt	r3, r9
 8002d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d04:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002d08:	b113      	cbz	r3, 8002d10 <_svfprintf_r+0x550>
 8002d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d10:	f015 0302 	ands.w	r3, r5, #2
 8002d14:	9314      	str	r3, [sp, #80]	; 0x50
 8002d16:	bf1e      	ittt	ne
 8002d18:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002d1a:	3302      	addne	r3, #2
 8002d1c:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002d1e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002d22:	9315      	str	r3, [sp, #84]	; 0x54
 8002d24:	d118      	bne.n	8002d58 <_svfprintf_r+0x598>
 8002d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	930c      	str	r3, [sp, #48]	; 0x30
 8002d30:	dd12      	ble.n	8002d58 <_svfprintf_r+0x598>
 8002d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	4ba9      	ldr	r3, [pc, #676]	; (8002fdc <_svfprintf_r+0x81c>)
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	f300 81d5 	bgt.w	80030e8 <_svfprintf_r+0x928>
 8002d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d40:	6063      	str	r3, [r4, #4]
 8002d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d46:	4413      	add	r3, r2
 8002d48:	9321      	str	r3, [sp, #132]	; 0x84
 8002d4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	9320      	str	r3, [sp, #128]	; 0x80
 8002d52:	f300 81e2 	bgt.w	800311a <_svfprintf_r+0x95a>
 8002d56:	3408      	adds	r4, #8
 8002d58:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002d5c:	b173      	cbz	r3, 8002d7c <_svfprintf_r+0x5bc>
 8002d5e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	6063      	str	r3, [r4, #4]
 8002d68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	9321      	str	r3, [sp, #132]	; 0x84
 8002d6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d70:	3301      	adds	r3, #1
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	9320      	str	r3, [sp, #128]	; 0x80
 8002d76:	f300 81da 	bgt.w	800312e <_svfprintf_r+0x96e>
 8002d7a:	3408      	adds	r4, #8
 8002d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d7e:	b16b      	cbz	r3, 8002d9c <_svfprintf_r+0x5dc>
 8002d80:	ab18      	add	r3, sp, #96	; 0x60
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	2302      	movs	r3, #2
 8002d86:	6063      	str	r3, [r4, #4]
 8002d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	9321      	str	r3, [sp, #132]	; 0x84
 8002d8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d90:	3301      	adds	r3, #1
 8002d92:	2b07      	cmp	r3, #7
 8002d94:	9320      	str	r3, [sp, #128]	; 0x80
 8002d96:	f300 81d4 	bgt.w	8003142 <_svfprintf_r+0x982>
 8002d9a:	3408      	adds	r4, #8
 8002d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d114      	bne.n	8002dcc <_svfprintf_r+0x60c>
 8002da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	dd0f      	ble.n	8002dcc <_svfprintf_r+0x60c>
 8002dac:	4a8c      	ldr	r2, [pc, #560]	; (8002fe0 <_svfprintf_r+0x820>)
 8002dae:	6022      	str	r2, [r4, #0]
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	f300 81d0 	bgt.w	8003156 <_svfprintf_r+0x996>
 8002db6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002db8:	6063      	str	r3, [r4, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	9321      	str	r3, [sp, #132]	; 0x84
 8002dbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	2b07      	cmp	r3, #7
 8002dc4:	9320      	str	r3, [sp, #128]	; 0x80
 8002dc6:	f300 81df 	bgt.w	8003188 <_svfprintf_r+0x9c8>
 8002dca:	3408      	adds	r4, #8
 8002dcc:	eba6 0609 	sub.w	r6, r6, r9
 8002dd0:	2e00      	cmp	r6, #0
 8002dd2:	dd0f      	ble.n	8002df4 <_svfprintf_r+0x634>
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <_svfprintf_r+0x820>)
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	2e10      	cmp	r6, #16
 8002dda:	f300 81df 	bgt.w	800319c <_svfprintf_r+0x9dc>
 8002dde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002de0:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002de2:	6066      	str	r6, [r4, #4]
 8002de4:	3301      	adds	r3, #1
 8002de6:	4406      	add	r6, r0
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	9621      	str	r6, [sp, #132]	; 0x84
 8002dec:	9320      	str	r3, [sp, #128]	; 0x80
 8002dee:	f300 81ec 	bgt.w	80031ca <_svfprintf_r+0xa0a>
 8002df2:	3408      	adds	r4, #8
 8002df4:	05eb      	lsls	r3, r5, #23
 8002df6:	f100 81f2 	bmi.w	80031de <_svfprintf_r+0xa1e>
 8002dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002dfc:	e884 0300 	stmia.w	r4, {r8, r9}
 8002e00:	444b      	add	r3, r9
 8002e02:	9321      	str	r3, [sp, #132]	; 0x84
 8002e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e06:	3301      	adds	r3, #1
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	9320      	str	r3, [sp, #128]	; 0x80
 8002e0c:	f340 8419 	ble.w	8003642 <_svfprintf_r+0xe82>
 8002e10:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e12:	4651      	mov	r1, sl
 8002e14:	4658      	mov	r0, fp
 8002e16:	f002 f81d 	bl	8004e54 <__ssprint_r>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f040 8431 	bne.w	8003682 <_svfprintf_r+0xec2>
 8002e20:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e22:	076b      	lsls	r3, r5, #29
 8002e24:	f100 8410 	bmi.w	8003648 <_svfprintf_r+0xe88>
 8002e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e2e:	428a      	cmp	r2, r1
 8002e30:	bfac      	ite	ge
 8002e32:	189b      	addge	r3, r3, r2
 8002e34:	185b      	addlt	r3, r3, r1
 8002e36:	9309      	str	r3, [sp, #36]	; 0x24
 8002e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e3a:	b13b      	cbz	r3, 8002e4c <_svfprintf_r+0x68c>
 8002e3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e3e:	4651      	mov	r1, sl
 8002e40:	4658      	mov	r0, fp
 8002e42:	f002 f807 	bl	8004e54 <__ssprint_r>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	f040 841b 	bne.w	8003682 <_svfprintf_r+0xec2>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9320      	str	r3, [sp, #128]	; 0x80
 8002e50:	9f04      	ldr	r7, [sp, #16]
 8002e52:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e54:	e4ee      	b.n	8002834 <_svfprintf_r+0x74>
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	2b65      	cmp	r3, #101	; 0x65
 8002e5a:	f77f af0b 	ble.w	8002c74 <_svfprintf_r+0x4b4>
 8002e5e:	9b02      	ldr	r3, [sp, #8]
 8002e60:	2b66      	cmp	r3, #102	; 0x66
 8002e62:	d124      	bne.n	8002eae <_svfprintf_r+0x6ee>
 8002e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dd19      	ble.n	8002e9e <_svfprintf_r+0x6de>
 8002e6a:	f1b9 0f00 	cmp.w	r9, #0
 8002e6e:	d101      	bne.n	8002e74 <_svfprintf_r+0x6b4>
 8002e70:	07ea      	lsls	r2, r5, #31
 8002e72:	d502      	bpl.n	8002e7a <_svfprintf_r+0x6ba>
 8002e74:	9a08      	ldr	r2, [sp, #32]
 8002e76:	4413      	add	r3, r2
 8002e78:	444b      	add	r3, r9
 8002e7a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	e735      	b.n	8002cec <_svfprintf_r+0x52c>
 8002e80:	460a      	mov	r2, r1
 8002e82:	e70c      	b.n	8002c9e <_svfprintf_r+0x4de>
 8002e84:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002e88:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8c:	e71c      	b.n	8002cc8 <_svfprintf_r+0x508>
 8002e8e:	2230      	movs	r2, #48	; 0x30
 8002e90:	4413      	add	r3, r2
 8002e92:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002e96:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8002e9a:	a91c      	add	r1, sp, #112	; 0x70
 8002e9c:	e718      	b.n	8002cd0 <_svfprintf_r+0x510>
 8002e9e:	f1b9 0f00 	cmp.w	r9, #0
 8002ea2:	d101      	bne.n	8002ea8 <_svfprintf_r+0x6e8>
 8002ea4:	07eb      	lsls	r3, r5, #31
 8002ea6:	d515      	bpl.n	8002ed4 <_svfprintf_r+0x714>
 8002ea8:	9b08      	ldr	r3, [sp, #32]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	e7e4      	b.n	8002e78 <_svfprintf_r+0x6b8>
 8002eae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002eb0:	9b03      	ldr	r3, [sp, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	db06      	blt.n	8002ec4 <_svfprintf_r+0x704>
 8002eb6:	07ef      	lsls	r7, r5, #31
 8002eb8:	d50e      	bpl.n	8002ed8 <_svfprintf_r+0x718>
 8002eba:	9b08      	ldr	r3, [sp, #32]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	2267      	movs	r2, #103	; 0x67
 8002ec0:	9202      	str	r2, [sp, #8]
 8002ec2:	e7da      	b.n	8002e7a <_svfprintf_r+0x6ba>
 8002ec4:	9b03      	ldr	r3, [sp, #12]
 8002ec6:	9908      	ldr	r1, [sp, #32]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	440b      	add	r3, r1
 8002ecc:	dcf7      	bgt.n	8002ebe <_svfprintf_r+0x6fe>
 8002ece:	f1c2 0201 	rsb	r2, r2, #1
 8002ed2:	e7f3      	b.n	8002ebc <_svfprintf_r+0x6fc>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e7d0      	b.n	8002e7a <_svfprintf_r+0x6ba>
 8002ed8:	4613      	mov	r3, r2
 8002eda:	e7f0      	b.n	8002ebe <_svfprintf_r+0x6fe>
 8002edc:	b10b      	cbz	r3, 8002ee2 <_svfprintf_r+0x722>
 8002ede:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002ee2:	f015 0f20 	tst.w	r5, #32
 8002ee6:	f107 0304 	add.w	r3, r7, #4
 8002eea:	d008      	beq.n	8002efe <_svfprintf_r+0x73e>
 8002eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	17ce      	asrs	r6, r1, #31
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	e9c2 0100 	strd	r0, r1, [r2]
 8002efa:	461f      	mov	r7, r3
 8002efc:	e49a      	b.n	8002834 <_svfprintf_r+0x74>
 8002efe:	06ee      	lsls	r6, r5, #27
 8002f00:	d503      	bpl.n	8002f0a <_svfprintf_r+0x74a>
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f06:	6011      	str	r1, [r2, #0]
 8002f08:	e7f7      	b.n	8002efa <_svfprintf_r+0x73a>
 8002f0a:	0668      	lsls	r0, r5, #25
 8002f0c:	d5f9      	bpl.n	8002f02 <_svfprintf_r+0x742>
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002f14:	8011      	strh	r1, [r2, #0]
 8002f16:	e7f0      	b.n	8002efa <_svfprintf_r+0x73a>
 8002f18:	f045 0510 	orr.w	r5, r5, #16
 8002f1c:	f015 0320 	ands.w	r3, r5, #32
 8002f20:	d022      	beq.n	8002f68 <_svfprintf_r+0x7a8>
 8002f22:	3707      	adds	r7, #7
 8002f24:	f027 0707 	bic.w	r7, r7, #7
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	2300      	movs	r3, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f3a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002f3e:	f000 83db 	beq.w	80036f8 <_svfprintf_r+0xf38>
 8002f42:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002f46:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f48:	ea56 0207 	orrs.w	r2, r6, r7
 8002f4c:	f040 83d9 	bne.w	8003702 <_svfprintf_r+0xf42>
 8002f50:	f1b9 0f00 	cmp.w	r9, #0
 8002f54:	f000 80aa 	beq.w	80030ac <_svfprintf_r+0x8ec>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d076      	beq.n	800304a <_svfprintf_r+0x88a>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	f000 8091 	beq.w	8003084 <_svfprintf_r+0x8c4>
 8002f62:	2600      	movs	r6, #0
 8002f64:	2700      	movs	r7, #0
 8002f66:	e3d2      	b.n	800370e <_svfprintf_r+0xf4e>
 8002f68:	1d3a      	adds	r2, r7, #4
 8002f6a:	f015 0110 	ands.w	r1, r5, #16
 8002f6e:	9204      	str	r2, [sp, #16]
 8002f70:	d002      	beq.n	8002f78 <_svfprintf_r+0x7b8>
 8002f72:	683e      	ldr	r6, [r7, #0]
 8002f74:	2700      	movs	r7, #0
 8002f76:	e7dd      	b.n	8002f34 <_svfprintf_r+0x774>
 8002f78:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002f7c:	d0f9      	beq.n	8002f72 <_svfprintf_r+0x7b2>
 8002f7e:	883e      	ldrh	r6, [r7, #0]
 8002f80:	2700      	movs	r7, #0
 8002f82:	e7d6      	b.n	8002f32 <_svfprintf_r+0x772>
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	2330      	movs	r3, #48	; 0x30
 8002f8a:	2278      	movs	r2, #120	; 0x78
 8002f8c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <_svfprintf_r+0x824>)
 8002f92:	683e      	ldr	r6, [r7, #0]
 8002f94:	9311      	str	r3, [sp, #68]	; 0x44
 8002f96:	2700      	movs	r7, #0
 8002f98:	f045 0502 	orr.w	r5, r5, #2
 8002f9c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	e7c6      	b.n	8002f34 <_svfprintf_r+0x774>
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2600      	movs	r6, #0
 8002faa:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002fae:	9304      	str	r3, [sp, #16]
 8002fb0:	f8d7 8000 	ldr.w	r8, [r7]
 8002fb4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002fb8:	d00a      	beq.n	8002fd0 <_svfprintf_r+0x810>
 8002fba:	464a      	mov	r2, r9
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	f7fd f926 	bl	8000210 <memchr>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	f000 808d 	beq.w	80030e4 <_svfprintf_r+0x924>
 8002fca:	eba0 0908 	sub.w	r9, r0, r8
 8002fce:	e5cb      	b.n	8002b68 <_svfprintf_r+0x3a8>
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	f7fd f96d 	bl	80002b0 <strlen>
 8002fd6:	4681      	mov	r9, r0
 8002fd8:	e5c6      	b.n	8002b68 <_svfprintf_r+0x3a8>
 8002fda:	bf00      	nop
 8002fdc:	08005605 	.word	0x08005605
 8002fe0:	08005615 	.word	0x08005615
 8002fe4:	080055f2 	.word	0x080055f2
 8002fe8:	f045 0510 	orr.w	r5, r5, #16
 8002fec:	06a9      	lsls	r1, r5, #26
 8002fee:	d509      	bpl.n	8003004 <_svfprintf_r+0x844>
 8002ff0:	3707      	adds	r7, #7
 8002ff2:	f027 0707 	bic.w	r7, r7, #7
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002ffe:	9304      	str	r3, [sp, #16]
 8003000:	2301      	movs	r3, #1
 8003002:	e797      	b.n	8002f34 <_svfprintf_r+0x774>
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	f015 0f10 	tst.w	r5, #16
 800300a:	9304      	str	r3, [sp, #16]
 800300c:	d001      	beq.n	8003012 <_svfprintf_r+0x852>
 800300e:	683e      	ldr	r6, [r7, #0]
 8003010:	e002      	b.n	8003018 <_svfprintf_r+0x858>
 8003012:	066a      	lsls	r2, r5, #25
 8003014:	d5fb      	bpl.n	800300e <_svfprintf_r+0x84e>
 8003016:	883e      	ldrh	r6, [r7, #0]
 8003018:	2700      	movs	r7, #0
 800301a:	e7f1      	b.n	8003000 <_svfprintf_r+0x840>
 800301c:	b10b      	cbz	r3, 8003022 <_svfprintf_r+0x862>
 800301e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003022:	4ba3      	ldr	r3, [pc, #652]	; (80032b0 <_svfprintf_r+0xaf0>)
 8003024:	e4c2      	b.n	80029ac <_svfprintf_r+0x1ec>
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	f015 0f10 	tst.w	r5, #16
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	d001      	beq.n	8003034 <_svfprintf_r+0x874>
 8003030:	683e      	ldr	r6, [r7, #0]
 8003032:	e002      	b.n	800303a <_svfprintf_r+0x87a>
 8003034:	066e      	lsls	r6, r5, #25
 8003036:	d5fb      	bpl.n	8003030 <_svfprintf_r+0x870>
 8003038:	883e      	ldrh	r6, [r7, #0]
 800303a:	2700      	movs	r7, #0
 800303c:	e4c2      	b.n	80029c4 <_svfprintf_r+0x204>
 800303e:	4643      	mov	r3, r8
 8003040:	e366      	b.n	8003710 <_svfprintf_r+0xf50>
 8003042:	2f00      	cmp	r7, #0
 8003044:	bf08      	it	eq
 8003046:	2e0a      	cmpeq	r6, #10
 8003048:	d205      	bcs.n	8003056 <_svfprintf_r+0x896>
 800304a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800304e:	3630      	adds	r6, #48	; 0x30
 8003050:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003054:	e377      	b.n	8003746 <_svfprintf_r+0xf86>
 8003056:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800305a:	4630      	mov	r0, r6
 800305c:	4639      	mov	r1, r7
 800305e:	220a      	movs	r2, #10
 8003060:	2300      	movs	r3, #0
 8003062:	f7fd fdbd 	bl	8000be0 <__aeabi_uldivmod>
 8003066:	3230      	adds	r2, #48	; 0x30
 8003068:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800306c:	2300      	movs	r3, #0
 800306e:	4630      	mov	r0, r6
 8003070:	4639      	mov	r1, r7
 8003072:	220a      	movs	r2, #10
 8003074:	f7fd fdb4 	bl	8000be0 <__aeabi_uldivmod>
 8003078:	4606      	mov	r6, r0
 800307a:	460f      	mov	r7, r1
 800307c:	ea56 0307 	orrs.w	r3, r6, r7
 8003080:	d1eb      	bne.n	800305a <_svfprintf_r+0x89a>
 8003082:	e360      	b.n	8003746 <_svfprintf_r+0xf86>
 8003084:	2600      	movs	r6, #0
 8003086:	2700      	movs	r7, #0
 8003088:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800308c:	f006 030f 	and.w	r3, r6, #15
 8003090:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003098:	0933      	lsrs	r3, r6, #4
 800309a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800309e:	093a      	lsrs	r2, r7, #4
 80030a0:	461e      	mov	r6, r3
 80030a2:	4617      	mov	r7, r2
 80030a4:	ea56 0307 	orrs.w	r3, r6, r7
 80030a8:	d1f0      	bne.n	800308c <_svfprintf_r+0x8cc>
 80030aa:	e34c      	b.n	8003746 <_svfprintf_r+0xf86>
 80030ac:	b93b      	cbnz	r3, 80030be <_svfprintf_r+0x8fe>
 80030ae:	07ea      	lsls	r2, r5, #31
 80030b0:	d505      	bpl.n	80030be <_svfprintf_r+0x8fe>
 80030b2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80030b6:	2330      	movs	r3, #48	; 0x30
 80030b8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80030bc:	e343      	b.n	8003746 <_svfprintf_r+0xf86>
 80030be:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80030c2:	e340      	b.n	8003746 <_svfprintf_r+0xf86>
 80030c4:	b10b      	cbz	r3, 80030ca <_svfprintf_r+0x90a>
 80030c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80030ca:	9b02      	ldr	r3, [sp, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 82f7 	beq.w	80036c0 <_svfprintf_r+0xf00>
 80030d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80030d6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80030da:	2600      	movs	r6, #0
 80030dc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80030e0:	9704      	str	r7, [sp, #16]
 80030e2:	e4e8      	b.n	8002ab6 <_svfprintf_r+0x2f6>
 80030e4:	4606      	mov	r6, r0
 80030e6:	e53f      	b.n	8002b68 <_svfprintf_r+0x3a8>
 80030e8:	2310      	movs	r3, #16
 80030ea:	6063      	str	r3, [r4, #4]
 80030ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ee:	3310      	adds	r3, #16
 80030f0:	9321      	str	r3, [sp, #132]	; 0x84
 80030f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030f4:	3301      	adds	r3, #1
 80030f6:	2b07      	cmp	r3, #7
 80030f8:	9320      	str	r3, [sp, #128]	; 0x80
 80030fa:	dc04      	bgt.n	8003106 <_svfprintf_r+0x946>
 80030fc:	3408      	adds	r4, #8
 80030fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003100:	3b10      	subs	r3, #16
 8003102:	930c      	str	r3, [sp, #48]	; 0x30
 8003104:	e615      	b.n	8002d32 <_svfprintf_r+0x572>
 8003106:	aa1f      	add	r2, sp, #124	; 0x7c
 8003108:	4651      	mov	r1, sl
 800310a:	4658      	mov	r0, fp
 800310c:	f001 fea2 	bl	8004e54 <__ssprint_r>
 8003110:	2800      	cmp	r0, #0
 8003112:	f040 82b6 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003116:	ac2c      	add	r4, sp, #176	; 0xb0
 8003118:	e7f1      	b.n	80030fe <_svfprintf_r+0x93e>
 800311a:	aa1f      	add	r2, sp, #124	; 0x7c
 800311c:	4651      	mov	r1, sl
 800311e:	4658      	mov	r0, fp
 8003120:	f001 fe98 	bl	8004e54 <__ssprint_r>
 8003124:	2800      	cmp	r0, #0
 8003126:	f040 82ac 	bne.w	8003682 <_svfprintf_r+0xec2>
 800312a:	ac2c      	add	r4, sp, #176	; 0xb0
 800312c:	e614      	b.n	8002d58 <_svfprintf_r+0x598>
 800312e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003130:	4651      	mov	r1, sl
 8003132:	4658      	mov	r0, fp
 8003134:	f001 fe8e 	bl	8004e54 <__ssprint_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	f040 82a2 	bne.w	8003682 <_svfprintf_r+0xec2>
 800313e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003140:	e61c      	b.n	8002d7c <_svfprintf_r+0x5bc>
 8003142:	aa1f      	add	r2, sp, #124	; 0x7c
 8003144:	4651      	mov	r1, sl
 8003146:	4658      	mov	r0, fp
 8003148:	f001 fe84 	bl	8004e54 <__ssprint_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	f040 8298 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003152:	ac2c      	add	r4, sp, #176	; 0xb0
 8003154:	e622      	b.n	8002d9c <_svfprintf_r+0x5dc>
 8003156:	2210      	movs	r2, #16
 8003158:	6062      	str	r2, [r4, #4]
 800315a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800315c:	3210      	adds	r2, #16
 800315e:	9221      	str	r2, [sp, #132]	; 0x84
 8003160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003162:	3201      	adds	r2, #1
 8003164:	2a07      	cmp	r2, #7
 8003166:	9220      	str	r2, [sp, #128]	; 0x80
 8003168:	dc02      	bgt.n	8003170 <_svfprintf_r+0x9b0>
 800316a:	3408      	adds	r4, #8
 800316c:	3b10      	subs	r3, #16
 800316e:	e61d      	b.n	8002dac <_svfprintf_r+0x5ec>
 8003170:	aa1f      	add	r2, sp, #124	; 0x7c
 8003172:	4651      	mov	r1, sl
 8003174:	4658      	mov	r0, fp
 8003176:	930c      	str	r3, [sp, #48]	; 0x30
 8003178:	f001 fe6c 	bl	8004e54 <__ssprint_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	f040 8280 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003182:	ac2c      	add	r4, sp, #176	; 0xb0
 8003184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003186:	e7f1      	b.n	800316c <_svfprintf_r+0x9ac>
 8003188:	aa1f      	add	r2, sp, #124	; 0x7c
 800318a:	4651      	mov	r1, sl
 800318c:	4658      	mov	r0, fp
 800318e:	f001 fe61 	bl	8004e54 <__ssprint_r>
 8003192:	2800      	cmp	r0, #0
 8003194:	f040 8275 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003198:	ac2c      	add	r4, sp, #176	; 0xb0
 800319a:	e617      	b.n	8002dcc <_svfprintf_r+0x60c>
 800319c:	2310      	movs	r3, #16
 800319e:	6063      	str	r3, [r4, #4]
 80031a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031a2:	3310      	adds	r3, #16
 80031a4:	9321      	str	r3, [sp, #132]	; 0x84
 80031a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031a8:	3301      	adds	r3, #1
 80031aa:	2b07      	cmp	r3, #7
 80031ac:	9320      	str	r3, [sp, #128]	; 0x80
 80031ae:	dc02      	bgt.n	80031b6 <_svfprintf_r+0x9f6>
 80031b0:	3408      	adds	r4, #8
 80031b2:	3e10      	subs	r6, #16
 80031b4:	e60e      	b.n	8002dd4 <_svfprintf_r+0x614>
 80031b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80031b8:	4651      	mov	r1, sl
 80031ba:	4658      	mov	r0, fp
 80031bc:	f001 fe4a 	bl	8004e54 <__ssprint_r>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	f040 825e 	bne.w	8003682 <_svfprintf_r+0xec2>
 80031c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80031c8:	e7f3      	b.n	80031b2 <_svfprintf_r+0x9f2>
 80031ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80031cc:	4651      	mov	r1, sl
 80031ce:	4658      	mov	r0, fp
 80031d0:	f001 fe40 	bl	8004e54 <__ssprint_r>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	f040 8254 	bne.w	8003682 <_svfprintf_r+0xec2>
 80031da:	ac2c      	add	r4, sp, #176	; 0xb0
 80031dc:	e60a      	b.n	8002df4 <_svfprintf_r+0x634>
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	2b65      	cmp	r3, #101	; 0x65
 80031e2:	f340 81a9 	ble.w	8003538 <_svfprintf_r+0xd78>
 80031e6:	2200      	movs	r2, #0
 80031e8:	2300      	movs	r3, #0
 80031ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ee:	f7fd fc87 	bl	8000b00 <__aeabi_dcmpeq>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d062      	beq.n	80032bc <_svfprintf_r+0xafc>
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <_svfprintf_r+0xaf4>)
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	2301      	movs	r3, #1
 80031fc:	6063      	str	r3, [r4, #4]
 80031fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003200:	3301      	adds	r3, #1
 8003202:	9321      	str	r3, [sp, #132]	; 0x84
 8003204:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003206:	3301      	adds	r3, #1
 8003208:	2b07      	cmp	r3, #7
 800320a:	9320      	str	r3, [sp, #128]	; 0x80
 800320c:	dc25      	bgt.n	800325a <_svfprintf_r+0xa9a>
 800320e:	3408      	adds	r4, #8
 8003210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003212:	9a03      	ldr	r2, [sp, #12]
 8003214:	4293      	cmp	r3, r2
 8003216:	db02      	blt.n	800321e <_svfprintf_r+0xa5e>
 8003218:	07ee      	lsls	r6, r5, #31
 800321a:	f57f ae02 	bpl.w	8002e22 <_svfprintf_r+0x662>
 800321e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	9b08      	ldr	r3, [sp, #32]
 8003224:	6063      	str	r3, [r4, #4]
 8003226:	9a08      	ldr	r2, [sp, #32]
 8003228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800322a:	4413      	add	r3, r2
 800322c:	9321      	str	r3, [sp, #132]	; 0x84
 800322e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003230:	3301      	adds	r3, #1
 8003232:	2b07      	cmp	r3, #7
 8003234:	9320      	str	r3, [sp, #128]	; 0x80
 8003236:	dc1a      	bgt.n	800326e <_svfprintf_r+0xaae>
 8003238:	3408      	adds	r4, #8
 800323a:	9b03      	ldr	r3, [sp, #12]
 800323c:	1e5e      	subs	r6, r3, #1
 800323e:	2e00      	cmp	r6, #0
 8003240:	f77f adef 	ble.w	8002e22 <_svfprintf_r+0x662>
 8003244:	4f1c      	ldr	r7, [pc, #112]	; (80032b8 <_svfprintf_r+0xaf8>)
 8003246:	f04f 0810 	mov.w	r8, #16
 800324a:	2e10      	cmp	r6, #16
 800324c:	6027      	str	r7, [r4, #0]
 800324e:	dc18      	bgt.n	8003282 <_svfprintf_r+0xac2>
 8003250:	6066      	str	r6, [r4, #4]
 8003252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003254:	441e      	add	r6, r3
 8003256:	9621      	str	r6, [sp, #132]	; 0x84
 8003258:	e5d4      	b.n	8002e04 <_svfprintf_r+0x644>
 800325a:	aa1f      	add	r2, sp, #124	; 0x7c
 800325c:	4651      	mov	r1, sl
 800325e:	4658      	mov	r0, fp
 8003260:	f001 fdf8 	bl	8004e54 <__ssprint_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	f040 820c 	bne.w	8003682 <_svfprintf_r+0xec2>
 800326a:	ac2c      	add	r4, sp, #176	; 0xb0
 800326c:	e7d0      	b.n	8003210 <_svfprintf_r+0xa50>
 800326e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003270:	4651      	mov	r1, sl
 8003272:	4658      	mov	r0, fp
 8003274:	f001 fdee 	bl	8004e54 <__ssprint_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	f040 8202 	bne.w	8003682 <_svfprintf_r+0xec2>
 800327e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003280:	e7db      	b.n	800323a <_svfprintf_r+0xa7a>
 8003282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003284:	f8c4 8004 	str.w	r8, [r4, #4]
 8003288:	3310      	adds	r3, #16
 800328a:	9321      	str	r3, [sp, #132]	; 0x84
 800328c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800328e:	3301      	adds	r3, #1
 8003290:	2b07      	cmp	r3, #7
 8003292:	9320      	str	r3, [sp, #128]	; 0x80
 8003294:	dc02      	bgt.n	800329c <_svfprintf_r+0xadc>
 8003296:	3408      	adds	r4, #8
 8003298:	3e10      	subs	r6, #16
 800329a:	e7d6      	b.n	800324a <_svfprintf_r+0xa8a>
 800329c:	aa1f      	add	r2, sp, #124	; 0x7c
 800329e:	4651      	mov	r1, sl
 80032a0:	4658      	mov	r0, fp
 80032a2:	f001 fdd7 	bl	8004e54 <__ssprint_r>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	f040 81eb 	bne.w	8003682 <_svfprintf_r+0xec2>
 80032ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80032ae:	e7f3      	b.n	8003298 <_svfprintf_r+0xad8>
 80032b0:	080055f2 	.word	0x080055f2
 80032b4:	08005603 	.word	0x08005603
 80032b8:	08005615 	.word	0x08005615
 80032bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032be:	2b00      	cmp	r3, #0
 80032c0:	dc7a      	bgt.n	80033b8 <_svfprintf_r+0xbf8>
 80032c2:	4b9b      	ldr	r3, [pc, #620]	; (8003530 <_svfprintf_r+0xd70>)
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	2301      	movs	r3, #1
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032cc:	3301      	adds	r3, #1
 80032ce:	9321      	str	r3, [sp, #132]	; 0x84
 80032d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032d2:	3301      	adds	r3, #1
 80032d4:	2b07      	cmp	r3, #7
 80032d6:	9320      	str	r3, [sp, #128]	; 0x80
 80032d8:	dc44      	bgt.n	8003364 <_svfprintf_r+0xba4>
 80032da:	3408      	adds	r4, #8
 80032dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032de:	b923      	cbnz	r3, 80032ea <_svfprintf_r+0xb2a>
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	b913      	cbnz	r3, 80032ea <_svfprintf_r+0xb2a>
 80032e4:	07e8      	lsls	r0, r5, #31
 80032e6:	f57f ad9c 	bpl.w	8002e22 <_svfprintf_r+0x662>
 80032ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	9b08      	ldr	r3, [sp, #32]
 80032f0:	6063      	str	r3, [r4, #4]
 80032f2:	9a08      	ldr	r2, [sp, #32]
 80032f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032f6:	4413      	add	r3, r2
 80032f8:	9321      	str	r3, [sp, #132]	; 0x84
 80032fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032fc:	3301      	adds	r3, #1
 80032fe:	2b07      	cmp	r3, #7
 8003300:	9320      	str	r3, [sp, #128]	; 0x80
 8003302:	dc39      	bgt.n	8003378 <_svfprintf_r+0xbb8>
 8003304:	f104 0308 	add.w	r3, r4, #8
 8003308:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800330a:	2e00      	cmp	r6, #0
 800330c:	da19      	bge.n	8003342 <_svfprintf_r+0xb82>
 800330e:	4f89      	ldr	r7, [pc, #548]	; (8003534 <_svfprintf_r+0xd74>)
 8003310:	4276      	negs	r6, r6
 8003312:	2410      	movs	r4, #16
 8003314:	2e10      	cmp	r6, #16
 8003316:	601f      	str	r7, [r3, #0]
 8003318:	dc38      	bgt.n	800338c <_svfprintf_r+0xbcc>
 800331a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800331c:	605e      	str	r6, [r3, #4]
 800331e:	4416      	add	r6, r2
 8003320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003322:	9621      	str	r6, [sp, #132]	; 0x84
 8003324:	3201      	adds	r2, #1
 8003326:	2a07      	cmp	r2, #7
 8003328:	f103 0308 	add.w	r3, r3, #8
 800332c:	9220      	str	r2, [sp, #128]	; 0x80
 800332e:	dd08      	ble.n	8003342 <_svfprintf_r+0xb82>
 8003330:	aa1f      	add	r2, sp, #124	; 0x7c
 8003332:	4651      	mov	r1, sl
 8003334:	4658      	mov	r0, fp
 8003336:	f001 fd8d 	bl	8004e54 <__ssprint_r>
 800333a:	2800      	cmp	r0, #0
 800333c:	f040 81a1 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003340:	ab2c      	add	r3, sp, #176	; 0xb0
 8003342:	9a03      	ldr	r2, [sp, #12]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	9903      	ldr	r1, [sp, #12]
 8003348:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800334a:	f8c3 8000 	str.w	r8, [r3]
 800334e:	440a      	add	r2, r1
 8003350:	9221      	str	r2, [sp, #132]	; 0x84
 8003352:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003354:	3201      	adds	r2, #1
 8003356:	2a07      	cmp	r2, #7
 8003358:	9220      	str	r2, [sp, #128]	; 0x80
 800335a:	f73f ad59 	bgt.w	8002e10 <_svfprintf_r+0x650>
 800335e:	f103 0408 	add.w	r4, r3, #8
 8003362:	e55e      	b.n	8002e22 <_svfprintf_r+0x662>
 8003364:	aa1f      	add	r2, sp, #124	; 0x7c
 8003366:	4651      	mov	r1, sl
 8003368:	4658      	mov	r0, fp
 800336a:	f001 fd73 	bl	8004e54 <__ssprint_r>
 800336e:	2800      	cmp	r0, #0
 8003370:	f040 8187 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003374:	ac2c      	add	r4, sp, #176	; 0xb0
 8003376:	e7b1      	b.n	80032dc <_svfprintf_r+0xb1c>
 8003378:	aa1f      	add	r2, sp, #124	; 0x7c
 800337a:	4651      	mov	r1, sl
 800337c:	4658      	mov	r0, fp
 800337e:	f001 fd69 	bl	8004e54 <__ssprint_r>
 8003382:	2800      	cmp	r0, #0
 8003384:	f040 817d 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003388:	ab2c      	add	r3, sp, #176	; 0xb0
 800338a:	e7bd      	b.n	8003308 <_svfprintf_r+0xb48>
 800338c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800338e:	605c      	str	r4, [r3, #4]
 8003390:	3210      	adds	r2, #16
 8003392:	9221      	str	r2, [sp, #132]	; 0x84
 8003394:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003396:	3201      	adds	r2, #1
 8003398:	2a07      	cmp	r2, #7
 800339a:	9220      	str	r2, [sp, #128]	; 0x80
 800339c:	dc02      	bgt.n	80033a4 <_svfprintf_r+0xbe4>
 800339e:	3308      	adds	r3, #8
 80033a0:	3e10      	subs	r6, #16
 80033a2:	e7b7      	b.n	8003314 <_svfprintf_r+0xb54>
 80033a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80033a6:	4651      	mov	r1, sl
 80033a8:	4658      	mov	r0, fp
 80033aa:	f001 fd53 	bl	8004e54 <__ssprint_r>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f040 8167 	bne.w	8003682 <_svfprintf_r+0xec2>
 80033b4:	ab2c      	add	r3, sp, #176	; 0xb0
 80033b6:	e7f3      	b.n	80033a0 <_svfprintf_r+0xbe0>
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	42bb      	cmp	r3, r7
 80033bc:	bfa8      	it	ge
 80033be:	463b      	movge	r3, r7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	461e      	mov	r6, r3
 80033c4:	dd0b      	ble.n	80033de <_svfprintf_r+0xc1e>
 80033c6:	6063      	str	r3, [r4, #4]
 80033c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033ca:	f8c4 8000 	str.w	r8, [r4]
 80033ce:	4433      	add	r3, r6
 80033d0:	9321      	str	r3, [sp, #132]	; 0x84
 80033d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033d4:	3301      	adds	r3, #1
 80033d6:	2b07      	cmp	r3, #7
 80033d8:	9320      	str	r3, [sp, #128]	; 0x80
 80033da:	dc5f      	bgt.n	800349c <_svfprintf_r+0xcdc>
 80033dc:	3408      	adds	r4, #8
 80033de:	2e00      	cmp	r6, #0
 80033e0:	bfac      	ite	ge
 80033e2:	1bbe      	subge	r6, r7, r6
 80033e4:	463e      	movlt	r6, r7
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	dd0f      	ble.n	800340a <_svfprintf_r+0xc4a>
 80033ea:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003534 <_svfprintf_r+0xd74>
 80033ee:	f8c4 9000 	str.w	r9, [r4]
 80033f2:	2e10      	cmp	r6, #16
 80033f4:	dc5c      	bgt.n	80034b0 <_svfprintf_r+0xcf0>
 80033f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033f8:	6066      	str	r6, [r4, #4]
 80033fa:	441e      	add	r6, r3
 80033fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033fe:	9621      	str	r6, [sp, #132]	; 0x84
 8003400:	3301      	adds	r3, #1
 8003402:	2b07      	cmp	r3, #7
 8003404:	9320      	str	r3, [sp, #128]	; 0x80
 8003406:	dc6a      	bgt.n	80034de <_svfprintf_r+0xd1e>
 8003408:	3408      	adds	r4, #8
 800340a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800340c:	9a03      	ldr	r2, [sp, #12]
 800340e:	4293      	cmp	r3, r2
 8003410:	db01      	blt.n	8003416 <_svfprintf_r+0xc56>
 8003412:	07e9      	lsls	r1, r5, #31
 8003414:	d50d      	bpl.n	8003432 <_svfprintf_r+0xc72>
 8003416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	9b08      	ldr	r3, [sp, #32]
 800341c:	6063      	str	r3, [r4, #4]
 800341e:	9a08      	ldr	r2, [sp, #32]
 8003420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003422:	4413      	add	r3, r2
 8003424:	9321      	str	r3, [sp, #132]	; 0x84
 8003426:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003428:	3301      	adds	r3, #1
 800342a:	2b07      	cmp	r3, #7
 800342c:	9320      	str	r3, [sp, #128]	; 0x80
 800342e:	dc60      	bgt.n	80034f2 <_svfprintf_r+0xd32>
 8003430:	3408      	adds	r4, #8
 8003432:	9b03      	ldr	r3, [sp, #12]
 8003434:	9a03      	ldr	r2, [sp, #12]
 8003436:	1bde      	subs	r6, r3, r7
 8003438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	429e      	cmp	r6, r3
 800343e:	bfa8      	it	ge
 8003440:	461e      	movge	r6, r3
 8003442:	2e00      	cmp	r6, #0
 8003444:	dd0b      	ble.n	800345e <_svfprintf_r+0xc9e>
 8003446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003448:	6066      	str	r6, [r4, #4]
 800344a:	4433      	add	r3, r6
 800344c:	9321      	str	r3, [sp, #132]	; 0x84
 800344e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003450:	3301      	adds	r3, #1
 8003452:	4447      	add	r7, r8
 8003454:	2b07      	cmp	r3, #7
 8003456:	6027      	str	r7, [r4, #0]
 8003458:	9320      	str	r3, [sp, #128]	; 0x80
 800345a:	dc54      	bgt.n	8003506 <_svfprintf_r+0xd46>
 800345c:	3408      	adds	r4, #8
 800345e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003460:	9a03      	ldr	r2, [sp, #12]
 8003462:	2e00      	cmp	r6, #0
 8003464:	eba2 0303 	sub.w	r3, r2, r3
 8003468:	bfac      	ite	ge
 800346a:	1b9e      	subge	r6, r3, r6
 800346c:	461e      	movlt	r6, r3
 800346e:	2e00      	cmp	r6, #0
 8003470:	f77f acd7 	ble.w	8002e22 <_svfprintf_r+0x662>
 8003474:	4f2f      	ldr	r7, [pc, #188]	; (8003534 <_svfprintf_r+0xd74>)
 8003476:	f04f 0810 	mov.w	r8, #16
 800347a:	2e10      	cmp	r6, #16
 800347c:	6027      	str	r7, [r4, #0]
 800347e:	f77f aee7 	ble.w	8003250 <_svfprintf_r+0xa90>
 8003482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003484:	f8c4 8004 	str.w	r8, [r4, #4]
 8003488:	3310      	adds	r3, #16
 800348a:	9321      	str	r3, [sp, #132]	; 0x84
 800348c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800348e:	3301      	adds	r3, #1
 8003490:	2b07      	cmp	r3, #7
 8003492:	9320      	str	r3, [sp, #128]	; 0x80
 8003494:	dc41      	bgt.n	800351a <_svfprintf_r+0xd5a>
 8003496:	3408      	adds	r4, #8
 8003498:	3e10      	subs	r6, #16
 800349a:	e7ee      	b.n	800347a <_svfprintf_r+0xcba>
 800349c:	aa1f      	add	r2, sp, #124	; 0x7c
 800349e:	4651      	mov	r1, sl
 80034a0:	4658      	mov	r0, fp
 80034a2:	f001 fcd7 	bl	8004e54 <__ssprint_r>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	f040 80eb 	bne.w	8003682 <_svfprintf_r+0xec2>
 80034ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80034ae:	e796      	b.n	80033de <_svfprintf_r+0xc1e>
 80034b0:	2310      	movs	r3, #16
 80034b2:	6063      	str	r3, [r4, #4]
 80034b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034b6:	3310      	adds	r3, #16
 80034b8:	9321      	str	r3, [sp, #132]	; 0x84
 80034ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034bc:	3301      	adds	r3, #1
 80034be:	2b07      	cmp	r3, #7
 80034c0:	9320      	str	r3, [sp, #128]	; 0x80
 80034c2:	dc02      	bgt.n	80034ca <_svfprintf_r+0xd0a>
 80034c4:	3408      	adds	r4, #8
 80034c6:	3e10      	subs	r6, #16
 80034c8:	e791      	b.n	80033ee <_svfprintf_r+0xc2e>
 80034ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80034cc:	4651      	mov	r1, sl
 80034ce:	4658      	mov	r0, fp
 80034d0:	f001 fcc0 	bl	8004e54 <__ssprint_r>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	f040 80d4 	bne.w	8003682 <_svfprintf_r+0xec2>
 80034da:	ac2c      	add	r4, sp, #176	; 0xb0
 80034dc:	e7f3      	b.n	80034c6 <_svfprintf_r+0xd06>
 80034de:	aa1f      	add	r2, sp, #124	; 0x7c
 80034e0:	4651      	mov	r1, sl
 80034e2:	4658      	mov	r0, fp
 80034e4:	f001 fcb6 	bl	8004e54 <__ssprint_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f040 80ca 	bne.w	8003682 <_svfprintf_r+0xec2>
 80034ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80034f0:	e78b      	b.n	800340a <_svfprintf_r+0xc4a>
 80034f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034f4:	4651      	mov	r1, sl
 80034f6:	4658      	mov	r0, fp
 80034f8:	f001 fcac 	bl	8004e54 <__ssprint_r>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f040 80c0 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003502:	ac2c      	add	r4, sp, #176	; 0xb0
 8003504:	e795      	b.n	8003432 <_svfprintf_r+0xc72>
 8003506:	aa1f      	add	r2, sp, #124	; 0x7c
 8003508:	4651      	mov	r1, sl
 800350a:	4658      	mov	r0, fp
 800350c:	f001 fca2 	bl	8004e54 <__ssprint_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	f040 80b6 	bne.w	8003682 <_svfprintf_r+0xec2>
 8003516:	ac2c      	add	r4, sp, #176	; 0xb0
 8003518:	e7a1      	b.n	800345e <_svfprintf_r+0xc9e>
 800351a:	aa1f      	add	r2, sp, #124	; 0x7c
 800351c:	4651      	mov	r1, sl
 800351e:	4658      	mov	r0, fp
 8003520:	f001 fc98 	bl	8004e54 <__ssprint_r>
 8003524:	2800      	cmp	r0, #0
 8003526:	f040 80ac 	bne.w	8003682 <_svfprintf_r+0xec2>
 800352a:	ac2c      	add	r4, sp, #176	; 0xb0
 800352c:	e7b4      	b.n	8003498 <_svfprintf_r+0xcd8>
 800352e:	bf00      	nop
 8003530:	08005603 	.word	0x08005603
 8003534:	08005615 	.word	0x08005615
 8003538:	9b03      	ldr	r3, [sp, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	dc01      	bgt.n	8003542 <_svfprintf_r+0xd82>
 800353e:	07ea      	lsls	r2, r5, #31
 8003540:	d576      	bpl.n	8003630 <_svfprintf_r+0xe70>
 8003542:	2301      	movs	r3, #1
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003548:	f8c4 8000 	str.w	r8, [r4]
 800354c:	3301      	adds	r3, #1
 800354e:	9321      	str	r3, [sp, #132]	; 0x84
 8003550:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003552:	3301      	adds	r3, #1
 8003554:	2b07      	cmp	r3, #7
 8003556:	9320      	str	r3, [sp, #128]	; 0x80
 8003558:	dc36      	bgt.n	80035c8 <_svfprintf_r+0xe08>
 800355a:	3408      	adds	r4, #8
 800355c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	9b08      	ldr	r3, [sp, #32]
 8003562:	6063      	str	r3, [r4, #4]
 8003564:	9a08      	ldr	r2, [sp, #32]
 8003566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003568:	4413      	add	r3, r2
 800356a:	9321      	str	r3, [sp, #132]	; 0x84
 800356c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800356e:	3301      	adds	r3, #1
 8003570:	2b07      	cmp	r3, #7
 8003572:	9320      	str	r3, [sp, #128]	; 0x80
 8003574:	dc31      	bgt.n	80035da <_svfprintf_r+0xe1a>
 8003576:	3408      	adds	r4, #8
 8003578:	2300      	movs	r3, #0
 800357a:	2200      	movs	r2, #0
 800357c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003580:	f7fd fabe 	bl	8000b00 <__aeabi_dcmpeq>
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	1e5e      	subs	r6, r3, #1
 8003588:	2800      	cmp	r0, #0
 800358a:	d12f      	bne.n	80035ec <_svfprintf_r+0xe2c>
 800358c:	f108 0301 	add.w	r3, r8, #1
 8003590:	e884 0048 	stmia.w	r4, {r3, r6}
 8003594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003596:	9a03      	ldr	r2, [sp, #12]
 8003598:	3b01      	subs	r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	9321      	str	r3, [sp, #132]	; 0x84
 800359e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035a0:	3301      	adds	r3, #1
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	9320      	str	r3, [sp, #128]	; 0x80
 80035a6:	dd4a      	ble.n	800363e <_svfprintf_r+0xe7e>
 80035a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80035aa:	4651      	mov	r1, sl
 80035ac:	4658      	mov	r0, fp
 80035ae:	f001 fc51 	bl	8004e54 <__ssprint_r>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d165      	bne.n	8003682 <_svfprintf_r+0xec2>
 80035b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80035b8:	ab1b      	add	r3, sp, #108	; 0x6c
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035be:	6063      	str	r3, [r4, #4]
 80035c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80035c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035c4:	4413      	add	r3, r2
 80035c6:	e41c      	b.n	8002e02 <_svfprintf_r+0x642>
 80035c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80035ca:	4651      	mov	r1, sl
 80035cc:	4658      	mov	r0, fp
 80035ce:	f001 fc41 	bl	8004e54 <__ssprint_r>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d155      	bne.n	8003682 <_svfprintf_r+0xec2>
 80035d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80035d8:	e7c0      	b.n	800355c <_svfprintf_r+0xd9c>
 80035da:	aa1f      	add	r2, sp, #124	; 0x7c
 80035dc:	4651      	mov	r1, sl
 80035de:	4658      	mov	r0, fp
 80035e0:	f001 fc38 	bl	8004e54 <__ssprint_r>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d14c      	bne.n	8003682 <_svfprintf_r+0xec2>
 80035e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80035ea:	e7c5      	b.n	8003578 <_svfprintf_r+0xdb8>
 80035ec:	2e00      	cmp	r6, #0
 80035ee:	dde3      	ble.n	80035b8 <_svfprintf_r+0xdf8>
 80035f0:	4f59      	ldr	r7, [pc, #356]	; (8003758 <_svfprintf_r+0xf98>)
 80035f2:	f04f 0810 	mov.w	r8, #16
 80035f6:	2e10      	cmp	r6, #16
 80035f8:	6027      	str	r7, [r4, #0]
 80035fa:	dc04      	bgt.n	8003606 <_svfprintf_r+0xe46>
 80035fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035fe:	6066      	str	r6, [r4, #4]
 8003600:	441e      	add	r6, r3
 8003602:	9621      	str	r6, [sp, #132]	; 0x84
 8003604:	e7cb      	b.n	800359e <_svfprintf_r+0xdde>
 8003606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003608:	f8c4 8004 	str.w	r8, [r4, #4]
 800360c:	3310      	adds	r3, #16
 800360e:	9321      	str	r3, [sp, #132]	; 0x84
 8003610:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003612:	3301      	adds	r3, #1
 8003614:	2b07      	cmp	r3, #7
 8003616:	9320      	str	r3, [sp, #128]	; 0x80
 8003618:	dc02      	bgt.n	8003620 <_svfprintf_r+0xe60>
 800361a:	3408      	adds	r4, #8
 800361c:	3e10      	subs	r6, #16
 800361e:	e7ea      	b.n	80035f6 <_svfprintf_r+0xe36>
 8003620:	aa1f      	add	r2, sp, #124	; 0x7c
 8003622:	4651      	mov	r1, sl
 8003624:	4658      	mov	r0, fp
 8003626:	f001 fc15 	bl	8004e54 <__ssprint_r>
 800362a:	bb50      	cbnz	r0, 8003682 <_svfprintf_r+0xec2>
 800362c:	ac2c      	add	r4, sp, #176	; 0xb0
 800362e:	e7f5      	b.n	800361c <_svfprintf_r+0xe5c>
 8003630:	2301      	movs	r3, #1
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003636:	f8c4 8000 	str.w	r8, [r4]
 800363a:	3301      	adds	r3, #1
 800363c:	e7ae      	b.n	800359c <_svfprintf_r+0xddc>
 800363e:	3408      	adds	r4, #8
 8003640:	e7ba      	b.n	80035b8 <_svfprintf_r+0xdf8>
 8003642:	3408      	adds	r4, #8
 8003644:	f7ff bbed 	b.w	8002e22 <_svfprintf_r+0x662>
 8003648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800364a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800364c:	1a9d      	subs	r5, r3, r2
 800364e:	2d00      	cmp	r5, #0
 8003650:	f77f abea 	ble.w	8002e28 <_svfprintf_r+0x668>
 8003654:	2610      	movs	r6, #16
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <_svfprintf_r+0xf9c>)
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	2d10      	cmp	r5, #16
 800365c:	dc1b      	bgt.n	8003696 <_svfprintf_r+0xed6>
 800365e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003660:	6065      	str	r5, [r4, #4]
 8003662:	441d      	add	r5, r3
 8003664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003666:	9521      	str	r5, [sp, #132]	; 0x84
 8003668:	3301      	adds	r3, #1
 800366a:	2b07      	cmp	r3, #7
 800366c:	9320      	str	r3, [sp, #128]	; 0x80
 800366e:	f77f abdb 	ble.w	8002e28 <_svfprintf_r+0x668>
 8003672:	aa1f      	add	r2, sp, #124	; 0x7c
 8003674:	4651      	mov	r1, sl
 8003676:	4658      	mov	r0, fp
 8003678:	f001 fbec 	bl	8004e54 <__ssprint_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	f43f abd3 	beq.w	8002e28 <_svfprintf_r+0x668>
 8003682:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003686:	f013 0f40 	tst.w	r3, #64	; 0x40
 800368a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800368c:	bf18      	it	ne
 800368e:	f04f 33ff 	movne.w	r3, #4294967295
 8003692:	f7ff b8b9 	b.w	8002808 <_svfprintf_r+0x48>
 8003696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003698:	6066      	str	r6, [r4, #4]
 800369a:	3310      	adds	r3, #16
 800369c:	9321      	str	r3, [sp, #132]	; 0x84
 800369e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036a0:	3301      	adds	r3, #1
 80036a2:	2b07      	cmp	r3, #7
 80036a4:	9320      	str	r3, [sp, #128]	; 0x80
 80036a6:	dc02      	bgt.n	80036ae <_svfprintf_r+0xeee>
 80036a8:	3408      	adds	r4, #8
 80036aa:	3d10      	subs	r5, #16
 80036ac:	e7d3      	b.n	8003656 <_svfprintf_r+0xe96>
 80036ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80036b0:	4651      	mov	r1, sl
 80036b2:	4658      	mov	r0, fp
 80036b4:	f001 fbce 	bl	8004e54 <__ssprint_r>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d1e2      	bne.n	8003682 <_svfprintf_r+0xec2>
 80036bc:	ac2c      	add	r4, sp, #176	; 0xb0
 80036be:	e7f4      	b.n	80036aa <_svfprintf_r+0xeea>
 80036c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0dd      	beq.n	8003682 <_svfprintf_r+0xec2>
 80036c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80036c8:	4651      	mov	r1, sl
 80036ca:	4658      	mov	r0, fp
 80036cc:	f001 fbc2 	bl	8004e54 <__ssprint_r>
 80036d0:	e7d7      	b.n	8003682 <_svfprintf_r+0xec2>
 80036d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa43 	bl	8000b64 <__aeabi_dcmpun>
 80036de:	2800      	cmp	r0, #0
 80036e0:	f43f aa44 	beq.w	8002b6c <_svfprintf_r+0x3ac>
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <_svfprintf_r+0xfa0>)
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <_svfprintf_r+0xfa4>)
 80036e8:	f7ff ba34 	b.w	8002b54 <_svfprintf_r+0x394>
 80036ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80036ee:	eba3 0308 	sub.w	r3, r3, r8
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	f7ff bab5 	b.w	8002c62 <_svfprintf_r+0x4a2>
 80036f8:	ea56 0207 	orrs.w	r2, r6, r7
 80036fc:	950b      	str	r5, [sp, #44]	; 0x2c
 80036fe:	f43f ac2b 	beq.w	8002f58 <_svfprintf_r+0x798>
 8003702:	2b01      	cmp	r3, #1
 8003704:	f43f ac9d 	beq.w	8003042 <_svfprintf_r+0x882>
 8003708:	2b02      	cmp	r3, #2
 800370a:	f43f acbd 	beq.w	8003088 <_svfprintf_r+0x8c8>
 800370e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003710:	08f1      	lsrs	r1, r6, #3
 8003712:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003716:	08f8      	lsrs	r0, r7, #3
 8003718:	f006 0207 	and.w	r2, r6, #7
 800371c:	4607      	mov	r7, r0
 800371e:	460e      	mov	r6, r1
 8003720:	3230      	adds	r2, #48	; 0x30
 8003722:	ea56 0107 	orrs.w	r1, r6, r7
 8003726:	f103 38ff 	add.w	r8, r3, #4294967295
 800372a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800372e:	f47f ac86 	bne.w	800303e <_svfprintf_r+0x87e>
 8003732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003734:	07c9      	lsls	r1, r1, #31
 8003736:	d506      	bpl.n	8003746 <_svfprintf_r+0xf86>
 8003738:	2a30      	cmp	r2, #48	; 0x30
 800373a:	d004      	beq.n	8003746 <_svfprintf_r+0xf86>
 800373c:	2230      	movs	r2, #48	; 0x30
 800373e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003742:	f1a3 0802 	sub.w	r8, r3, #2
 8003746:	464e      	mov	r6, r9
 8003748:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800374c:	eba9 0908 	sub.w	r9, r9, r8
 8003750:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003752:	2700      	movs	r7, #0
 8003754:	f7ff bad1 	b.w	8002cfa <_svfprintf_r+0x53a>
 8003758:	08005615 	.word	0x08005615
 800375c:	08005605 	.word	0x08005605
 8003760:	080055d9 	.word	0x080055d9
 8003764:	080055dd 	.word	0x080055dd

08003768 <quorem>:
 8003768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	6903      	ldr	r3, [r0, #16]
 800376e:	690c      	ldr	r4, [r1, #16]
 8003770:	429c      	cmp	r4, r3
 8003772:	4680      	mov	r8, r0
 8003774:	f300 8082 	bgt.w	800387c <quorem+0x114>
 8003778:	3c01      	subs	r4, #1
 800377a:	f101 0714 	add.w	r7, r1, #20
 800377e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003782:	f100 0614 	add.w	r6, r0, #20
 8003786:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800378a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800378e:	eb06 030e 	add.w	r3, r6, lr
 8003792:	3501      	adds	r5, #1
 8003794:	eb07 090e 	add.w	r9, r7, lr
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	fbb0 f5f5 	udiv	r5, r0, r5
 800379e:	b395      	cbz	r5, 8003806 <quorem+0x9e>
 80037a0:	f04f 0a00 	mov.w	sl, #0
 80037a4:	4638      	mov	r0, r7
 80037a6:	46b4      	mov	ip, r6
 80037a8:	46d3      	mov	fp, sl
 80037aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80037ae:	b293      	uxth	r3, r2
 80037b0:	fb05 a303 	mla	r3, r5, r3, sl
 80037b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	ebab 0303 	sub.w	r3, fp, r3
 80037be:	0c12      	lsrs	r2, r2, #16
 80037c0:	f8bc b000 	ldrh.w	fp, [ip]
 80037c4:	fb05 a202 	mla	r2, r5, r2, sl
 80037c8:	fa13 f38b 	uxtah	r3, r3, fp
 80037cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80037d0:	fa1f fb82 	uxth.w	fp, r2
 80037d4:	f8dc 2000 	ldr.w	r2, [ip]
 80037d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80037dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037e6:	4581      	cmp	r9, r0
 80037e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80037ec:	f84c 3b04 	str.w	r3, [ip], #4
 80037f0:	d2db      	bcs.n	80037aa <quorem+0x42>
 80037f2:	f856 300e 	ldr.w	r3, [r6, lr]
 80037f6:	b933      	cbnz	r3, 8003806 <quorem+0x9e>
 80037f8:	9b01      	ldr	r3, [sp, #4]
 80037fa:	3b04      	subs	r3, #4
 80037fc:	429e      	cmp	r6, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	d330      	bcc.n	8003864 <quorem+0xfc>
 8003802:	f8c8 4010 	str.w	r4, [r8, #16]
 8003806:	4640      	mov	r0, r8
 8003808:	f001 fa4d 	bl	8004ca6 <__mcmp>
 800380c:	2800      	cmp	r0, #0
 800380e:	db25      	blt.n	800385c <quorem+0xf4>
 8003810:	3501      	adds	r5, #1
 8003812:	4630      	mov	r0, r6
 8003814:	f04f 0e00 	mov.w	lr, #0
 8003818:	f857 2b04 	ldr.w	r2, [r7], #4
 800381c:	f8d0 c000 	ldr.w	ip, [r0]
 8003820:	b293      	uxth	r3, r2
 8003822:	ebae 0303 	sub.w	r3, lr, r3
 8003826:	0c12      	lsrs	r2, r2, #16
 8003828:	fa13 f38c 	uxtah	r3, r3, ip
 800382c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003834:	b29b      	uxth	r3, r3
 8003836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800383a:	45b9      	cmp	r9, r7
 800383c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003840:	f840 3b04 	str.w	r3, [r0], #4
 8003844:	d2e8      	bcs.n	8003818 <quorem+0xb0>
 8003846:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800384a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800384e:	b92a      	cbnz	r2, 800385c <quorem+0xf4>
 8003850:	3b04      	subs	r3, #4
 8003852:	429e      	cmp	r6, r3
 8003854:	461a      	mov	r2, r3
 8003856:	d30b      	bcc.n	8003870 <quorem+0x108>
 8003858:	f8c8 4010 	str.w	r4, [r8, #16]
 800385c:	4628      	mov	r0, r5
 800385e:	b003      	add	sp, #12
 8003860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	3b04      	subs	r3, #4
 8003868:	2a00      	cmp	r2, #0
 800386a:	d1ca      	bne.n	8003802 <quorem+0x9a>
 800386c:	3c01      	subs	r4, #1
 800386e:	e7c5      	b.n	80037fc <quorem+0x94>
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	3b04      	subs	r3, #4
 8003874:	2a00      	cmp	r2, #0
 8003876:	d1ef      	bne.n	8003858 <quorem+0xf0>
 8003878:	3c01      	subs	r4, #1
 800387a:	e7ea      	b.n	8003852 <quorem+0xea>
 800387c:	2000      	movs	r0, #0
 800387e:	e7ee      	b.n	800385e <quorem+0xf6>

08003880 <_dtoa_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	ec57 6b10 	vmov	r6, r7, d0
 8003888:	b097      	sub	sp, #92	; 0x5c
 800388a:	e9cd 6700 	strd	r6, r7, [sp]
 800388e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003890:	9107      	str	r1, [sp, #28]
 8003892:	4604      	mov	r4, r0
 8003894:	920a      	str	r2, [sp, #40]	; 0x28
 8003896:	930f      	str	r3, [sp, #60]	; 0x3c
 8003898:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800389a:	b93e      	cbnz	r6, 80038ac <_dtoa_r+0x2c>
 800389c:	2010      	movs	r0, #16
 800389e:	f000 fdcb 	bl	8004438 <malloc>
 80038a2:	6260      	str	r0, [r4, #36]	; 0x24
 80038a4:	6046      	str	r6, [r0, #4]
 80038a6:	6086      	str	r6, [r0, #8]
 80038a8:	6006      	str	r6, [r0, #0]
 80038aa:	60c6      	str	r6, [r0, #12]
 80038ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	b151      	cbz	r1, 80038c8 <_dtoa_r+0x48>
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	604a      	str	r2, [r1, #4]
 80038b6:	2301      	movs	r3, #1
 80038b8:	4093      	lsls	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]
 80038bc:	4620      	mov	r0, r4
 80038be:	f001 f81d 	bl	80048fc <_Bfree>
 80038c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	9b01      	ldr	r3, [sp, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bfbf      	itttt	lt
 80038ce:	2301      	movlt	r3, #1
 80038d0:	602b      	strlt	r3, [r5, #0]
 80038d2:	9b01      	ldrlt	r3, [sp, #4]
 80038d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	bfb2      	itee	lt
 80038da:	9301      	strlt	r3, [sp, #4]
 80038dc:	2300      	movge	r3, #0
 80038de:	602b      	strge	r3, [r5, #0]
 80038e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80038e4:	4ba8      	ldr	r3, [pc, #672]	; (8003b88 <_dtoa_r+0x308>)
 80038e6:	ea33 0308 	bics.w	r3, r3, r8
 80038ea:	d11b      	bne.n	8003924 <_dtoa_r+0xa4>
 80038ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	9b00      	ldr	r3, [sp, #0]
 80038f6:	b923      	cbnz	r3, 8003902 <_dtoa_r+0x82>
 80038f8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f000 8578 	beq.w	80043f2 <_dtoa_r+0xb72>
 8003902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003904:	b953      	cbnz	r3, 800391c <_dtoa_r+0x9c>
 8003906:	4ba1      	ldr	r3, [pc, #644]	; (8003b8c <_dtoa_r+0x30c>)
 8003908:	e021      	b.n	800394e <_dtoa_r+0xce>
 800390a:	4ba1      	ldr	r3, [pc, #644]	; (8003b90 <_dtoa_r+0x310>)
 800390c:	9302      	str	r3, [sp, #8]
 800390e:	3308      	adds	r3, #8
 8003910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	9802      	ldr	r0, [sp, #8]
 8003916:	b017      	add	sp, #92	; 0x5c
 8003918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391c:	4b9b      	ldr	r3, [pc, #620]	; (8003b8c <_dtoa_r+0x30c>)
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	3303      	adds	r3, #3
 8003922:	e7f5      	b.n	8003910 <_dtoa_r+0x90>
 8003924:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003928:	2200      	movs	r2, #0
 800392a:	2300      	movs	r3, #0
 800392c:	4630      	mov	r0, r6
 800392e:	4639      	mov	r1, r7
 8003930:	f7fd f8e6 	bl	8000b00 <__aeabi_dcmpeq>
 8003934:	4681      	mov	r9, r0
 8003936:	b160      	cbz	r0, 8003952 <_dtoa_r+0xd2>
 8003938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800393a:	2301      	movs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8553 	beq.w	80043ec <_dtoa_r+0xb6c>
 8003946:	4b93      	ldr	r3, [pc, #588]	; (8003b94 <_dtoa_r+0x314>)
 8003948:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	3b01      	subs	r3, #1
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	e7e0      	b.n	8003914 <_dtoa_r+0x94>
 8003952:	aa14      	add	r2, sp, #80	; 0x50
 8003954:	a915      	add	r1, sp, #84	; 0x54
 8003956:	ec47 6b10 	vmov	d0, r6, r7
 800395a:	4620      	mov	r0, r4
 800395c:	f001 fa1b 	bl	8004d96 <__d2b>
 8003960:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003964:	4682      	mov	sl, r0
 8003966:	2d00      	cmp	r5, #0
 8003968:	d07e      	beq.n	8003a68 <_dtoa_r+0x1e8>
 800396a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800396e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003972:	4630      	mov	r0, r6
 8003974:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003978:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800397c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003980:	2200      	movs	r2, #0
 8003982:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <_dtoa_r+0x318>)
 8003984:	f7fc fca0 	bl	80002c8 <__aeabi_dsub>
 8003988:	a379      	add	r3, pc, #484	; (adr r3, 8003b70 <_dtoa_r+0x2f0>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f7fc fe4f 	bl	8000630 <__aeabi_dmul>
 8003992:	a379      	add	r3, pc, #484	; (adr r3, 8003b78 <_dtoa_r+0x2f8>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fc98 	bl	80002cc <__adddf3>
 800399c:	4606      	mov	r6, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	460f      	mov	r7, r1
 80039a2:	f7fc fddf 	bl	8000564 <__aeabi_i2d>
 80039a6:	a376      	add	r3, pc, #472	; (adr r3, 8003b80 <_dtoa_r+0x300>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fe40 	bl	8000630 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4630      	mov	r0, r6
 80039b6:	4639      	mov	r1, r7
 80039b8:	f7fc fc88 	bl	80002cc <__adddf3>
 80039bc:	4606      	mov	r6, r0
 80039be:	460f      	mov	r7, r1
 80039c0:	f7fd f8e6 	bl	8000b90 <__aeabi_d2iz>
 80039c4:	2200      	movs	r2, #0
 80039c6:	4683      	mov	fp, r0
 80039c8:	2300      	movs	r3, #0
 80039ca:	4630      	mov	r0, r6
 80039cc:	4639      	mov	r1, r7
 80039ce:	f7fd f8a1 	bl	8000b14 <__aeabi_dcmplt>
 80039d2:	b158      	cbz	r0, 80039ec <_dtoa_r+0x16c>
 80039d4:	4658      	mov	r0, fp
 80039d6:	f7fc fdc5 	bl	8000564 <__aeabi_i2d>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4630      	mov	r0, r6
 80039e0:	4639      	mov	r1, r7
 80039e2:	f7fd f88d 	bl	8000b00 <__aeabi_dcmpeq>
 80039e6:	b908      	cbnz	r0, 80039ec <_dtoa_r+0x16c>
 80039e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039ec:	f1bb 0f16 	cmp.w	fp, #22
 80039f0:	d859      	bhi.n	8003aa6 <_dtoa_r+0x226>
 80039f2:	496a      	ldr	r1, [pc, #424]	; (8003b9c <_dtoa_r+0x31c>)
 80039f4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80039f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a00:	f7fd f8a6 	bl	8000b50 <__aeabi_dcmpgt>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d050      	beq.n	8003aaa <_dtoa_r+0x22a>
 8003a08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8003a10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a12:	1b5d      	subs	r5, r3, r5
 8003a14:	1e6b      	subs	r3, r5, #1
 8003a16:	9306      	str	r3, [sp, #24]
 8003a18:	bf45      	ittet	mi
 8003a1a:	f1c5 0301 	rsbmi	r3, r5, #1
 8003a1e:	9305      	strmi	r3, [sp, #20]
 8003a20:	2300      	movpl	r3, #0
 8003a22:	2300      	movmi	r3, #0
 8003a24:	bf4c      	ite	mi
 8003a26:	9306      	strmi	r3, [sp, #24]
 8003a28:	9305      	strpl	r3, [sp, #20]
 8003a2a:	f1bb 0f00 	cmp.w	fp, #0
 8003a2e:	db3e      	blt.n	8003aae <_dtoa_r+0x22e>
 8003a30:	9b06      	ldr	r3, [sp, #24]
 8003a32:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003a36:	445b      	add	r3, fp
 8003a38:	9306      	str	r3, [sp, #24]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9308      	str	r3, [sp, #32]
 8003a3e:	9b07      	ldr	r3, [sp, #28]
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	f200 80af 	bhi.w	8003ba4 <_dtoa_r+0x324>
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	bfc4      	itt	gt
 8003a4a:	3b04      	subgt	r3, #4
 8003a4c:	9307      	strgt	r3, [sp, #28]
 8003a4e:	9b07      	ldr	r3, [sp, #28]
 8003a50:	f1a3 0302 	sub.w	r3, r3, #2
 8003a54:	bfcc      	ite	gt
 8003a56:	2600      	movgt	r6, #0
 8003a58:	2601      	movle	r6, #1
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	f200 80ae 	bhi.w	8003bbc <_dtoa_r+0x33c>
 8003a60:	e8df f003 	tbb	[pc, r3]
 8003a64:	772f8482 	.word	0x772f8482
 8003a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003a6c:	441d      	add	r5, r3
 8003a6e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	dd11      	ble.n	8003a9a <_dtoa_r+0x21a>
 8003a76:	9a00      	ldr	r2, [sp, #0]
 8003a78:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003a7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003a80:	fa22 f000 	lsr.w	r0, r2, r0
 8003a84:	fa08 f303 	lsl.w	r3, r8, r3
 8003a88:	4318      	orrs	r0, r3
 8003a8a:	f7fc fd5b 	bl	8000544 <__aeabi_ui2d>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003a94:	3d01      	subs	r5, #1
 8003a96:	9312      	str	r3, [sp, #72]	; 0x48
 8003a98:	e772      	b.n	8003980 <_dtoa_r+0x100>
 8003a9a:	f1c3 0020 	rsb	r0, r3, #32
 8003a9e:	9b00      	ldr	r3, [sp, #0]
 8003aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8003aa4:	e7f1      	b.n	8003a8a <_dtoa_r+0x20a>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7b1      	b.n	8003a0e <_dtoa_r+0x18e>
 8003aaa:	900e      	str	r0, [sp, #56]	; 0x38
 8003aac:	e7b0      	b.n	8003a10 <_dtoa_r+0x190>
 8003aae:	9b05      	ldr	r3, [sp, #20]
 8003ab0:	eba3 030b 	sub.w	r3, r3, fp
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	f1cb 0300 	rsb	r3, fp, #0
 8003aba:	9308      	str	r3, [sp, #32]
 8003abc:	2300      	movs	r3, #0
 8003abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ac0:	e7bd      	b.n	8003a3e <_dtoa_r+0x1be>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dd7a      	ble.n	8003bc2 <_dtoa_r+0x342>
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	606a      	str	r2, [r5, #4]
 8003ad6:	2104      	movs	r1, #4
 8003ad8:	f101 0214 	add.w	r2, r1, #20
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d975      	bls.n	8003bcc <_dtoa_r+0x34c>
 8003ae0:	6869      	ldr	r1, [r5, #4]
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 fed6 	bl	8004894 <_Balloc>
 8003ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aea:	6028      	str	r0, [r5, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	9302      	str	r3, [sp, #8]
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	2b0e      	cmp	r3, #14
 8003af4:	f200 80e5 	bhi.w	8003cc2 <_dtoa_r+0x442>
 8003af8:	2e00      	cmp	r6, #0
 8003afa:	f000 80e2 	beq.w	8003cc2 <_dtoa_r+0x442>
 8003afe:	ed9d 7b00 	vldr	d7, [sp]
 8003b02:	f1bb 0f00 	cmp.w	fp, #0
 8003b06:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003b0a:	dd74      	ble.n	8003bf6 <_dtoa_r+0x376>
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <_dtoa_r+0x31c>)
 8003b0e:	f00b 030f 	and.w	r3, fp, #15
 8003b12:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003b16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b1a:	06f0      	lsls	r0, r6, #27
 8003b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b20:	d559      	bpl.n	8003bd6 <_dtoa_r+0x356>
 8003b22:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <_dtoa_r+0x320>)
 8003b24:	ec51 0b17 	vmov	r0, r1, d7
 8003b28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b2c:	f7fc feaa 	bl	8000884 <__aeabi_ddiv>
 8003b30:	e9cd 0100 	strd	r0, r1, [sp]
 8003b34:	f006 060f 	and.w	r6, r6, #15
 8003b38:	2503      	movs	r5, #3
 8003b3a:	4f19      	ldr	r7, [pc, #100]	; (8003ba0 <_dtoa_r+0x320>)
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	d14c      	bne.n	8003bda <_dtoa_r+0x35a>
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b48:	f7fc fe9c 	bl	8000884 <__aeabi_ddiv>
 8003b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8003b50:	e06a      	b.n	8003c28 <_dtoa_r+0x3a8>
 8003b52:	2301      	movs	r3, #1
 8003b54:	9309      	str	r3, [sp, #36]	; 0x24
 8003b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b58:	445b      	add	r3, fp
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	9303      	str	r3, [sp, #12]
 8003b62:	bfb8      	it	lt
 8003b64:	2301      	movlt	r3, #1
 8003b66:	e7b3      	b.n	8003ad0 <_dtoa_r+0x250>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e7ab      	b.n	8003ac4 <_dtoa_r+0x244>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e7f1      	b.n	8003b54 <_dtoa_r+0x2d4>
 8003b70:	636f4361 	.word	0x636f4361
 8003b74:	3fd287a7 	.word	0x3fd287a7
 8003b78:	8b60c8b3 	.word	0x8b60c8b3
 8003b7c:	3fc68a28 	.word	0x3fc68a28
 8003b80:	509f79fb 	.word	0x509f79fb
 8003b84:	3fd34413 	.word	0x3fd34413
 8003b88:	7ff00000 	.word	0x7ff00000
 8003b8c:	0800562e 	.word	0x0800562e
 8003b90:	08005625 	.word	0x08005625
 8003b94:	08005604 	.word	0x08005604
 8003b98:	3ff80000 	.word	0x3ff80000
 8003b9c:	08005660 	.word	0x08005660
 8003ba0:	08005638 	.word	0x08005638
 8003ba4:	2601      	movs	r6, #1
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9307      	str	r3, [sp, #28]
 8003baa:	9609      	str	r6, [sp, #36]	; 0x24
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	9304      	str	r3, [sp, #16]
 8003bb2:	9303      	str	r3, [sp, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2312      	movs	r3, #18
 8003bb8:	920a      	str	r2, [sp, #40]	; 0x28
 8003bba:	e789      	b.n	8003ad0 <_dtoa_r+0x250>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc0:	e7f4      	b.n	8003bac <_dtoa_r+0x32c>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	9303      	str	r3, [sp, #12]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	e7f5      	b.n	8003bb8 <_dtoa_r+0x338>
 8003bcc:	686a      	ldr	r2, [r5, #4]
 8003bce:	3201      	adds	r2, #1
 8003bd0:	606a      	str	r2, [r5, #4]
 8003bd2:	0049      	lsls	r1, r1, #1
 8003bd4:	e780      	b.n	8003ad8 <_dtoa_r+0x258>
 8003bd6:	2502      	movs	r5, #2
 8003bd8:	e7af      	b.n	8003b3a <_dtoa_r+0x2ba>
 8003bda:	07f1      	lsls	r1, r6, #31
 8003bdc:	d508      	bpl.n	8003bf0 <_dtoa_r+0x370>
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be6:	f7fc fd23 	bl	8000630 <__aeabi_dmul>
 8003bea:	3501      	adds	r5, #1
 8003bec:	4680      	mov	r8, r0
 8003bee:	4689      	mov	r9, r1
 8003bf0:	1076      	asrs	r6, r6, #1
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	e7a2      	b.n	8003b3c <_dtoa_r+0x2bc>
 8003bf6:	f000 809d 	beq.w	8003d34 <_dtoa_r+0x4b4>
 8003bfa:	f1cb 0600 	rsb	r6, fp, #0
 8003bfe:	4b9f      	ldr	r3, [pc, #636]	; (8003e7c <_dtoa_r+0x5fc>)
 8003c00:	4f9f      	ldr	r7, [pc, #636]	; (8003e80 <_dtoa_r+0x600>)
 8003c02:	f006 020f 	and.w	r2, r6, #15
 8003c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c12:	f7fc fd0d 	bl	8000630 <__aeabi_dmul>
 8003c16:	e9cd 0100 	strd	r0, r1, [sp]
 8003c1a:	1136      	asrs	r6, r6, #4
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2502      	movs	r5, #2
 8003c20:	2e00      	cmp	r6, #0
 8003c22:	d17c      	bne.n	8003d1e <_dtoa_r+0x49e>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d191      	bne.n	8003b4c <_dtoa_r+0x2cc>
 8003c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8084 	beq.w	8003d38 <_dtoa_r+0x4b8>
 8003c30:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b93      	ldr	r3, [pc, #588]	; (8003e84 <_dtoa_r+0x604>)
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	f7fc ff6a 	bl	8000b14 <__aeabi_dcmplt>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d079      	beq.n	8003d38 <_dtoa_r+0x4b8>
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d076      	beq.n	8003d38 <_dtoa_r+0x4b8>
 8003c4a:	9b04      	ldr	r3, [sp, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	dd34      	ble.n	8003cba <_dtoa_r+0x43a>
 8003c50:	2200      	movs	r2, #0
 8003c52:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <_dtoa_r+0x608>)
 8003c54:	4640      	mov	r0, r8
 8003c56:	4649      	mov	r1, r9
 8003c58:	f7fc fcea 	bl	8000630 <__aeabi_dmul>
 8003c5c:	e9cd 0100 	strd	r0, r1, [sp]
 8003c60:	9e04      	ldr	r6, [sp, #16]
 8003c62:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003c66:	3501      	adds	r5, #1
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f7fc fc7b 	bl	8000564 <__aeabi_i2d>
 8003c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c72:	f7fc fcdd 	bl	8000630 <__aeabi_dmul>
 8003c76:	2200      	movs	r2, #0
 8003c78:	4b84      	ldr	r3, [pc, #528]	; (8003e8c <_dtoa_r+0x60c>)
 8003c7a:	f7fc fb27 	bl	80002cc <__adddf3>
 8003c7e:	4680      	mov	r8, r0
 8003c80:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	d15a      	bne.n	8003d3e <_dtoa_r+0x4be>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <_dtoa_r+0x610>)
 8003c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c90:	f7fc fb1a 	bl	80002c8 <__aeabi_dsub>
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	e9cd 0100 	strd	r0, r1, [sp]
 8003c9c:	f7fc ff58 	bl	8000b50 <__aeabi_dcmpgt>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f040 829b 	bne.w	80041dc <_dtoa_r+0x95c>
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cb0:	f7fc ff30 	bl	8000b14 <__aeabi_dcmplt>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f040 828f 	bne.w	80041d8 <_dtoa_r+0x958>
 8003cba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8003cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f2c0 8150 	blt.w	8003f6a <_dtoa_r+0x6ea>
 8003cca:	f1bb 0f0e 	cmp.w	fp, #14
 8003cce:	f300 814c 	bgt.w	8003f6a <_dtoa_r+0x6ea>
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <_dtoa_r+0x5fc>)
 8003cd4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003cd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f280 80da 	bge.w	8003e98 <_dtoa_r+0x618>
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f300 80d6 	bgt.w	8003e98 <_dtoa_r+0x618>
 8003cec:	f040 8273 	bne.w	80041d6 <_dtoa_r+0x956>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <_dtoa_r+0x610>)
 8003cf4:	4640      	mov	r0, r8
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	f7fc fc9a 	bl	8000630 <__aeabi_dmul>
 8003cfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d00:	f7fc ff1c 	bl	8000b3c <__aeabi_dcmpge>
 8003d04:	9e03      	ldr	r6, [sp, #12]
 8003d06:	4637      	mov	r7, r6
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	f040 824a 	bne.w	80041a2 <_dtoa_r+0x922>
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	9a02      	ldr	r2, [sp, #8]
 8003d12:	1c5d      	adds	r5, r3, #1
 8003d14:	2331      	movs	r3, #49	; 0x31
 8003d16:	7013      	strb	r3, [r2, #0]
 8003d18:	f10b 0b01 	add.w	fp, fp, #1
 8003d1c:	e245      	b.n	80041aa <_dtoa_r+0x92a>
 8003d1e:	07f2      	lsls	r2, r6, #31
 8003d20:	d505      	bpl.n	8003d2e <_dtoa_r+0x4ae>
 8003d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d26:	f7fc fc83 	bl	8000630 <__aeabi_dmul>
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	1076      	asrs	r6, r6, #1
 8003d30:	3708      	adds	r7, #8
 8003d32:	e775      	b.n	8003c20 <_dtoa_r+0x3a0>
 8003d34:	2502      	movs	r5, #2
 8003d36:	e777      	b.n	8003c28 <_dtoa_r+0x3a8>
 8003d38:	465f      	mov	r7, fp
 8003d3a:	9e03      	ldr	r6, [sp, #12]
 8003d3c:	e794      	b.n	8003c68 <_dtoa_r+0x3e8>
 8003d3e:	9a02      	ldr	r2, [sp, #8]
 8003d40:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <_dtoa_r+0x5fc>)
 8003d42:	4432      	add	r2, r6
 8003d44:	9213      	str	r2, [sp, #76]	; 0x4c
 8003d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d48:	1e71      	subs	r1, r6, #1
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d048      	beq.n	8003de0 <_dtoa_r+0x560>
 8003d4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	2000      	movs	r0, #0
 8003d58:	494e      	ldr	r1, [pc, #312]	; (8003e94 <_dtoa_r+0x614>)
 8003d5a:	f7fc fd93 	bl	8000884 <__aeabi_ddiv>
 8003d5e:	4642      	mov	r2, r8
 8003d60:	464b      	mov	r3, r9
 8003d62:	f7fc fab1 	bl	80002c8 <__aeabi_dsub>
 8003d66:	9d02      	ldr	r5, [sp, #8]
 8003d68:	4680      	mov	r8, r0
 8003d6a:	4689      	mov	r9, r1
 8003d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d70:	f7fc ff0e 	bl	8000b90 <__aeabi_d2iz>
 8003d74:	4606      	mov	r6, r0
 8003d76:	f7fc fbf5 	bl	8000564 <__aeabi_i2d>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d82:	f7fc faa1 	bl	80002c8 <__aeabi_dsub>
 8003d86:	3630      	adds	r6, #48	; 0x30
 8003d88:	f805 6b01 	strb.w	r6, [r5], #1
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	e9cd 0100 	strd	r0, r1, [sp]
 8003d94:	f7fc febe 	bl	8000b14 <__aeabi_dcmplt>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d165      	bne.n	8003e68 <_dtoa_r+0x5e8>
 8003d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003da0:	2000      	movs	r0, #0
 8003da2:	4938      	ldr	r1, [pc, #224]	; (8003e84 <_dtoa_r+0x604>)
 8003da4:	f7fc fa90 	bl	80002c8 <__aeabi_dsub>
 8003da8:	4642      	mov	r2, r8
 8003daa:	464b      	mov	r3, r9
 8003dac:	f7fc feb2 	bl	8000b14 <__aeabi_dcmplt>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	f040 80ba 	bne.w	8003f2a <_dtoa_r+0x6aa>
 8003db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003db8:	429d      	cmp	r5, r3
 8003dba:	f43f af7e 	beq.w	8003cba <_dtoa_r+0x43a>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <_dtoa_r+0x608>)
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fc33 	bl	8000630 <__aeabi_dmul>
 8003dca:	2200      	movs	r2, #0
 8003dcc:	4680      	mov	r8, r0
 8003dce:	4689      	mov	r9, r1
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <_dtoa_r+0x608>)
 8003dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dd6:	f7fc fc2b 	bl	8000630 <__aeabi_dmul>
 8003dda:	e9cd 0100 	strd	r0, r1, [sp]
 8003dde:	e7c5      	b.n	8003d6c <_dtoa_r+0x4ec>
 8003de0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dec:	f7fc fc20 	bl	8000630 <__aeabi_dmul>
 8003df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003df4:	9d02      	ldr	r5, [sp, #8]
 8003df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dfa:	f7fc fec9 	bl	8000b90 <__aeabi_d2iz>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	f7fc fbb0 	bl	8000564 <__aeabi_i2d>
 8003e04:	3630      	adds	r6, #48	; 0x30
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e0e:	f7fc fa5b 	bl	80002c8 <__aeabi_dsub>
 8003e12:	f805 6b01 	strb.w	r6, [r5], #1
 8003e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e18:	42ab      	cmp	r3, r5
 8003e1a:	4680      	mov	r8, r0
 8003e1c:	4689      	mov	r9, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	d125      	bne.n	8003e70 <_dtoa_r+0x5f0>
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <_dtoa_r+0x614>)
 8003e26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e2a:	f7fc fa4f 	bl	80002cc <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4640      	mov	r0, r8
 8003e34:	4649      	mov	r1, r9
 8003e36:	f7fc fe8b 	bl	8000b50 <__aeabi_dcmpgt>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d175      	bne.n	8003f2a <_dtoa_r+0x6aa>
 8003e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e42:	2000      	movs	r0, #0
 8003e44:	4913      	ldr	r1, [pc, #76]	; (8003e94 <_dtoa_r+0x614>)
 8003e46:	f7fc fa3f 	bl	80002c8 <__aeabi_dsub>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f7fc fe5f 	bl	8000b14 <__aeabi_dcmplt>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f43f af2f 	beq.w	8003cba <_dtoa_r+0x43a>
 8003e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e60:	2b30      	cmp	r3, #48	; 0x30
 8003e62:	f105 32ff 	add.w	r2, r5, #4294967295
 8003e66:	d001      	beq.n	8003e6c <_dtoa_r+0x5ec>
 8003e68:	46bb      	mov	fp, r7
 8003e6a:	e04d      	b.n	8003f08 <_dtoa_r+0x688>
 8003e6c:	4615      	mov	r5, r2
 8003e6e:	e7f5      	b.n	8003e5c <_dtoa_r+0x5dc>
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <_dtoa_r+0x608>)
 8003e72:	f7fc fbdd 	bl	8000630 <__aeabi_dmul>
 8003e76:	e9cd 0100 	strd	r0, r1, [sp]
 8003e7a:	e7bc      	b.n	8003df6 <_dtoa_r+0x576>
 8003e7c:	08005660 	.word	0x08005660
 8003e80:	08005638 	.word	0x08005638
 8003e84:	3ff00000 	.word	0x3ff00000
 8003e88:	40240000 	.word	0x40240000
 8003e8c:	401c0000 	.word	0x401c0000
 8003e90:	40140000 	.word	0x40140000
 8003e94:	3fe00000 	.word	0x3fe00000
 8003e98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003e9c:	9d02      	ldr	r5, [sp, #8]
 8003e9e:	4642      	mov	r2, r8
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	f7fc fced 	bl	8000884 <__aeabi_ddiv>
 8003eaa:	f7fc fe71 	bl	8000b90 <__aeabi_d2iz>
 8003eae:	9000      	str	r0, [sp, #0]
 8003eb0:	f7fc fb58 	bl	8000564 <__aeabi_i2d>
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	f7fc fbba 	bl	8000630 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fa00 	bl	80002c8 <__aeabi_dsub>
 8003ec8:	9e00      	ldr	r6, [sp, #0]
 8003eca:	9f03      	ldr	r7, [sp, #12]
 8003ecc:	3630      	adds	r6, #48	; 0x30
 8003ece:	f805 6b01 	strb.w	r6, [r5], #1
 8003ed2:	9e02      	ldr	r6, [sp, #8]
 8003ed4:	1bae      	subs	r6, r5, r6
 8003ed6:	42b7      	cmp	r7, r6
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	d138      	bne.n	8003f50 <_dtoa_r+0x6d0>
 8003ede:	f7fc f9f5 	bl	80002cc <__adddf3>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4640      	mov	r0, r8
 8003eec:	4649      	mov	r1, r9
 8003eee:	f7fc fe11 	bl	8000b14 <__aeabi_dcmplt>
 8003ef2:	b9c8      	cbnz	r0, 8003f28 <_dtoa_r+0x6a8>
 8003ef4:	4632      	mov	r2, r6
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4640      	mov	r0, r8
 8003efa:	4649      	mov	r1, r9
 8003efc:	f7fc fe00 	bl	8000b00 <__aeabi_dcmpeq>
 8003f00:	b110      	cbz	r0, 8003f08 <_dtoa_r+0x688>
 8003f02:	9b00      	ldr	r3, [sp, #0]
 8003f04:	07db      	lsls	r3, r3, #31
 8003f06:	d40f      	bmi.n	8003f28 <_dtoa_r+0x6a8>
 8003f08:	4651      	mov	r1, sl
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fcf6 	bl	80048fc <_Bfree>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f14:	702b      	strb	r3, [r5, #0]
 8003f16:	f10b 0301 	add.w	r3, fp, #1
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f43f acf8 	beq.w	8003914 <_dtoa_r+0x94>
 8003f24:	601d      	str	r5, [r3, #0]
 8003f26:	e4f5      	b.n	8003914 <_dtoa_r+0x94>
 8003f28:	465f      	mov	r7, fp
 8003f2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003f2e:	2a39      	cmp	r2, #57	; 0x39
 8003f30:	f105 33ff 	add.w	r3, r5, #4294967295
 8003f34:	d106      	bne.n	8003f44 <_dtoa_r+0x6c4>
 8003f36:	9a02      	ldr	r2, [sp, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <_dtoa_r+0x6cc>
 8003f3c:	2330      	movs	r3, #48	; 0x30
 8003f3e:	7013      	strb	r3, [r2, #0]
 8003f40:	3701      	adds	r7, #1
 8003f42:	4613      	mov	r3, r2
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	3201      	adds	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e78d      	b.n	8003e68 <_dtoa_r+0x5e8>
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	e7ec      	b.n	8003f2a <_dtoa_r+0x6aa>
 8003f50:	2200      	movs	r2, #0
 8003f52:	4ba4      	ldr	r3, [pc, #656]	; (80041e4 <_dtoa_r+0x964>)
 8003f54:	f7fc fb6c 	bl	8000630 <__aeabi_dmul>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	460f      	mov	r7, r1
 8003f60:	f7fc fdce 	bl	8000b00 <__aeabi_dcmpeq>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d09a      	beq.n	8003e9e <_dtoa_r+0x61e>
 8003f68:	e7ce      	b.n	8003f08 <_dtoa_r+0x688>
 8003f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	f000 80cd 	beq.w	800410c <_dtoa_r+0x88c>
 8003f72:	9a07      	ldr	r2, [sp, #28]
 8003f74:	2a01      	cmp	r2, #1
 8003f76:	f300 80af 	bgt.w	80040d8 <_dtoa_r+0x858>
 8003f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	f000 80a7 	beq.w	80040d0 <_dtoa_r+0x850>
 8003f82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f86:	9e08      	ldr	r6, [sp, #32]
 8003f88:	9d05      	ldr	r5, [sp, #20]
 8003f8a:	9a05      	ldr	r2, [sp, #20]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	9205      	str	r2, [sp, #20]
 8003f90:	9a06      	ldr	r2, [sp, #24]
 8003f92:	2101      	movs	r1, #1
 8003f94:	441a      	add	r2, r3
 8003f96:	4620      	mov	r0, r4
 8003f98:	9206      	str	r2, [sp, #24]
 8003f9a:	f000 fd4f 	bl	8004a3c <__i2b>
 8003f9e:	4607      	mov	r7, r0
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	dd0c      	ble.n	8003fbe <_dtoa_r+0x73e>
 8003fa4:	9b06      	ldr	r3, [sp, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	dd09      	ble.n	8003fbe <_dtoa_r+0x73e>
 8003faa:	42ab      	cmp	r3, r5
 8003fac:	9a05      	ldr	r2, [sp, #20]
 8003fae:	bfa8      	it	ge
 8003fb0:	462b      	movge	r3, r5
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	9205      	str	r2, [sp, #20]
 8003fb6:	9a06      	ldr	r2, [sp, #24]
 8003fb8:	1aed      	subs	r5, r5, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	9306      	str	r3, [sp, #24]
 8003fbe:	9b08      	ldr	r3, [sp, #32]
 8003fc0:	b1f3      	cbz	r3, 8004000 <_dtoa_r+0x780>
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a5 	beq.w	8004114 <_dtoa_r+0x894>
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	dd10      	ble.n	8003ff0 <_dtoa_r+0x770>
 8003fce:	4639      	mov	r1, r7
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 fdc8 	bl	8004b68 <__pow5mult>
 8003fd8:	4652      	mov	r2, sl
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4607      	mov	r7, r0
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f000 fd35 	bl	8004a4e <__multiply>
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 fc87 	bl	80048fc <_Bfree>
 8003fee:	46c2      	mov	sl, r8
 8003ff0:	9b08      	ldr	r3, [sp, #32]
 8003ff2:	1b9a      	subs	r2, r3, r6
 8003ff4:	d004      	beq.n	8004000 <_dtoa_r+0x780>
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 fdb5 	bl	8004b68 <__pow5mult>
 8003ffe:	4682      	mov	sl, r0
 8004000:	2101      	movs	r1, #1
 8004002:	4620      	mov	r0, r4
 8004004:	f000 fd1a 	bl	8004a3c <__i2b>
 8004008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800400a:	2b00      	cmp	r3, #0
 800400c:	4606      	mov	r6, r0
 800400e:	f340 8083 	ble.w	8004118 <_dtoa_r+0x898>
 8004012:	461a      	mov	r2, r3
 8004014:	4601      	mov	r1, r0
 8004016:	4620      	mov	r0, r4
 8004018:	f000 fda6 	bl	8004b68 <__pow5mult>
 800401c:	9b07      	ldr	r3, [sp, #28]
 800401e:	2b01      	cmp	r3, #1
 8004020:	4606      	mov	r6, r0
 8004022:	dd7c      	ble.n	800411e <_dtoa_r+0x89e>
 8004024:	f04f 0800 	mov.w	r8, #0
 8004028:	6933      	ldr	r3, [r6, #16]
 800402a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800402e:	6918      	ldr	r0, [r3, #16]
 8004030:	f000 fcb6 	bl	80049a0 <__hi0bits>
 8004034:	f1c0 0020 	rsb	r0, r0, #32
 8004038:	9b06      	ldr	r3, [sp, #24]
 800403a:	4418      	add	r0, r3
 800403c:	f010 001f 	ands.w	r0, r0, #31
 8004040:	f000 8096 	beq.w	8004170 <_dtoa_r+0x8f0>
 8004044:	f1c0 0320 	rsb	r3, r0, #32
 8004048:	2b04      	cmp	r3, #4
 800404a:	f340 8087 	ble.w	800415c <_dtoa_r+0x8dc>
 800404e:	9b05      	ldr	r3, [sp, #20]
 8004050:	f1c0 001c 	rsb	r0, r0, #28
 8004054:	4403      	add	r3, r0
 8004056:	9305      	str	r3, [sp, #20]
 8004058:	9b06      	ldr	r3, [sp, #24]
 800405a:	4405      	add	r5, r0
 800405c:	4403      	add	r3, r0
 800405e:	9306      	str	r3, [sp, #24]
 8004060:	9b05      	ldr	r3, [sp, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dd05      	ble.n	8004072 <_dtoa_r+0x7f2>
 8004066:	4651      	mov	r1, sl
 8004068:	461a      	mov	r2, r3
 800406a:	4620      	mov	r0, r4
 800406c:	f000 fdca 	bl	8004c04 <__lshift>
 8004070:	4682      	mov	sl, r0
 8004072:	9b06      	ldr	r3, [sp, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	dd05      	ble.n	8004084 <_dtoa_r+0x804>
 8004078:	4631      	mov	r1, r6
 800407a:	461a      	mov	r2, r3
 800407c:	4620      	mov	r0, r4
 800407e:	f000 fdc1 	bl	8004c04 <__lshift>
 8004082:	4606      	mov	r6, r0
 8004084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d074      	beq.n	8004174 <_dtoa_r+0x8f4>
 800408a:	4631      	mov	r1, r6
 800408c:	4650      	mov	r0, sl
 800408e:	f000 fe0a 	bl	8004ca6 <__mcmp>
 8004092:	2800      	cmp	r0, #0
 8004094:	da6e      	bge.n	8004174 <_dtoa_r+0x8f4>
 8004096:	2300      	movs	r3, #0
 8004098:	4651      	mov	r1, sl
 800409a:	220a      	movs	r2, #10
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fc44 	bl	800492a <__multadd>
 80040a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040a8:	4682      	mov	sl, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 81a8 	beq.w	8004400 <_dtoa_r+0xb80>
 80040b0:	2300      	movs	r3, #0
 80040b2:	4639      	mov	r1, r7
 80040b4:	220a      	movs	r2, #10
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 fc37 	bl	800492a <__multadd>
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	4607      	mov	r7, r0
 80040c2:	f300 80c8 	bgt.w	8004256 <_dtoa_r+0x9d6>
 80040c6:	9b07      	ldr	r3, [sp, #28]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	f340 80c4 	ble.w	8004256 <_dtoa_r+0x9d6>
 80040ce:	e059      	b.n	8004184 <_dtoa_r+0x904>
 80040d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040d6:	e756      	b.n	8003f86 <_dtoa_r+0x706>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1e5e      	subs	r6, r3, #1
 80040dc:	9b08      	ldr	r3, [sp, #32]
 80040de:	42b3      	cmp	r3, r6
 80040e0:	bfbf      	itttt	lt
 80040e2:	9b08      	ldrlt	r3, [sp, #32]
 80040e4:	9608      	strlt	r6, [sp, #32]
 80040e6:	1af2      	sublt	r2, r6, r3
 80040e8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80040ea:	bfb6      	itet	lt
 80040ec:	189b      	addlt	r3, r3, r2
 80040ee:	1b9e      	subge	r6, r3, r6
 80040f0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	bfb8      	it	lt
 80040f6:	2600      	movlt	r6, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bfb9      	ittee	lt
 80040fc:	9b05      	ldrlt	r3, [sp, #20]
 80040fe:	9a03      	ldrlt	r2, [sp, #12]
 8004100:	9d05      	ldrge	r5, [sp, #20]
 8004102:	9b03      	ldrge	r3, [sp, #12]
 8004104:	bfbc      	itt	lt
 8004106:	1a9d      	sublt	r5, r3, r2
 8004108:	2300      	movlt	r3, #0
 800410a:	e73e      	b.n	8003f8a <_dtoa_r+0x70a>
 800410c:	9e08      	ldr	r6, [sp, #32]
 800410e:	9d05      	ldr	r5, [sp, #20]
 8004110:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004112:	e745      	b.n	8003fa0 <_dtoa_r+0x720>
 8004114:	9a08      	ldr	r2, [sp, #32]
 8004116:	e76e      	b.n	8003ff6 <_dtoa_r+0x776>
 8004118:	9b07      	ldr	r3, [sp, #28]
 800411a:	2b01      	cmp	r3, #1
 800411c:	dc19      	bgt.n	8004152 <_dtoa_r+0x8d2>
 800411e:	9b00      	ldr	r3, [sp, #0]
 8004120:	b9bb      	cbnz	r3, 8004152 <_dtoa_r+0x8d2>
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	b99b      	cbnz	r3, 8004152 <_dtoa_r+0x8d2>
 800412a:	9b01      	ldr	r3, [sp, #4]
 800412c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004130:	0d1b      	lsrs	r3, r3, #20
 8004132:	051b      	lsls	r3, r3, #20
 8004134:	b183      	cbz	r3, 8004158 <_dtoa_r+0x8d8>
 8004136:	9b05      	ldr	r3, [sp, #20]
 8004138:	3301      	adds	r3, #1
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	9b06      	ldr	r3, [sp, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	9306      	str	r3, [sp, #24]
 8004142:	f04f 0801 	mov.w	r8, #1
 8004146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f af6d 	bne.w	8004028 <_dtoa_r+0x7a8>
 800414e:	2001      	movs	r0, #1
 8004150:	e772      	b.n	8004038 <_dtoa_r+0x7b8>
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	e7f6      	b.n	8004146 <_dtoa_r+0x8c6>
 8004158:	4698      	mov	r8, r3
 800415a:	e7f4      	b.n	8004146 <_dtoa_r+0x8c6>
 800415c:	d080      	beq.n	8004060 <_dtoa_r+0x7e0>
 800415e:	9a05      	ldr	r2, [sp, #20]
 8004160:	331c      	adds	r3, #28
 8004162:	441a      	add	r2, r3
 8004164:	9205      	str	r2, [sp, #20]
 8004166:	9a06      	ldr	r2, [sp, #24]
 8004168:	441a      	add	r2, r3
 800416a:	441d      	add	r5, r3
 800416c:	4613      	mov	r3, r2
 800416e:	e776      	b.n	800405e <_dtoa_r+0x7de>
 8004170:	4603      	mov	r3, r0
 8004172:	e7f4      	b.n	800415e <_dtoa_r+0x8de>
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dc36      	bgt.n	80041e8 <_dtoa_r+0x968>
 800417a:	9b07      	ldr	r3, [sp, #28]
 800417c:	2b02      	cmp	r3, #2
 800417e:	dd33      	ble.n	80041e8 <_dtoa_r+0x968>
 8004180:	9b03      	ldr	r3, [sp, #12]
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	9b04      	ldr	r3, [sp, #16]
 8004186:	b963      	cbnz	r3, 80041a2 <_dtoa_r+0x922>
 8004188:	4631      	mov	r1, r6
 800418a:	2205      	movs	r2, #5
 800418c:	4620      	mov	r0, r4
 800418e:	f000 fbcc 	bl	800492a <__multadd>
 8004192:	4601      	mov	r1, r0
 8004194:	4606      	mov	r6, r0
 8004196:	4650      	mov	r0, sl
 8004198:	f000 fd85 	bl	8004ca6 <__mcmp>
 800419c:	2800      	cmp	r0, #0
 800419e:	f73f adb6 	bgt.w	8003d0e <_dtoa_r+0x48e>
 80041a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041a4:	9d02      	ldr	r5, [sp, #8]
 80041a6:	ea6f 0b03 	mvn.w	fp, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	9303      	str	r3, [sp, #12]
 80041ae:	4631      	mov	r1, r6
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 fba3 	bl	80048fc <_Bfree>
 80041b6:	2f00      	cmp	r7, #0
 80041b8:	f43f aea6 	beq.w	8003f08 <_dtoa_r+0x688>
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	b12b      	cbz	r3, 80041cc <_dtoa_r+0x94c>
 80041c0:	42bb      	cmp	r3, r7
 80041c2:	d003      	beq.n	80041cc <_dtoa_r+0x94c>
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 fb98 	bl	80048fc <_Bfree>
 80041cc:	4639      	mov	r1, r7
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 fb94 	bl	80048fc <_Bfree>
 80041d4:	e698      	b.n	8003f08 <_dtoa_r+0x688>
 80041d6:	2600      	movs	r6, #0
 80041d8:	4637      	mov	r7, r6
 80041da:	e7e2      	b.n	80041a2 <_dtoa_r+0x922>
 80041dc:	46bb      	mov	fp, r7
 80041de:	4637      	mov	r7, r6
 80041e0:	e595      	b.n	8003d0e <_dtoa_r+0x48e>
 80041e2:	bf00      	nop
 80041e4:	40240000 	.word	0x40240000
 80041e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ea:	bb93      	cbnz	r3, 8004252 <_dtoa_r+0x9d2>
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	9d02      	ldr	r5, [sp, #8]
 80041f2:	4631      	mov	r1, r6
 80041f4:	4650      	mov	r0, sl
 80041f6:	f7ff fab7 	bl	8003768 <quorem>
 80041fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80041fe:	f805 9b01 	strb.w	r9, [r5], #1
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	9a04      	ldr	r2, [sp, #16]
 8004206:	1aeb      	subs	r3, r5, r3
 8004208:	429a      	cmp	r2, r3
 800420a:	f300 80dc 	bgt.w	80043c6 <_dtoa_r+0xb46>
 800420e:	9b02      	ldr	r3, [sp, #8]
 8004210:	2a01      	cmp	r2, #1
 8004212:	bfac      	ite	ge
 8004214:	189b      	addge	r3, r3, r2
 8004216:	3301      	addlt	r3, #1
 8004218:	4698      	mov	r8, r3
 800421a:	2300      	movs	r3, #0
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	4651      	mov	r1, sl
 8004220:	2201      	movs	r2, #1
 8004222:	4620      	mov	r0, r4
 8004224:	f000 fcee 	bl	8004c04 <__lshift>
 8004228:	4631      	mov	r1, r6
 800422a:	4682      	mov	sl, r0
 800422c:	f000 fd3b 	bl	8004ca6 <__mcmp>
 8004230:	2800      	cmp	r0, #0
 8004232:	f300 808d 	bgt.w	8004350 <_dtoa_r+0xad0>
 8004236:	d103      	bne.n	8004240 <_dtoa_r+0x9c0>
 8004238:	f019 0f01 	tst.w	r9, #1
 800423c:	f040 8088 	bne.w	8004350 <_dtoa_r+0xad0>
 8004240:	4645      	mov	r5, r8
 8004242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004246:	2b30      	cmp	r3, #48	; 0x30
 8004248:	f105 32ff 	add.w	r2, r5, #4294967295
 800424c:	d1af      	bne.n	80041ae <_dtoa_r+0x92e>
 800424e:	4615      	mov	r5, r2
 8004250:	e7f7      	b.n	8004242 <_dtoa_r+0x9c2>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	2d00      	cmp	r5, #0
 8004258:	dd05      	ble.n	8004266 <_dtoa_r+0x9e6>
 800425a:	4639      	mov	r1, r7
 800425c:	462a      	mov	r2, r5
 800425e:	4620      	mov	r0, r4
 8004260:	f000 fcd0 	bl	8004c04 <__lshift>
 8004264:	4607      	mov	r7, r0
 8004266:	f1b8 0f00 	cmp.w	r8, #0
 800426a:	d04c      	beq.n	8004306 <_dtoa_r+0xa86>
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fb10 	bl	8004894 <_Balloc>
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	3202      	adds	r2, #2
 8004278:	4605      	mov	r5, r0
 800427a:	0092      	lsls	r2, r2, #2
 800427c:	f107 010c 	add.w	r1, r7, #12
 8004280:	300c      	adds	r0, #12
 8004282:	f000 faef 	bl	8004864 <memcpy>
 8004286:	2201      	movs	r2, #1
 8004288:	4629      	mov	r1, r5
 800428a:	4620      	mov	r0, r4
 800428c:	f000 fcba 	bl	8004c04 <__lshift>
 8004290:	9b00      	ldr	r3, [sp, #0]
 8004292:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004296:	9703      	str	r7, [sp, #12]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	4607      	mov	r7, r0
 800429e:	9305      	str	r3, [sp, #20]
 80042a0:	4631      	mov	r1, r6
 80042a2:	4650      	mov	r0, sl
 80042a4:	f7ff fa60 	bl	8003768 <quorem>
 80042a8:	9903      	ldr	r1, [sp, #12]
 80042aa:	4605      	mov	r5, r0
 80042ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80042b0:	4650      	mov	r0, sl
 80042b2:	f000 fcf8 	bl	8004ca6 <__mcmp>
 80042b6:	463a      	mov	r2, r7
 80042b8:	9000      	str	r0, [sp, #0]
 80042ba:	4631      	mov	r1, r6
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 fd0c 	bl	8004cda <__mdiff>
 80042c2:	68c3      	ldr	r3, [r0, #12]
 80042c4:	4602      	mov	r2, r0
 80042c6:	bb03      	cbnz	r3, 800430a <_dtoa_r+0xa8a>
 80042c8:	4601      	mov	r1, r0
 80042ca:	9006      	str	r0, [sp, #24]
 80042cc:	4650      	mov	r0, sl
 80042ce:	f000 fcea 	bl	8004ca6 <__mcmp>
 80042d2:	9a06      	ldr	r2, [sp, #24]
 80042d4:	4603      	mov	r3, r0
 80042d6:	4611      	mov	r1, r2
 80042d8:	4620      	mov	r0, r4
 80042da:	9306      	str	r3, [sp, #24]
 80042dc:	f000 fb0e 	bl	80048fc <_Bfree>
 80042e0:	9b06      	ldr	r3, [sp, #24]
 80042e2:	b9a3      	cbnz	r3, 800430e <_dtoa_r+0xa8e>
 80042e4:	9a07      	ldr	r2, [sp, #28]
 80042e6:	b992      	cbnz	r2, 800430e <_dtoa_r+0xa8e>
 80042e8:	9a05      	ldr	r2, [sp, #20]
 80042ea:	b982      	cbnz	r2, 800430e <_dtoa_r+0xa8e>
 80042ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80042f0:	d029      	beq.n	8004346 <_dtoa_r+0xac6>
 80042f2:	9b00      	ldr	r3, [sp, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dd01      	ble.n	80042fc <_dtoa_r+0xa7c>
 80042f8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80042fc:	f108 0501 	add.w	r5, r8, #1
 8004300:	f888 9000 	strb.w	r9, [r8]
 8004304:	e753      	b.n	80041ae <_dtoa_r+0x92e>
 8004306:	4638      	mov	r0, r7
 8004308:	e7c2      	b.n	8004290 <_dtoa_r+0xa10>
 800430a:	2301      	movs	r3, #1
 800430c:	e7e3      	b.n	80042d6 <_dtoa_r+0xa56>
 800430e:	9a00      	ldr	r2, [sp, #0]
 8004310:	2a00      	cmp	r2, #0
 8004312:	db04      	blt.n	800431e <_dtoa_r+0xa9e>
 8004314:	d125      	bne.n	8004362 <_dtoa_r+0xae2>
 8004316:	9a07      	ldr	r2, [sp, #28]
 8004318:	bb1a      	cbnz	r2, 8004362 <_dtoa_r+0xae2>
 800431a:	9a05      	ldr	r2, [sp, #20]
 800431c:	bb0a      	cbnz	r2, 8004362 <_dtoa_r+0xae2>
 800431e:	2b00      	cmp	r3, #0
 8004320:	ddec      	ble.n	80042fc <_dtoa_r+0xa7c>
 8004322:	4651      	mov	r1, sl
 8004324:	2201      	movs	r2, #1
 8004326:	4620      	mov	r0, r4
 8004328:	f000 fc6c 	bl	8004c04 <__lshift>
 800432c:	4631      	mov	r1, r6
 800432e:	4682      	mov	sl, r0
 8004330:	f000 fcb9 	bl	8004ca6 <__mcmp>
 8004334:	2800      	cmp	r0, #0
 8004336:	dc03      	bgt.n	8004340 <_dtoa_r+0xac0>
 8004338:	d1e0      	bne.n	80042fc <_dtoa_r+0xa7c>
 800433a:	f019 0f01 	tst.w	r9, #1
 800433e:	d0dd      	beq.n	80042fc <_dtoa_r+0xa7c>
 8004340:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004344:	d1d8      	bne.n	80042f8 <_dtoa_r+0xa78>
 8004346:	2339      	movs	r3, #57	; 0x39
 8004348:	f888 3000 	strb.w	r3, [r8]
 800434c:	f108 0801 	add.w	r8, r8, #1
 8004350:	4645      	mov	r5, r8
 8004352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004356:	2b39      	cmp	r3, #57	; 0x39
 8004358:	f105 32ff 	add.w	r2, r5, #4294967295
 800435c:	d03b      	beq.n	80043d6 <_dtoa_r+0xb56>
 800435e:	3301      	adds	r3, #1
 8004360:	e040      	b.n	80043e4 <_dtoa_r+0xb64>
 8004362:	2b00      	cmp	r3, #0
 8004364:	f108 0501 	add.w	r5, r8, #1
 8004368:	dd05      	ble.n	8004376 <_dtoa_r+0xaf6>
 800436a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800436e:	d0ea      	beq.n	8004346 <_dtoa_r+0xac6>
 8004370:	f109 0901 	add.w	r9, r9, #1
 8004374:	e7c4      	b.n	8004300 <_dtoa_r+0xa80>
 8004376:	9b02      	ldr	r3, [sp, #8]
 8004378:	9a04      	ldr	r2, [sp, #16]
 800437a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800437e:	1aeb      	subs	r3, r5, r3
 8004380:	4293      	cmp	r3, r2
 8004382:	46a8      	mov	r8, r5
 8004384:	f43f af4b 	beq.w	800421e <_dtoa_r+0x99e>
 8004388:	4651      	mov	r1, sl
 800438a:	2300      	movs	r3, #0
 800438c:	220a      	movs	r2, #10
 800438e:	4620      	mov	r0, r4
 8004390:	f000 facb 	bl	800492a <__multadd>
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	9903      	ldr	r1, [sp, #12]
 8004398:	42bb      	cmp	r3, r7
 800439a:	4682      	mov	sl, r0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	f04f 020a 	mov.w	r2, #10
 80043a4:	4620      	mov	r0, r4
 80043a6:	d104      	bne.n	80043b2 <_dtoa_r+0xb32>
 80043a8:	f000 fabf 	bl	800492a <__multadd>
 80043ac:	9003      	str	r0, [sp, #12]
 80043ae:	4607      	mov	r7, r0
 80043b0:	e776      	b.n	80042a0 <_dtoa_r+0xa20>
 80043b2:	f000 faba 	bl	800492a <__multadd>
 80043b6:	2300      	movs	r3, #0
 80043b8:	9003      	str	r0, [sp, #12]
 80043ba:	220a      	movs	r2, #10
 80043bc:	4639      	mov	r1, r7
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 fab3 	bl	800492a <__multadd>
 80043c4:	e7f3      	b.n	80043ae <_dtoa_r+0xb2e>
 80043c6:	4651      	mov	r1, sl
 80043c8:	2300      	movs	r3, #0
 80043ca:	220a      	movs	r2, #10
 80043cc:	4620      	mov	r0, r4
 80043ce:	f000 faac 	bl	800492a <__multadd>
 80043d2:	4682      	mov	sl, r0
 80043d4:	e70d      	b.n	80041f2 <_dtoa_r+0x972>
 80043d6:	9b02      	ldr	r3, [sp, #8]
 80043d8:	4293      	cmp	r3, r2
 80043da:	d105      	bne.n	80043e8 <_dtoa_r+0xb68>
 80043dc:	9a02      	ldr	r2, [sp, #8]
 80043de:	f10b 0b01 	add.w	fp, fp, #1
 80043e2:	2331      	movs	r3, #49	; 0x31
 80043e4:	7013      	strb	r3, [r2, #0]
 80043e6:	e6e2      	b.n	80041ae <_dtoa_r+0x92e>
 80043e8:	4615      	mov	r5, r2
 80043ea:	e7b2      	b.n	8004352 <_dtoa_r+0xad2>
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <_dtoa_r+0xb94>)
 80043ee:	f7ff baae 	b.w	800394e <_dtoa_r+0xce>
 80043f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f aa88 	bne.w	800390a <_dtoa_r+0x8a>
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <_dtoa_r+0xb98>)
 80043fc:	f7ff baa7 	b.w	800394e <_dtoa_r+0xce>
 8004400:	9b04      	ldr	r3, [sp, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f73f aef4 	bgt.w	80041f0 <_dtoa_r+0x970>
 8004408:	9b07      	ldr	r3, [sp, #28]
 800440a:	2b02      	cmp	r3, #2
 800440c:	f77f aef0 	ble.w	80041f0 <_dtoa_r+0x970>
 8004410:	e6b8      	b.n	8004184 <_dtoa_r+0x904>
 8004412:	bf00      	nop
 8004414:	08005603 	.word	0x08005603
 8004418:	08005625 	.word	0x08005625

0800441c <_localeconv_r>:
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <_localeconv_r+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a18      	ldr	r0, [r3, #32]
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <_localeconv_r+0x18>)
 8004424:	2800      	cmp	r0, #0
 8004426:	bf08      	it	eq
 8004428:	4618      	moveq	r0, r3
 800442a:	30f0      	adds	r0, #240	; 0xf0
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000510 	.word	0x20000510

08004438 <malloc>:
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <malloc+0xc>)
 800443a:	4601      	mov	r1, r0
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	f000 b803 	b.w	8004448 <_malloc_r>
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c

08004448 <_malloc_r>:
 8004448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444c:	f101 040b 	add.w	r4, r1, #11
 8004450:	2c16      	cmp	r4, #22
 8004452:	4681      	mov	r9, r0
 8004454:	d907      	bls.n	8004466 <_malloc_r+0x1e>
 8004456:	f034 0407 	bics.w	r4, r4, #7
 800445a:	d505      	bpl.n	8004468 <_malloc_r+0x20>
 800445c:	230c      	movs	r3, #12
 800445e:	f8c9 3000 	str.w	r3, [r9]
 8004462:	2600      	movs	r6, #0
 8004464:	e131      	b.n	80046ca <_malloc_r+0x282>
 8004466:	2410      	movs	r4, #16
 8004468:	428c      	cmp	r4, r1
 800446a:	d3f7      	bcc.n	800445c <_malloc_r+0x14>
 800446c:	4648      	mov	r0, r9
 800446e:	f000 fa05 	bl	800487c <__malloc_lock>
 8004472:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004476:	4d9c      	ldr	r5, [pc, #624]	; (80046e8 <_malloc_r+0x2a0>)
 8004478:	d236      	bcs.n	80044e8 <_malloc_r+0xa0>
 800447a:	f104 0208 	add.w	r2, r4, #8
 800447e:	442a      	add	r2, r5
 8004480:	f1a2 0108 	sub.w	r1, r2, #8
 8004484:	6856      	ldr	r6, [r2, #4]
 8004486:	428e      	cmp	r6, r1
 8004488:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800448c:	d102      	bne.n	8004494 <_malloc_r+0x4c>
 800448e:	68d6      	ldr	r6, [r2, #12]
 8004490:	42b2      	cmp	r2, r6
 8004492:	d010      	beq.n	80044b6 <_malloc_r+0x6e>
 8004494:	6873      	ldr	r3, [r6, #4]
 8004496:	68f2      	ldr	r2, [r6, #12]
 8004498:	68b1      	ldr	r1, [r6, #8]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60ca      	str	r2, [r1, #12]
 80044a0:	4433      	add	r3, r6
 80044a2:	6091      	str	r1, [r2, #8]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	4648      	mov	r0, r9
 80044ae:	f000 f9eb 	bl	8004888 <__malloc_unlock>
 80044b2:	3608      	adds	r6, #8
 80044b4:	e109      	b.n	80046ca <_malloc_r+0x282>
 80044b6:	3302      	adds	r3, #2
 80044b8:	4a8c      	ldr	r2, [pc, #560]	; (80046ec <_malloc_r+0x2a4>)
 80044ba:	692e      	ldr	r6, [r5, #16]
 80044bc:	4296      	cmp	r6, r2
 80044be:	4611      	mov	r1, r2
 80044c0:	d06d      	beq.n	800459e <_malloc_r+0x156>
 80044c2:	6870      	ldr	r0, [r6, #4]
 80044c4:	f020 0003 	bic.w	r0, r0, #3
 80044c8:	1b07      	subs	r7, r0, r4
 80044ca:	2f0f      	cmp	r7, #15
 80044cc:	dd47      	ble.n	800455e <_malloc_r+0x116>
 80044ce:	1933      	adds	r3, r6, r4
 80044d0:	f044 0401 	orr.w	r4, r4, #1
 80044d4:	6074      	str	r4, [r6, #4]
 80044d6:	616b      	str	r3, [r5, #20]
 80044d8:	612b      	str	r3, [r5, #16]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	f047 0201 	orr.w	r2, r7, #1
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	5037      	str	r7, [r6, r0]
 80044e6:	e7e1      	b.n	80044ac <_malloc_r+0x64>
 80044e8:	0a63      	lsrs	r3, r4, #9
 80044ea:	d02a      	beq.n	8004542 <_malloc_r+0xfa>
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d812      	bhi.n	8004516 <_malloc_r+0xce>
 80044f0:	09a3      	lsrs	r3, r4, #6
 80044f2:	3338      	adds	r3, #56	; 0x38
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80044fa:	f1a2 0008 	sub.w	r0, r2, #8
 80044fe:	6856      	ldr	r6, [r2, #4]
 8004500:	4286      	cmp	r6, r0
 8004502:	d006      	beq.n	8004512 <_malloc_r+0xca>
 8004504:	6872      	ldr	r2, [r6, #4]
 8004506:	f022 0203 	bic.w	r2, r2, #3
 800450a:	1b11      	subs	r1, r2, r4
 800450c:	290f      	cmp	r1, #15
 800450e:	dd1c      	ble.n	800454a <_malloc_r+0x102>
 8004510:	3b01      	subs	r3, #1
 8004512:	3301      	adds	r3, #1
 8004514:	e7d0      	b.n	80044b8 <_malloc_r+0x70>
 8004516:	2b14      	cmp	r3, #20
 8004518:	d801      	bhi.n	800451e <_malloc_r+0xd6>
 800451a:	335b      	adds	r3, #91	; 0x5b
 800451c:	e7ea      	b.n	80044f4 <_malloc_r+0xac>
 800451e:	2b54      	cmp	r3, #84	; 0x54
 8004520:	d802      	bhi.n	8004528 <_malloc_r+0xe0>
 8004522:	0b23      	lsrs	r3, r4, #12
 8004524:	336e      	adds	r3, #110	; 0x6e
 8004526:	e7e5      	b.n	80044f4 <_malloc_r+0xac>
 8004528:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800452c:	d802      	bhi.n	8004534 <_malloc_r+0xec>
 800452e:	0be3      	lsrs	r3, r4, #15
 8004530:	3377      	adds	r3, #119	; 0x77
 8004532:	e7df      	b.n	80044f4 <_malloc_r+0xac>
 8004534:	f240 5254 	movw	r2, #1364	; 0x554
 8004538:	4293      	cmp	r3, r2
 800453a:	d804      	bhi.n	8004546 <_malloc_r+0xfe>
 800453c:	0ca3      	lsrs	r3, r4, #18
 800453e:	337c      	adds	r3, #124	; 0x7c
 8004540:	e7d8      	b.n	80044f4 <_malloc_r+0xac>
 8004542:	233f      	movs	r3, #63	; 0x3f
 8004544:	e7d6      	b.n	80044f4 <_malloc_r+0xac>
 8004546:	237e      	movs	r3, #126	; 0x7e
 8004548:	e7d4      	b.n	80044f4 <_malloc_r+0xac>
 800454a:	2900      	cmp	r1, #0
 800454c:	68f1      	ldr	r1, [r6, #12]
 800454e:	db04      	blt.n	800455a <_malloc_r+0x112>
 8004550:	68b3      	ldr	r3, [r6, #8]
 8004552:	60d9      	str	r1, [r3, #12]
 8004554:	608b      	str	r3, [r1, #8]
 8004556:	18b3      	adds	r3, r6, r2
 8004558:	e7a4      	b.n	80044a4 <_malloc_r+0x5c>
 800455a:	460e      	mov	r6, r1
 800455c:	e7d0      	b.n	8004500 <_malloc_r+0xb8>
 800455e:	2f00      	cmp	r7, #0
 8004560:	616a      	str	r2, [r5, #20]
 8004562:	612a      	str	r2, [r5, #16]
 8004564:	db05      	blt.n	8004572 <_malloc_r+0x12a>
 8004566:	4430      	add	r0, r6
 8004568:	6843      	ldr	r3, [r0, #4]
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6043      	str	r3, [r0, #4]
 8004570:	e79c      	b.n	80044ac <_malloc_r+0x64>
 8004572:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004576:	d244      	bcs.n	8004602 <_malloc_r+0x1ba>
 8004578:	08c0      	lsrs	r0, r0, #3
 800457a:	1087      	asrs	r7, r0, #2
 800457c:	2201      	movs	r2, #1
 800457e:	fa02 f707 	lsl.w	r7, r2, r7
 8004582:	686a      	ldr	r2, [r5, #4]
 8004584:	3001      	adds	r0, #1
 8004586:	433a      	orrs	r2, r7
 8004588:	606a      	str	r2, [r5, #4]
 800458a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800458e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004592:	60b7      	str	r7, [r6, #8]
 8004594:	3a08      	subs	r2, #8
 8004596:	60f2      	str	r2, [r6, #12]
 8004598:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800459c:	60fe      	str	r6, [r7, #12]
 800459e:	2001      	movs	r0, #1
 80045a0:	109a      	asrs	r2, r3, #2
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	6868      	ldr	r0, [r5, #4]
 80045a8:	4282      	cmp	r2, r0
 80045aa:	f200 80a1 	bhi.w	80046f0 <_malloc_r+0x2a8>
 80045ae:	4202      	tst	r2, r0
 80045b0:	d106      	bne.n	80045c0 <_malloc_r+0x178>
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	0052      	lsls	r2, r2, #1
 80045b8:	4202      	tst	r2, r0
 80045ba:	f103 0304 	add.w	r3, r3, #4
 80045be:	d0fa      	beq.n	80045b6 <_malloc_r+0x16e>
 80045c0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80045c4:	46e0      	mov	r8, ip
 80045c6:	469e      	mov	lr, r3
 80045c8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80045cc:	4546      	cmp	r6, r8
 80045ce:	d153      	bne.n	8004678 <_malloc_r+0x230>
 80045d0:	f10e 0e01 	add.w	lr, lr, #1
 80045d4:	f01e 0f03 	tst.w	lr, #3
 80045d8:	f108 0808 	add.w	r8, r8, #8
 80045dc:	d1f4      	bne.n	80045c8 <_malloc_r+0x180>
 80045de:	0798      	lsls	r0, r3, #30
 80045e0:	d179      	bne.n	80046d6 <_malloc_r+0x28e>
 80045e2:	686b      	ldr	r3, [r5, #4]
 80045e4:	ea23 0302 	bic.w	r3, r3, r2
 80045e8:	606b      	str	r3, [r5, #4]
 80045ea:	6868      	ldr	r0, [r5, #4]
 80045ec:	0052      	lsls	r2, r2, #1
 80045ee:	4282      	cmp	r2, r0
 80045f0:	d87e      	bhi.n	80046f0 <_malloc_r+0x2a8>
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	d07c      	beq.n	80046f0 <_malloc_r+0x2a8>
 80045f6:	4673      	mov	r3, lr
 80045f8:	4202      	tst	r2, r0
 80045fa:	d1e1      	bne.n	80045c0 <_malloc_r+0x178>
 80045fc:	3304      	adds	r3, #4
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	e7fa      	b.n	80045f8 <_malloc_r+0x1b0>
 8004602:	0a42      	lsrs	r2, r0, #9
 8004604:	2a04      	cmp	r2, #4
 8004606:	d815      	bhi.n	8004634 <_malloc_r+0x1ec>
 8004608:	0982      	lsrs	r2, r0, #6
 800460a:	3238      	adds	r2, #56	; 0x38
 800460c:	1c57      	adds	r7, r2, #1
 800460e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004612:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004616:	45be      	cmp	lr, r7
 8004618:	d126      	bne.n	8004668 <_malloc_r+0x220>
 800461a:	2001      	movs	r0, #1
 800461c:	1092      	asrs	r2, r2, #2
 800461e:	fa00 f202 	lsl.w	r2, r0, r2
 8004622:	6868      	ldr	r0, [r5, #4]
 8004624:	4310      	orrs	r0, r2
 8004626:	6068      	str	r0, [r5, #4]
 8004628:	f8c6 e00c 	str.w	lr, [r6, #12]
 800462c:	60b7      	str	r7, [r6, #8]
 800462e:	f8ce 6008 	str.w	r6, [lr, #8]
 8004632:	e7b3      	b.n	800459c <_malloc_r+0x154>
 8004634:	2a14      	cmp	r2, #20
 8004636:	d801      	bhi.n	800463c <_malloc_r+0x1f4>
 8004638:	325b      	adds	r2, #91	; 0x5b
 800463a:	e7e7      	b.n	800460c <_malloc_r+0x1c4>
 800463c:	2a54      	cmp	r2, #84	; 0x54
 800463e:	d802      	bhi.n	8004646 <_malloc_r+0x1fe>
 8004640:	0b02      	lsrs	r2, r0, #12
 8004642:	326e      	adds	r2, #110	; 0x6e
 8004644:	e7e2      	b.n	800460c <_malloc_r+0x1c4>
 8004646:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800464a:	d802      	bhi.n	8004652 <_malloc_r+0x20a>
 800464c:	0bc2      	lsrs	r2, r0, #15
 800464e:	3277      	adds	r2, #119	; 0x77
 8004650:	e7dc      	b.n	800460c <_malloc_r+0x1c4>
 8004652:	f240 5754 	movw	r7, #1364	; 0x554
 8004656:	42ba      	cmp	r2, r7
 8004658:	bf9a      	itte	ls
 800465a:	0c82      	lsrls	r2, r0, #18
 800465c:	327c      	addls	r2, #124	; 0x7c
 800465e:	227e      	movhi	r2, #126	; 0x7e
 8004660:	e7d4      	b.n	800460c <_malloc_r+0x1c4>
 8004662:	68bf      	ldr	r7, [r7, #8]
 8004664:	45be      	cmp	lr, r7
 8004666:	d004      	beq.n	8004672 <_malloc_r+0x22a>
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	f022 0203 	bic.w	r2, r2, #3
 800466e:	4290      	cmp	r0, r2
 8004670:	d3f7      	bcc.n	8004662 <_malloc_r+0x21a>
 8004672:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004676:	e7d7      	b.n	8004628 <_malloc_r+0x1e0>
 8004678:	6870      	ldr	r0, [r6, #4]
 800467a:	68f7      	ldr	r7, [r6, #12]
 800467c:	f020 0003 	bic.w	r0, r0, #3
 8004680:	eba0 0a04 	sub.w	sl, r0, r4
 8004684:	f1ba 0f0f 	cmp.w	sl, #15
 8004688:	dd10      	ble.n	80046ac <_malloc_r+0x264>
 800468a:	68b2      	ldr	r2, [r6, #8]
 800468c:	1933      	adds	r3, r6, r4
 800468e:	f044 0401 	orr.w	r4, r4, #1
 8004692:	6074      	str	r4, [r6, #4]
 8004694:	60d7      	str	r7, [r2, #12]
 8004696:	60ba      	str	r2, [r7, #8]
 8004698:	f04a 0201 	orr.w	r2, sl, #1
 800469c:	616b      	str	r3, [r5, #20]
 800469e:	612b      	str	r3, [r5, #16]
 80046a0:	60d9      	str	r1, [r3, #12]
 80046a2:	6099      	str	r1, [r3, #8]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	f846 a000 	str.w	sl, [r6, r0]
 80046aa:	e6ff      	b.n	80044ac <_malloc_r+0x64>
 80046ac:	f1ba 0f00 	cmp.w	sl, #0
 80046b0:	db0f      	blt.n	80046d2 <_malloc_r+0x28a>
 80046b2:	4430      	add	r0, r6
 80046b4:	6843      	ldr	r3, [r0, #4]
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6043      	str	r3, [r0, #4]
 80046bc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80046c0:	4648      	mov	r0, r9
 80046c2:	60df      	str	r7, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	f000 f8df 	bl	8004888 <__malloc_unlock>
 80046ca:	4630      	mov	r0, r6
 80046cc:	b003      	add	sp, #12
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d2:	463e      	mov	r6, r7
 80046d4:	e77a      	b.n	80045cc <_malloc_r+0x184>
 80046d6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80046da:	4584      	cmp	ip, r0
 80046dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80046e0:	f43f af7d 	beq.w	80045de <_malloc_r+0x196>
 80046e4:	e781      	b.n	80045ea <_malloc_r+0x1a2>
 80046e6:	bf00      	nop
 80046e8:	20000100 	.word	0x20000100
 80046ec:	20000108 	.word	0x20000108
 80046f0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80046f4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80046f8:	f026 0603 	bic.w	r6, r6, #3
 80046fc:	42b4      	cmp	r4, r6
 80046fe:	d803      	bhi.n	8004708 <_malloc_r+0x2c0>
 8004700:	1b33      	subs	r3, r6, r4
 8004702:	2b0f      	cmp	r3, #15
 8004704:	f300 8096 	bgt.w	8004834 <_malloc_r+0x3ec>
 8004708:	4a4f      	ldr	r2, [pc, #316]	; (8004848 <_malloc_r+0x400>)
 800470a:	6817      	ldr	r7, [r2, #0]
 800470c:	4a4f      	ldr	r2, [pc, #316]	; (800484c <_malloc_r+0x404>)
 800470e:	6811      	ldr	r1, [r2, #0]
 8004710:	3710      	adds	r7, #16
 8004712:	3101      	adds	r1, #1
 8004714:	eb0b 0306 	add.w	r3, fp, r6
 8004718:	4427      	add	r7, r4
 800471a:	d005      	beq.n	8004728 <_malloc_r+0x2e0>
 800471c:	494c      	ldr	r1, [pc, #304]	; (8004850 <_malloc_r+0x408>)
 800471e:	3901      	subs	r1, #1
 8004720:	440f      	add	r7, r1
 8004722:	3101      	adds	r1, #1
 8004724:	4249      	negs	r1, r1
 8004726:	400f      	ands	r7, r1
 8004728:	4639      	mov	r1, r7
 800472a:	4648      	mov	r0, r9
 800472c:	9201      	str	r2, [sp, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	f000 fb80 	bl	8004e34 <_sbrk_r>
 8004734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004738:	4680      	mov	r8, r0
 800473a:	d056      	beq.n	80047ea <_malloc_r+0x3a2>
 800473c:	9b00      	ldr	r3, [sp, #0]
 800473e:	9a01      	ldr	r2, [sp, #4]
 8004740:	4283      	cmp	r3, r0
 8004742:	d901      	bls.n	8004748 <_malloc_r+0x300>
 8004744:	45ab      	cmp	fp, r5
 8004746:	d150      	bne.n	80047ea <_malloc_r+0x3a2>
 8004748:	4842      	ldr	r0, [pc, #264]	; (8004854 <_malloc_r+0x40c>)
 800474a:	6801      	ldr	r1, [r0, #0]
 800474c:	4543      	cmp	r3, r8
 800474e:	eb07 0e01 	add.w	lr, r7, r1
 8004752:	f8c0 e000 	str.w	lr, [r0]
 8004756:	4940      	ldr	r1, [pc, #256]	; (8004858 <_malloc_r+0x410>)
 8004758:	4682      	mov	sl, r0
 800475a:	d113      	bne.n	8004784 <_malloc_r+0x33c>
 800475c:	420b      	tst	r3, r1
 800475e:	d111      	bne.n	8004784 <_malloc_r+0x33c>
 8004760:	68ab      	ldr	r3, [r5, #8]
 8004762:	443e      	add	r6, r7
 8004764:	f046 0601 	orr.w	r6, r6, #1
 8004768:	605e      	str	r6, [r3, #4]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <_malloc_r+0x414>)
 800476c:	f8da 3000 	ldr.w	r3, [sl]
 8004770:	6811      	ldr	r1, [r2, #0]
 8004772:	428b      	cmp	r3, r1
 8004774:	bf88      	it	hi
 8004776:	6013      	strhi	r3, [r2, #0]
 8004778:	4a39      	ldr	r2, [pc, #228]	; (8004860 <_malloc_r+0x418>)
 800477a:	6811      	ldr	r1, [r2, #0]
 800477c:	428b      	cmp	r3, r1
 800477e:	bf88      	it	hi
 8004780:	6013      	strhi	r3, [r2, #0]
 8004782:	e032      	b.n	80047ea <_malloc_r+0x3a2>
 8004784:	6810      	ldr	r0, [r2, #0]
 8004786:	3001      	adds	r0, #1
 8004788:	bf1b      	ittet	ne
 800478a:	eba8 0303 	subne.w	r3, r8, r3
 800478e:	4473      	addne	r3, lr
 8004790:	f8c2 8000 	streq.w	r8, [r2]
 8004794:	f8ca 3000 	strne.w	r3, [sl]
 8004798:	f018 0007 	ands.w	r0, r8, #7
 800479c:	bf1c      	itt	ne
 800479e:	f1c0 0008 	rsbne	r0, r0, #8
 80047a2:	4480      	addne	r8, r0
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <_malloc_r+0x408>)
 80047a6:	4447      	add	r7, r8
 80047a8:	4418      	add	r0, r3
 80047aa:	400f      	ands	r7, r1
 80047ac:	1bc7      	subs	r7, r0, r7
 80047ae:	4639      	mov	r1, r7
 80047b0:	4648      	mov	r0, r9
 80047b2:	f000 fb3f 	bl	8004e34 <_sbrk_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	bf08      	it	eq
 80047ba:	4640      	moveq	r0, r8
 80047bc:	f8da 3000 	ldr.w	r3, [sl]
 80047c0:	f8c5 8008 	str.w	r8, [r5, #8]
 80047c4:	bf08      	it	eq
 80047c6:	2700      	moveq	r7, #0
 80047c8:	eba0 0008 	sub.w	r0, r0, r8
 80047cc:	443b      	add	r3, r7
 80047ce:	4407      	add	r7, r0
 80047d0:	f047 0701 	orr.w	r7, r7, #1
 80047d4:	45ab      	cmp	fp, r5
 80047d6:	f8ca 3000 	str.w	r3, [sl]
 80047da:	f8c8 7004 	str.w	r7, [r8, #4]
 80047de:	d0c4      	beq.n	800476a <_malloc_r+0x322>
 80047e0:	2e0f      	cmp	r6, #15
 80047e2:	d810      	bhi.n	8004806 <_malloc_r+0x3be>
 80047e4:	2301      	movs	r3, #1
 80047e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80047ea:	68ab      	ldr	r3, [r5, #8]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	f022 0203 	bic.w	r2, r2, #3
 80047f2:	4294      	cmp	r4, r2
 80047f4:	eba2 0304 	sub.w	r3, r2, r4
 80047f8:	d801      	bhi.n	80047fe <_malloc_r+0x3b6>
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	dc1a      	bgt.n	8004834 <_malloc_r+0x3ec>
 80047fe:	4648      	mov	r0, r9
 8004800:	f000 f842 	bl	8004888 <__malloc_unlock>
 8004804:	e62d      	b.n	8004462 <_malloc_r+0x1a>
 8004806:	f8db 3004 	ldr.w	r3, [fp, #4]
 800480a:	3e0c      	subs	r6, #12
 800480c:	f026 0607 	bic.w	r6, r6, #7
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	4333      	orrs	r3, r6
 8004816:	f8cb 3004 	str.w	r3, [fp, #4]
 800481a:	eb0b 0306 	add.w	r3, fp, r6
 800481e:	2205      	movs	r2, #5
 8004820:	2e0f      	cmp	r6, #15
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	609a      	str	r2, [r3, #8]
 8004826:	d9a0      	bls.n	800476a <_malloc_r+0x322>
 8004828:	f10b 0108 	add.w	r1, fp, #8
 800482c:	4648      	mov	r0, r9
 800482e:	f000 fc0f 	bl	8005050 <_free_r>
 8004832:	e79a      	b.n	800476a <_malloc_r+0x322>
 8004834:	68ae      	ldr	r6, [r5, #8]
 8004836:	f044 0201 	orr.w	r2, r4, #1
 800483a:	4434      	add	r4, r6
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6072      	str	r2, [r6, #4]
 8004842:	60ac      	str	r4, [r5, #8]
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	e631      	b.n	80044ac <_malloc_r+0x64>
 8004848:	200006c8 	.word	0x200006c8
 800484c:	20000508 	.word	0x20000508
 8004850:	00000080 	.word	0x00000080
 8004854:	20000698 	.word	0x20000698
 8004858:	0000007f 	.word	0x0000007f
 800485c:	200006c0 	.word	0x200006c0
 8004860:	200006c4 	.word	0x200006c4

08004864 <memcpy>:
 8004864:	b510      	push	{r4, lr}
 8004866:	1e43      	subs	r3, r0, #1
 8004868:	440a      	add	r2, r1
 800486a:	4291      	cmp	r1, r2
 800486c:	d100      	bne.n	8004870 <memcpy+0xc>
 800486e:	bd10      	pop	{r4, pc}
 8004870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004878:	e7f7      	b.n	800486a <memcpy+0x6>
	...

0800487c <__malloc_lock>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__malloc_lock+0x8>)
 800487e:	f000 bca3 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 8004882:	bf00      	nop
 8004884:	200007c8 	.word	0x200007c8

08004888 <__malloc_unlock>:
 8004888:	4801      	ldr	r0, [pc, #4]	; (8004890 <__malloc_unlock+0x8>)
 800488a:	f000 bc9e 	b.w	80051ca <__retarget_lock_release_recursive>
 800488e:	bf00      	nop
 8004890:	200007c8 	.word	0x200007c8

08004894 <_Balloc>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004898:	4604      	mov	r4, r0
 800489a:	460e      	mov	r6, r1
 800489c:	b93d      	cbnz	r5, 80048ae <_Balloc+0x1a>
 800489e:	2010      	movs	r0, #16
 80048a0:	f7ff fdca 	bl	8004438 <malloc>
 80048a4:	6260      	str	r0, [r4, #36]	; 0x24
 80048a6:	6045      	str	r5, [r0, #4]
 80048a8:	6085      	str	r5, [r0, #8]
 80048aa:	6005      	str	r5, [r0, #0]
 80048ac:	60c5      	str	r5, [r0, #12]
 80048ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048b0:	68eb      	ldr	r3, [r5, #12]
 80048b2:	b183      	cbz	r3, 80048d6 <_Balloc+0x42>
 80048b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048bc:	b9b8      	cbnz	r0, 80048ee <_Balloc+0x5a>
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f506 	lsl.w	r5, r1, r6
 80048c4:	1d6a      	adds	r2, r5, #5
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 fb3d 	bl	8004f48 <_calloc_r>
 80048ce:	b160      	cbz	r0, 80048ea <_Balloc+0x56>
 80048d0:	6046      	str	r6, [r0, #4]
 80048d2:	6085      	str	r5, [r0, #8]
 80048d4:	e00e      	b.n	80048f4 <_Balloc+0x60>
 80048d6:	2221      	movs	r2, #33	; 0x21
 80048d8:	2104      	movs	r1, #4
 80048da:	4620      	mov	r0, r4
 80048dc:	f000 fb34 	bl	8004f48 <_calloc_r>
 80048e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e2:	60e8      	str	r0, [r5, #12]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e4      	bne.n	80048b4 <_Balloc+0x20>
 80048ea:	2000      	movs	r0, #0
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	6802      	ldr	r2, [r0, #0]
 80048f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80048f4:	2300      	movs	r3, #0
 80048f6:	6103      	str	r3, [r0, #16]
 80048f8:	60c3      	str	r3, [r0, #12]
 80048fa:	bd70      	pop	{r4, r5, r6, pc}

080048fc <_Bfree>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004900:	4606      	mov	r6, r0
 8004902:	460d      	mov	r5, r1
 8004904:	b93c      	cbnz	r4, 8004916 <_Bfree+0x1a>
 8004906:	2010      	movs	r0, #16
 8004908:	f7ff fd96 	bl	8004438 <malloc>
 800490c:	6270      	str	r0, [r6, #36]	; 0x24
 800490e:	6044      	str	r4, [r0, #4]
 8004910:	6084      	str	r4, [r0, #8]
 8004912:	6004      	str	r4, [r0, #0]
 8004914:	60c4      	str	r4, [r0, #12]
 8004916:	b13d      	cbz	r5, 8004928 <_Bfree+0x2c>
 8004918:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800491a:	686a      	ldr	r2, [r5, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004922:	6029      	str	r1, [r5, #0]
 8004924:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004928:	bd70      	pop	{r4, r5, r6, pc}

0800492a <__multadd>:
 800492a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492e:	690d      	ldr	r5, [r1, #16]
 8004930:	461f      	mov	r7, r3
 8004932:	4606      	mov	r6, r0
 8004934:	460c      	mov	r4, r1
 8004936:	f101 0e14 	add.w	lr, r1, #20
 800493a:	2300      	movs	r3, #0
 800493c:	f8de 0000 	ldr.w	r0, [lr]
 8004940:	b281      	uxth	r1, r0
 8004942:	fb02 7101 	mla	r1, r2, r1, r7
 8004946:	0c0f      	lsrs	r7, r1, #16
 8004948:	0c00      	lsrs	r0, r0, #16
 800494a:	fb02 7000 	mla	r0, r2, r0, r7
 800494e:	b289      	uxth	r1, r1
 8004950:	3301      	adds	r3, #1
 8004952:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004956:	429d      	cmp	r5, r3
 8004958:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800495c:	f84e 1b04 	str.w	r1, [lr], #4
 8004960:	dcec      	bgt.n	800493c <__multadd+0x12>
 8004962:	b1d7      	cbz	r7, 800499a <__multadd+0x70>
 8004964:	68a3      	ldr	r3, [r4, #8]
 8004966:	429d      	cmp	r5, r3
 8004968:	db12      	blt.n	8004990 <__multadd+0x66>
 800496a:	6861      	ldr	r1, [r4, #4]
 800496c:	4630      	mov	r0, r6
 800496e:	3101      	adds	r1, #1
 8004970:	f7ff ff90 	bl	8004894 <_Balloc>
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	3202      	adds	r2, #2
 8004978:	f104 010c 	add.w	r1, r4, #12
 800497c:	4680      	mov	r8, r0
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	300c      	adds	r0, #12
 8004982:	f7ff ff6f 	bl	8004864 <memcpy>
 8004986:	4621      	mov	r1, r4
 8004988:	4630      	mov	r0, r6
 800498a:	f7ff ffb7 	bl	80048fc <_Bfree>
 800498e:	4644      	mov	r4, r8
 8004990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004994:	3501      	adds	r5, #1
 8004996:	615f      	str	r7, [r3, #20]
 8004998:	6125      	str	r5, [r4, #16]
 800499a:	4620      	mov	r0, r4
 800499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049a0 <__hi0bits>:
 80049a0:	0c02      	lsrs	r2, r0, #16
 80049a2:	0412      	lsls	r2, r2, #16
 80049a4:	4603      	mov	r3, r0
 80049a6:	b9b2      	cbnz	r2, 80049d6 <__hi0bits+0x36>
 80049a8:	0403      	lsls	r3, r0, #16
 80049aa:	2010      	movs	r0, #16
 80049ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049b0:	bf04      	itt	eq
 80049b2:	021b      	lsleq	r3, r3, #8
 80049b4:	3008      	addeq	r0, #8
 80049b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049ba:	bf04      	itt	eq
 80049bc:	011b      	lsleq	r3, r3, #4
 80049be:	3004      	addeq	r0, #4
 80049c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049c4:	bf04      	itt	eq
 80049c6:	009b      	lsleq	r3, r3, #2
 80049c8:	3002      	addeq	r0, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db06      	blt.n	80049dc <__hi0bits+0x3c>
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	d503      	bpl.n	80049da <__hi0bits+0x3a>
 80049d2:	3001      	adds	r0, #1
 80049d4:	4770      	bx	lr
 80049d6:	2000      	movs	r0, #0
 80049d8:	e7e8      	b.n	80049ac <__hi0bits+0xc>
 80049da:	2020      	movs	r0, #32
 80049dc:	4770      	bx	lr

080049de <__lo0bits>:
 80049de:	6803      	ldr	r3, [r0, #0]
 80049e0:	f013 0207 	ands.w	r2, r3, #7
 80049e4:	4601      	mov	r1, r0
 80049e6:	d00b      	beq.n	8004a00 <__lo0bits+0x22>
 80049e8:	07da      	lsls	r2, r3, #31
 80049ea:	d423      	bmi.n	8004a34 <__lo0bits+0x56>
 80049ec:	0798      	lsls	r0, r3, #30
 80049ee:	bf49      	itett	mi
 80049f0:	085b      	lsrmi	r3, r3, #1
 80049f2:	089b      	lsrpl	r3, r3, #2
 80049f4:	2001      	movmi	r0, #1
 80049f6:	600b      	strmi	r3, [r1, #0]
 80049f8:	bf5c      	itt	pl
 80049fa:	600b      	strpl	r3, [r1, #0]
 80049fc:	2002      	movpl	r0, #2
 80049fe:	4770      	bx	lr
 8004a00:	b298      	uxth	r0, r3
 8004a02:	b9a8      	cbnz	r0, 8004a30 <__lo0bits+0x52>
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	2010      	movs	r0, #16
 8004a08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a0c:	bf04      	itt	eq
 8004a0e:	0a1b      	lsreq	r3, r3, #8
 8004a10:	3008      	addeq	r0, #8
 8004a12:	071a      	lsls	r2, r3, #28
 8004a14:	bf04      	itt	eq
 8004a16:	091b      	lsreq	r3, r3, #4
 8004a18:	3004      	addeq	r0, #4
 8004a1a:	079a      	lsls	r2, r3, #30
 8004a1c:	bf04      	itt	eq
 8004a1e:	089b      	lsreq	r3, r3, #2
 8004a20:	3002      	addeq	r0, #2
 8004a22:	07da      	lsls	r2, r3, #31
 8004a24:	d402      	bmi.n	8004a2c <__lo0bits+0x4e>
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	d006      	beq.n	8004a38 <__lo0bits+0x5a>
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	600b      	str	r3, [r1, #0]
 8004a2e:	4770      	bx	lr
 8004a30:	4610      	mov	r0, r2
 8004a32:	e7e9      	b.n	8004a08 <__lo0bits+0x2a>
 8004a34:	2000      	movs	r0, #0
 8004a36:	4770      	bx	lr
 8004a38:	2020      	movs	r0, #32
 8004a3a:	4770      	bx	lr

08004a3c <__i2b>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	460c      	mov	r4, r1
 8004a40:	2101      	movs	r1, #1
 8004a42:	f7ff ff27 	bl	8004894 <_Balloc>
 8004a46:	2201      	movs	r2, #1
 8004a48:	6144      	str	r4, [r0, #20]
 8004a4a:	6102      	str	r2, [r0, #16]
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <__multiply>:
 8004a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a52:	4614      	mov	r4, r2
 8004a54:	690a      	ldr	r2, [r1, #16]
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bfb8      	it	lt
 8004a5c:	460b      	movlt	r3, r1
 8004a5e:	4689      	mov	r9, r1
 8004a60:	bfbc      	itt	lt
 8004a62:	46a1      	movlt	r9, r4
 8004a64:	461c      	movlt	r4, r3
 8004a66:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004a6a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a6e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004a72:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a76:	eb07 060a 	add.w	r6, r7, sl
 8004a7a:	429e      	cmp	r6, r3
 8004a7c:	bfc8      	it	gt
 8004a7e:	3101      	addgt	r1, #1
 8004a80:	f7ff ff08 	bl	8004894 <_Balloc>
 8004a84:	f100 0514 	add.w	r5, r0, #20
 8004a88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	2200      	movs	r2, #0
 8004a90:	4543      	cmp	r3, r8
 8004a92:	d316      	bcc.n	8004ac2 <__multiply+0x74>
 8004a94:	f104 0214 	add.w	r2, r4, #20
 8004a98:	f109 0114 	add.w	r1, r9, #20
 8004a9c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004aa0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	9c01      	ldr	r4, [sp, #4]
 8004aa8:	4294      	cmp	r4, r2
 8004aaa:	4613      	mov	r3, r2
 8004aac:	d80c      	bhi.n	8004ac8 <__multiply+0x7a>
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	dd03      	ble.n	8004aba <__multiply+0x6c>
 8004ab2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d054      	beq.n	8004b64 <__multiply+0x116>
 8004aba:	6106      	str	r6, [r0, #16]
 8004abc:	b003      	add	sp, #12
 8004abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac2:	f843 2b04 	str.w	r2, [r3], #4
 8004ac6:	e7e3      	b.n	8004a90 <__multiply+0x42>
 8004ac8:	f8b3 a000 	ldrh.w	sl, [r3]
 8004acc:	3204      	adds	r2, #4
 8004ace:	f1ba 0f00 	cmp.w	sl, #0
 8004ad2:	d020      	beq.n	8004b16 <__multiply+0xc8>
 8004ad4:	46ae      	mov	lr, r5
 8004ad6:	4689      	mov	r9, r1
 8004ad8:	f04f 0c00 	mov.w	ip, #0
 8004adc:	f859 4b04 	ldr.w	r4, [r9], #4
 8004ae0:	f8be b000 	ldrh.w	fp, [lr]
 8004ae4:	b2a3      	uxth	r3, r4
 8004ae6:	fb0a b303 	mla	r3, sl, r3, fp
 8004aea:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004aee:	f8de 4000 	ldr.w	r4, [lr]
 8004af2:	4463      	add	r3, ip
 8004af4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004af8:	fb0a c40b 	mla	r4, sl, fp, ip
 8004afc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b06:	454f      	cmp	r7, r9
 8004b08:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004b0c:	f84e 3b04 	str.w	r3, [lr], #4
 8004b10:	d8e4      	bhi.n	8004adc <__multiply+0x8e>
 8004b12:	f8ce c000 	str.w	ip, [lr]
 8004b16:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004b1a:	f1b9 0f00 	cmp.w	r9, #0
 8004b1e:	d01f      	beq.n	8004b60 <__multiply+0x112>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	46ae      	mov	lr, r5
 8004b24:	468c      	mov	ip, r1
 8004b26:	f04f 0a00 	mov.w	sl, #0
 8004b2a:	f8bc 4000 	ldrh.w	r4, [ip]
 8004b2e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004b32:	fb09 b404 	mla	r4, r9, r4, fp
 8004b36:	44a2      	add	sl, r4
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004b3e:	f84e 3b04 	str.w	r3, [lr], #4
 8004b42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b46:	f8be 4000 	ldrh.w	r4, [lr]
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	fb09 4303 	mla	r3, r9, r3, r4
 8004b50:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004b54:	4567      	cmp	r7, ip
 8004b56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b5a:	d8e6      	bhi.n	8004b2a <__multiply+0xdc>
 8004b5c:	f8ce 3000 	str.w	r3, [lr]
 8004b60:	3504      	adds	r5, #4
 8004b62:	e7a0      	b.n	8004aa6 <__multiply+0x58>
 8004b64:	3e01      	subs	r6, #1
 8004b66:	e7a2      	b.n	8004aae <__multiply+0x60>

08004b68 <__pow5mult>:
 8004b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	f012 0203 	ands.w	r2, r2, #3
 8004b72:	4606      	mov	r6, r0
 8004b74:	460f      	mov	r7, r1
 8004b76:	d007      	beq.n	8004b88 <__pow5mult+0x20>
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	4c21      	ldr	r4, [pc, #132]	; (8004c00 <__pow5mult+0x98>)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b82:	f7ff fed2 	bl	800492a <__multadd>
 8004b86:	4607      	mov	r7, r0
 8004b88:	10ad      	asrs	r5, r5, #2
 8004b8a:	d035      	beq.n	8004bf8 <__pow5mult+0x90>
 8004b8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b8e:	b93c      	cbnz	r4, 8004ba0 <__pow5mult+0x38>
 8004b90:	2010      	movs	r0, #16
 8004b92:	f7ff fc51 	bl	8004438 <malloc>
 8004b96:	6270      	str	r0, [r6, #36]	; 0x24
 8004b98:	6044      	str	r4, [r0, #4]
 8004b9a:	6084      	str	r4, [r0, #8]
 8004b9c:	6004      	str	r4, [r0, #0]
 8004b9e:	60c4      	str	r4, [r0, #12]
 8004ba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ba8:	b94c      	cbnz	r4, 8004bbe <__pow5mult+0x56>
 8004baa:	f240 2171 	movw	r1, #625	; 0x271
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff ff44 	bl	8004a3c <__i2b>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bba:	4604      	mov	r4, r0
 8004bbc:	6003      	str	r3, [r0, #0]
 8004bbe:	f04f 0800 	mov.w	r8, #0
 8004bc2:	07eb      	lsls	r3, r5, #31
 8004bc4:	d50a      	bpl.n	8004bdc <__pow5mult+0x74>
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ff3f 	bl	8004a4e <__multiply>
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4681      	mov	r9, r0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff fe91 	bl	80048fc <_Bfree>
 8004bda:	464f      	mov	r7, r9
 8004bdc:	106d      	asrs	r5, r5, #1
 8004bde:	d00b      	beq.n	8004bf8 <__pow5mult+0x90>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	b938      	cbnz	r0, 8004bf4 <__pow5mult+0x8c>
 8004be4:	4622      	mov	r2, r4
 8004be6:	4621      	mov	r1, r4
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7ff ff30 	bl	8004a4e <__multiply>
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	f8c0 8000 	str.w	r8, [r0]
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	e7e4      	b.n	8004bc2 <__pow5mult+0x5a>
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bfe:	bf00      	nop
 8004c00:	08005728 	.word	0x08005728

08004c04 <__lshift>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	460c      	mov	r4, r1
 8004c0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	6849      	ldr	r1, [r1, #4]
 8004c12:	eb0a 0903 	add.w	r9, sl, r3
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	4607      	mov	r7, r0
 8004c1a:	4616      	mov	r6, r2
 8004c1c:	f109 0501 	add.w	r5, r9, #1
 8004c20:	42ab      	cmp	r3, r5
 8004c22:	db31      	blt.n	8004c88 <__lshift+0x84>
 8004c24:	4638      	mov	r0, r7
 8004c26:	f7ff fe35 	bl	8004894 <_Balloc>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	f100 0314 	add.w	r3, r0, #20
 8004c32:	4611      	mov	r1, r2
 8004c34:	4552      	cmp	r2, sl
 8004c36:	db2a      	blt.n	8004c8e <__lshift+0x8a>
 8004c38:	6920      	ldr	r0, [r4, #16]
 8004c3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c3e:	f104 0114 	add.w	r1, r4, #20
 8004c42:	f016 021f 	ands.w	r2, r6, #31
 8004c46:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004c4a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004c4e:	d022      	beq.n	8004c96 <__lshift+0x92>
 8004c50:	f1c2 0c20 	rsb	ip, r2, #32
 8004c54:	2000      	movs	r0, #0
 8004c56:	680e      	ldr	r6, [r1, #0]
 8004c58:	4096      	lsls	r6, r2
 8004c5a:	4330      	orrs	r0, r6
 8004c5c:	f843 0b04 	str.w	r0, [r3], #4
 8004c60:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c64:	458e      	cmp	lr, r1
 8004c66:	fa20 f00c 	lsr.w	r0, r0, ip
 8004c6a:	d8f4      	bhi.n	8004c56 <__lshift+0x52>
 8004c6c:	6018      	str	r0, [r3, #0]
 8004c6e:	b108      	cbz	r0, 8004c74 <__lshift+0x70>
 8004c70:	f109 0502 	add.w	r5, r9, #2
 8004c74:	3d01      	subs	r5, #1
 8004c76:	4638      	mov	r0, r7
 8004c78:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	f7ff fe3d 	bl	80048fc <_Bfree>
 8004c82:	4640      	mov	r0, r8
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	3101      	adds	r1, #1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	e7c8      	b.n	8004c20 <__lshift+0x1c>
 8004c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c92:	3201      	adds	r2, #1
 8004c94:	e7ce      	b.n	8004c34 <__lshift+0x30>
 8004c96:	3b04      	subs	r3, #4
 8004c98:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c9c:	f843 2f04 	str.w	r2, [r3, #4]!
 8004ca0:	458e      	cmp	lr, r1
 8004ca2:	d8f9      	bhi.n	8004c98 <__lshift+0x94>
 8004ca4:	e7e6      	b.n	8004c74 <__lshift+0x70>

08004ca6 <__mcmp>:
 8004ca6:	6903      	ldr	r3, [r0, #16]
 8004ca8:	690a      	ldr	r2, [r1, #16]
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	b530      	push	{r4, r5, lr}
 8004cae:	d10c      	bne.n	8004cca <__mcmp+0x24>
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	3014      	adds	r0, #20
 8004cb4:	3114      	adds	r1, #20
 8004cb6:	1884      	adds	r4, r0, r2
 8004cb8:	4411      	add	r1, r2
 8004cba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cbe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cc2:	4295      	cmp	r5, r2
 8004cc4:	d003      	beq.n	8004cce <__mcmp+0x28>
 8004cc6:	d305      	bcc.n	8004cd4 <__mcmp+0x2e>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	bd30      	pop	{r4, r5, pc}
 8004cce:	42a0      	cmp	r0, r4
 8004cd0:	d3f3      	bcc.n	8004cba <__mcmp+0x14>
 8004cd2:	e7fa      	b.n	8004cca <__mcmp+0x24>
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd8:	e7f7      	b.n	8004cca <__mcmp+0x24>

08004cda <__mdiff>:
 8004cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cde:	460d      	mov	r5, r1
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	f7ff ffdd 	bl	8004ca6 <__mcmp>
 8004cec:	1e06      	subs	r6, r0, #0
 8004cee:	d108      	bne.n	8004d02 <__mdiff+0x28>
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	f7ff fdce 	bl	8004894 <_Balloc>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	6103      	str	r3, [r0, #16]
 8004cfc:	6146      	str	r6, [r0, #20]
 8004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d02:	bfa4      	itt	ge
 8004d04:	4623      	movge	r3, r4
 8004d06:	462c      	movge	r4, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	6861      	ldr	r1, [r4, #4]
 8004d0c:	bfa6      	itte	ge
 8004d0e:	461d      	movge	r5, r3
 8004d10:	2600      	movge	r6, #0
 8004d12:	2601      	movlt	r6, #1
 8004d14:	f7ff fdbe 	bl	8004894 <_Balloc>
 8004d18:	692b      	ldr	r3, [r5, #16]
 8004d1a:	60c6      	str	r6, [r0, #12]
 8004d1c:	6926      	ldr	r6, [r4, #16]
 8004d1e:	f105 0914 	add.w	r9, r5, #20
 8004d22:	f104 0214 	add.w	r2, r4, #20
 8004d26:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d2a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d2e:	f100 0514 	add.w	r5, r0, #20
 8004d32:	f04f 0c00 	mov.w	ip, #0
 8004d36:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8004d3e:	fa1c f18a 	uxtah	r1, ip, sl
 8004d42:	b2a3      	uxth	r3, r4
 8004d44:	1ac9      	subs	r1, r1, r3
 8004d46:	0c23      	lsrs	r3, r4, #16
 8004d48:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004d4c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d50:	b289      	uxth	r1, r1
 8004d52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d56:	45c8      	cmp	r8, r9
 8004d58:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d5c:	4696      	mov	lr, r2
 8004d5e:	f845 3b04 	str.w	r3, [r5], #4
 8004d62:	d8e8      	bhi.n	8004d36 <__mdiff+0x5c>
 8004d64:	45be      	cmp	lr, r7
 8004d66:	d305      	bcc.n	8004d74 <__mdiff+0x9a>
 8004d68:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d6c:	b18b      	cbz	r3, 8004d92 <__mdiff+0xb8>
 8004d6e:	6106      	str	r6, [r0, #16]
 8004d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d74:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d78:	fa1c f381 	uxtah	r3, ip, r1
 8004d7c:	141a      	asrs	r2, r3, #16
 8004d7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d8c:	f845 3b04 	str.w	r3, [r5], #4
 8004d90:	e7e8      	b.n	8004d64 <__mdiff+0x8a>
 8004d92:	3e01      	subs	r6, #1
 8004d94:	e7e8      	b.n	8004d68 <__mdiff+0x8e>

08004d96 <__d2b>:
 8004d96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	ec59 8b10 	vmov	r8, r9, d0
 8004da2:	4615      	mov	r5, r2
 8004da4:	f7ff fd76 	bl	8004894 <_Balloc>
 8004da8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004dac:	4607      	mov	r7, r0
 8004dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004db2:	bb34      	cbnz	r4, 8004e02 <__d2b+0x6c>
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	f1b8 0f00 	cmp.w	r8, #0
 8004dba:	d027      	beq.n	8004e0c <__d2b+0x76>
 8004dbc:	a802      	add	r0, sp, #8
 8004dbe:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004dc2:	f7ff fe0c 	bl	80049de <__lo0bits>
 8004dc6:	9900      	ldr	r1, [sp, #0]
 8004dc8:	b1f0      	cbz	r0, 8004e08 <__d2b+0x72>
 8004dca:	9a01      	ldr	r2, [sp, #4]
 8004dcc:	f1c0 0320 	rsb	r3, r0, #32
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	40c2      	lsrs	r2, r0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	9b01      	ldr	r3, [sp, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2102      	movne	r1, #2
 8004de6:	2101      	moveq	r1, #1
 8004de8:	6139      	str	r1, [r7, #16]
 8004dea:	b1c4      	cbz	r4, 8004e1e <__d2b+0x88>
 8004dec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004df0:	4404      	add	r4, r0
 8004df2:	6034      	str	r4, [r6, #0]
 8004df4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004df8:	6028      	str	r0, [r5, #0]
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	b003      	add	sp, #12
 8004dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	e7d5      	b.n	8004db4 <__d2b+0x1e>
 8004e08:	6179      	str	r1, [r7, #20]
 8004e0a:	e7e7      	b.n	8004ddc <__d2b+0x46>
 8004e0c:	a801      	add	r0, sp, #4
 8004e0e:	f7ff fde6 	bl	80049de <__lo0bits>
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	2101      	movs	r1, #1
 8004e18:	6139      	str	r1, [r7, #16]
 8004e1a:	3020      	adds	r0, #32
 8004e1c:	e7e5      	b.n	8004dea <__d2b+0x54>
 8004e1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e26:	6030      	str	r0, [r6, #0]
 8004e28:	6918      	ldr	r0, [r3, #16]
 8004e2a:	f7ff fdb9 	bl	80049a0 <__hi0bits>
 8004e2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e32:	e7e1      	b.n	8004df8 <__d2b+0x62>

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4c06      	ldr	r4, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f000 fb86 	bl	8005550 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200007d0 	.word	0x200007d0

08004e54 <__ssprint_r>:
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	4681      	mov	r9, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4617      	mov	r7, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d060      	beq.n	8004f26 <__ssprint_r+0xd2>
 8004e64:	f04f 0b00 	mov.w	fp, #0
 8004e68:	f8d2 a000 	ldr.w	sl, [r2]
 8004e6c:	465e      	mov	r6, fp
 8004e6e:	b356      	cbz	r6, 8004ec6 <__ssprint_r+0x72>
 8004e70:	68a3      	ldr	r3, [r4, #8]
 8004e72:	429e      	cmp	r6, r3
 8004e74:	d344      	bcc.n	8004f00 <__ssprint_r+0xac>
 8004e76:	89a2      	ldrh	r2, [r4, #12]
 8004e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e7c:	d03e      	beq.n	8004efc <__ssprint_r+0xa8>
 8004e7e:	6825      	ldr	r5, [r4, #0]
 8004e80:	6921      	ldr	r1, [r4, #16]
 8004e82:	eba5 0801 	sub.w	r8, r5, r1
 8004e86:	6965      	ldr	r5, [r4, #20]
 8004e88:	2302      	movs	r3, #2
 8004e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e8e:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e92:	f108 0301 	add.w	r3, r8, #1
 8004e96:	4433      	add	r3, r6
 8004e98:	429d      	cmp	r5, r3
 8004e9a:	bf38      	it	cc
 8004e9c:	461d      	movcc	r5, r3
 8004e9e:	0553      	lsls	r3, r2, #21
 8004ea0:	d546      	bpl.n	8004f30 <__ssprint_r+0xdc>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4648      	mov	r0, r9
 8004ea6:	f7ff facf 	bl	8004448 <_malloc_r>
 8004eaa:	b998      	cbnz	r0, 8004ed4 <__ssprint_r+0x80>
 8004eac:	230c      	movs	r3, #12
 8004eae:	f8c9 3000 	str.w	r3, [r9]
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e031      	b.n	8004f2a <__ssprint_r+0xd6>
 8004ec6:	f8da b000 	ldr.w	fp, [sl]
 8004eca:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004ece:	f10a 0a08 	add.w	sl, sl, #8
 8004ed2:	e7cc      	b.n	8004e6e <__ssprint_r+0x1a>
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	6921      	ldr	r1, [r4, #16]
 8004ed8:	9001      	str	r0, [sp, #4]
 8004eda:	f7ff fcc3 	bl	8004864 <memcpy>
 8004ede:	89a2      	ldrh	r2, [r4, #12]
 8004ee0:	9b01      	ldr	r3, [sp, #4]
 8004ee2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eea:	81a2      	strh	r2, [r4, #12]
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	6165      	str	r5, [r4, #20]
 8004ef0:	4443      	add	r3, r8
 8004ef2:	eba5 0508 	sub.w	r5, r5, r8
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	60a5      	str	r5, [r4, #8]
 8004efa:	4633      	mov	r3, r6
 8004efc:	429e      	cmp	r6, r3
 8004efe:	d200      	bcs.n	8004f02 <__ssprint_r+0xae>
 8004f00:	4633      	mov	r3, r6
 8004f02:	461a      	mov	r2, r3
 8004f04:	4659      	mov	r1, fp
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	f000 f971 	bl	80051f0 <memmove>
 8004f0e:	68a2      	ldr	r2, [r4, #8]
 8004f10:	9b01      	ldr	r3, [sp, #4]
 8004f12:	1ad2      	subs	r2, r2, r3
 8004f14:	60a2      	str	r2, [r4, #8]
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1b9e      	subs	r6, r3, r6
 8004f20:	60be      	str	r6, [r7, #8]
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d1cf      	bne.n	8004ec6 <__ssprint_r+0x72>
 8004f26:	2000      	movs	r0, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	b003      	add	sp, #12
 8004f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f30:	462a      	mov	r2, r5
 8004f32:	4648      	mov	r0, r9
 8004f34:	f000 f97e 	bl	8005234 <_realloc_r>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1d6      	bne.n	8004eec <__ssprint_r+0x98>
 8004f3e:	6921      	ldr	r1, [r4, #16]
 8004f40:	4648      	mov	r0, r9
 8004f42:	f000 f885 	bl	8005050 <_free_r>
 8004f46:	e7b1      	b.n	8004eac <__ssprint_r+0x58>

08004f48 <_calloc_r>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4351      	muls	r1, r2
 8004f4c:	f7ff fa7c 	bl	8004448 <_malloc_r>
 8004f50:	4604      	mov	r4, r0
 8004f52:	b198      	cbz	r0, 8004f7c <_calloc_r+0x34>
 8004f54:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004f58:	f022 0203 	bic.w	r2, r2, #3
 8004f5c:	3a04      	subs	r2, #4
 8004f5e:	2a24      	cmp	r2, #36	; 0x24
 8004f60:	d81b      	bhi.n	8004f9a <_calloc_r+0x52>
 8004f62:	2a13      	cmp	r2, #19
 8004f64:	d917      	bls.n	8004f96 <_calloc_r+0x4e>
 8004f66:	2100      	movs	r1, #0
 8004f68:	2a1b      	cmp	r2, #27
 8004f6a:	6001      	str	r1, [r0, #0]
 8004f6c:	6041      	str	r1, [r0, #4]
 8004f6e:	d807      	bhi.n	8004f80 <_calloc_r+0x38>
 8004f70:	f100 0308 	add.w	r3, r0, #8
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	bd10      	pop	{r4, pc}
 8004f80:	2a24      	cmp	r2, #36	; 0x24
 8004f82:	6081      	str	r1, [r0, #8]
 8004f84:	60c1      	str	r1, [r0, #12]
 8004f86:	bf11      	iteee	ne
 8004f88:	f100 0310 	addne.w	r3, r0, #16
 8004f8c:	6101      	streq	r1, [r0, #16]
 8004f8e:	f100 0318 	addeq.w	r3, r0, #24
 8004f92:	6141      	streq	r1, [r0, #20]
 8004f94:	e7ee      	b.n	8004f74 <_calloc_r+0x2c>
 8004f96:	4603      	mov	r3, r0
 8004f98:	e7ec      	b.n	8004f74 <_calloc_r+0x2c>
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	f000 f942 	bl	8005224 <memset>
 8004fa0:	e7ec      	b.n	8004f7c <_calloc_r+0x34>
	...

08004fa4 <_malloc_trim_r>:
 8004fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa8:	4f25      	ldr	r7, [pc, #148]	; (8005040 <_malloc_trim_r+0x9c>)
 8004faa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800504c <_malloc_trim_r+0xa8>
 8004fae:	4689      	mov	r9, r1
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	f7ff fc63 	bl	800487c <__malloc_lock>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	685d      	ldr	r5, [r3, #4]
 8004fba:	f1a8 0411 	sub.w	r4, r8, #17
 8004fbe:	f025 0503 	bic.w	r5, r5, #3
 8004fc2:	eba4 0409 	sub.w	r4, r4, r9
 8004fc6:	442c      	add	r4, r5
 8004fc8:	fbb4 f4f8 	udiv	r4, r4, r8
 8004fcc:	3c01      	subs	r4, #1
 8004fce:	fb08 f404 	mul.w	r4, r8, r4
 8004fd2:	4544      	cmp	r4, r8
 8004fd4:	da05      	bge.n	8004fe2 <_malloc_trim_r+0x3e>
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f7ff fc56 	bl	8004888 <__malloc_unlock>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff ff25 	bl	8004e34 <_sbrk_r>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	442b      	add	r3, r5
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	d1f1      	bne.n	8004fd6 <_malloc_trim_r+0x32>
 8004ff2:	4261      	negs	r1, r4
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f7ff ff1d 	bl	8004e34 <_sbrk_r>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d110      	bne.n	8005020 <_malloc_trim_r+0x7c>
 8004ffe:	2100      	movs	r1, #0
 8005000:	4630      	mov	r0, r6
 8005002:	f7ff ff17 	bl	8004e34 <_sbrk_r>
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	1a83      	subs	r3, r0, r2
 800500a:	2b0f      	cmp	r3, #15
 800500c:	dde3      	ble.n	8004fd6 <_malloc_trim_r+0x32>
 800500e:	490d      	ldr	r1, [pc, #52]	; (8005044 <_malloc_trim_r+0xa0>)
 8005010:	6809      	ldr	r1, [r1, #0]
 8005012:	1a40      	subs	r0, r0, r1
 8005014:	490c      	ldr	r1, [pc, #48]	; (8005048 <_malloc_trim_r+0xa4>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6008      	str	r0, [r1, #0]
 800501c:	6053      	str	r3, [r2, #4]
 800501e:	e7da      	b.n	8004fd6 <_malloc_trim_r+0x32>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a09      	ldr	r2, [pc, #36]	; (8005048 <_malloc_trim_r+0xa4>)
 8005024:	1b2d      	subs	r5, r5, r4
 8005026:	f045 0501 	orr.w	r5, r5, #1
 800502a:	605d      	str	r5, [r3, #4]
 800502c:	6813      	ldr	r3, [r2, #0]
 800502e:	4630      	mov	r0, r6
 8005030:	1b1c      	subs	r4, r3, r4
 8005032:	6014      	str	r4, [r2, #0]
 8005034:	f7ff fc28 	bl	8004888 <__malloc_unlock>
 8005038:	2001      	movs	r0, #1
 800503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503e:	bf00      	nop
 8005040:	20000100 	.word	0x20000100
 8005044:	20000508 	.word	0x20000508
 8005048:	20000698 	.word	0x20000698
 800504c:	00000080 	.word	0x00000080

08005050 <_free_r>:
 8005050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	4688      	mov	r8, r1
 8005058:	2900      	cmp	r1, #0
 800505a:	f000 80ab 	beq.w	80051b4 <_free_r+0x164>
 800505e:	f7ff fc0d 	bl	800487c <__malloc_lock>
 8005062:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005066:	4d54      	ldr	r5, [pc, #336]	; (80051b8 <_free_r+0x168>)
 8005068:	f022 0001 	bic.w	r0, r2, #1
 800506c:	f1a8 0308 	sub.w	r3, r8, #8
 8005070:	181f      	adds	r7, r3, r0
 8005072:	68a9      	ldr	r1, [r5, #8]
 8005074:	687e      	ldr	r6, [r7, #4]
 8005076:	428f      	cmp	r7, r1
 8005078:	f026 0603 	bic.w	r6, r6, #3
 800507c:	f002 0201 	and.w	r2, r2, #1
 8005080:	d11b      	bne.n	80050ba <_free_r+0x6a>
 8005082:	4430      	add	r0, r6
 8005084:	b93a      	cbnz	r2, 8005096 <_free_r+0x46>
 8005086:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	4410      	add	r0, r2
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	60ca      	str	r2, [r1, #12]
 8005094:	6091      	str	r1, [r2, #8]
 8005096:	f040 0201 	orr.w	r2, r0, #1
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	60ab      	str	r3, [r5, #8]
 800509e:	4b47      	ldr	r3, [pc, #284]	; (80051bc <_free_r+0x16c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4298      	cmp	r0, r3
 80050a4:	d304      	bcc.n	80050b0 <_free_r+0x60>
 80050a6:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <_free_r+0x170>)
 80050a8:	4620      	mov	r0, r4
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	f7ff ff7a 	bl	8004fa4 <_malloc_trim_r>
 80050b0:	4620      	mov	r0, r4
 80050b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	f7ff bbe7 	b.w	8004888 <__malloc_unlock>
 80050ba:	607e      	str	r6, [r7, #4]
 80050bc:	2a00      	cmp	r2, #0
 80050be:	d139      	bne.n	8005134 <_free_r+0xe4>
 80050c0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80050c4:	1a5b      	subs	r3, r3, r1
 80050c6:	4408      	add	r0, r1
 80050c8:	6899      	ldr	r1, [r3, #8]
 80050ca:	f105 0e08 	add.w	lr, r5, #8
 80050ce:	4571      	cmp	r1, lr
 80050d0:	d032      	beq.n	8005138 <_free_r+0xe8>
 80050d2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80050d6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80050da:	f8ce 1008 	str.w	r1, [lr, #8]
 80050de:	19b9      	adds	r1, r7, r6
 80050e0:	6849      	ldr	r1, [r1, #4]
 80050e2:	07c9      	lsls	r1, r1, #31
 80050e4:	d40a      	bmi.n	80050fc <_free_r+0xac>
 80050e6:	4430      	add	r0, r6
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	bb3a      	cbnz	r2, 800513c <_free_r+0xec>
 80050ec:	4e35      	ldr	r6, [pc, #212]	; (80051c4 <_free_r+0x174>)
 80050ee:	42b1      	cmp	r1, r6
 80050f0:	d124      	bne.n	800513c <_free_r+0xec>
 80050f2:	616b      	str	r3, [r5, #20]
 80050f4:	612b      	str	r3, [r5, #16]
 80050f6:	2201      	movs	r2, #1
 80050f8:	60d9      	str	r1, [r3, #12]
 80050fa:	6099      	str	r1, [r3, #8]
 80050fc:	f040 0101 	orr.w	r1, r0, #1
 8005100:	6059      	str	r1, [r3, #4]
 8005102:	5018      	str	r0, [r3, r0]
 8005104:	2a00      	cmp	r2, #0
 8005106:	d1d3      	bne.n	80050b0 <_free_r+0x60>
 8005108:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800510c:	d21a      	bcs.n	8005144 <_free_r+0xf4>
 800510e:	08c0      	lsrs	r0, r0, #3
 8005110:	1081      	asrs	r1, r0, #2
 8005112:	2201      	movs	r2, #1
 8005114:	408a      	lsls	r2, r1
 8005116:	6869      	ldr	r1, [r5, #4]
 8005118:	3001      	adds	r0, #1
 800511a:	430a      	orrs	r2, r1
 800511c:	606a      	str	r2, [r5, #4]
 800511e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005122:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005126:	6099      	str	r1, [r3, #8]
 8005128:	3a08      	subs	r2, #8
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005130:	60cb      	str	r3, [r1, #12]
 8005132:	e7bd      	b.n	80050b0 <_free_r+0x60>
 8005134:	2200      	movs	r2, #0
 8005136:	e7d2      	b.n	80050de <_free_r+0x8e>
 8005138:	2201      	movs	r2, #1
 800513a:	e7d0      	b.n	80050de <_free_r+0x8e>
 800513c:	68fe      	ldr	r6, [r7, #12]
 800513e:	60ce      	str	r6, [r1, #12]
 8005140:	60b1      	str	r1, [r6, #8]
 8005142:	e7db      	b.n	80050fc <_free_r+0xac>
 8005144:	0a42      	lsrs	r2, r0, #9
 8005146:	2a04      	cmp	r2, #4
 8005148:	d813      	bhi.n	8005172 <_free_r+0x122>
 800514a:	0982      	lsrs	r2, r0, #6
 800514c:	3238      	adds	r2, #56	; 0x38
 800514e:	1c51      	adds	r1, r2, #1
 8005150:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005154:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005158:	428e      	cmp	r6, r1
 800515a:	d124      	bne.n	80051a6 <_free_r+0x156>
 800515c:	2001      	movs	r0, #1
 800515e:	1092      	asrs	r2, r2, #2
 8005160:	fa00 f202 	lsl.w	r2, r0, r2
 8005164:	6868      	ldr	r0, [r5, #4]
 8005166:	4302      	orrs	r2, r0
 8005168:	606a      	str	r2, [r5, #4]
 800516a:	60de      	str	r6, [r3, #12]
 800516c:	6099      	str	r1, [r3, #8]
 800516e:	60b3      	str	r3, [r6, #8]
 8005170:	e7de      	b.n	8005130 <_free_r+0xe0>
 8005172:	2a14      	cmp	r2, #20
 8005174:	d801      	bhi.n	800517a <_free_r+0x12a>
 8005176:	325b      	adds	r2, #91	; 0x5b
 8005178:	e7e9      	b.n	800514e <_free_r+0xfe>
 800517a:	2a54      	cmp	r2, #84	; 0x54
 800517c:	d802      	bhi.n	8005184 <_free_r+0x134>
 800517e:	0b02      	lsrs	r2, r0, #12
 8005180:	326e      	adds	r2, #110	; 0x6e
 8005182:	e7e4      	b.n	800514e <_free_r+0xfe>
 8005184:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005188:	d802      	bhi.n	8005190 <_free_r+0x140>
 800518a:	0bc2      	lsrs	r2, r0, #15
 800518c:	3277      	adds	r2, #119	; 0x77
 800518e:	e7de      	b.n	800514e <_free_r+0xfe>
 8005190:	f240 5154 	movw	r1, #1364	; 0x554
 8005194:	428a      	cmp	r2, r1
 8005196:	bf9a      	itte	ls
 8005198:	0c82      	lsrls	r2, r0, #18
 800519a:	327c      	addls	r2, #124	; 0x7c
 800519c:	227e      	movhi	r2, #126	; 0x7e
 800519e:	e7d6      	b.n	800514e <_free_r+0xfe>
 80051a0:	6889      	ldr	r1, [r1, #8]
 80051a2:	428e      	cmp	r6, r1
 80051a4:	d004      	beq.n	80051b0 <_free_r+0x160>
 80051a6:	684a      	ldr	r2, [r1, #4]
 80051a8:	f022 0203 	bic.w	r2, r2, #3
 80051ac:	4290      	cmp	r0, r2
 80051ae:	d3f7      	bcc.n	80051a0 <_free_r+0x150>
 80051b0:	68ce      	ldr	r6, [r1, #12]
 80051b2:	e7da      	b.n	800516a <_free_r+0x11a>
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b8:	20000100 	.word	0x20000100
 80051bc:	2000050c 	.word	0x2000050c
 80051c0:	200006c8 	.word	0x200006c8
 80051c4:	20000108 	.word	0x20000108

080051c8 <__retarget_lock_acquire_recursive>:
 80051c8:	4770      	bx	lr

080051ca <__retarget_lock_release_recursive>:
 80051ca:	4770      	bx	lr

080051cc <__ascii_mbtowc>:
 80051cc:	b082      	sub	sp, #8
 80051ce:	b901      	cbnz	r1, 80051d2 <__ascii_mbtowc+0x6>
 80051d0:	a901      	add	r1, sp, #4
 80051d2:	b142      	cbz	r2, 80051e6 <__ascii_mbtowc+0x1a>
 80051d4:	b14b      	cbz	r3, 80051ea <__ascii_mbtowc+0x1e>
 80051d6:	7813      	ldrb	r3, [r2, #0]
 80051d8:	600b      	str	r3, [r1, #0]
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	1c10      	adds	r0, r2, #0
 80051de:	bf18      	it	ne
 80051e0:	2001      	movne	r0, #1
 80051e2:	b002      	add	sp, #8
 80051e4:	4770      	bx	lr
 80051e6:	4610      	mov	r0, r2
 80051e8:	e7fb      	b.n	80051e2 <__ascii_mbtowc+0x16>
 80051ea:	f06f 0001 	mvn.w	r0, #1
 80051ee:	e7f8      	b.n	80051e2 <__ascii_mbtowc+0x16>

080051f0 <memmove>:
 80051f0:	4288      	cmp	r0, r1
 80051f2:	b510      	push	{r4, lr}
 80051f4:	eb01 0302 	add.w	r3, r1, r2
 80051f8:	d803      	bhi.n	8005202 <memmove+0x12>
 80051fa:	1e42      	subs	r2, r0, #1
 80051fc:	4299      	cmp	r1, r3
 80051fe:	d10c      	bne.n	800521a <memmove+0x2a>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	4298      	cmp	r0, r3
 8005204:	d2f9      	bcs.n	80051fa <memmove+0xa>
 8005206:	1881      	adds	r1, r0, r2
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	42d3      	cmn	r3, r2
 800520c:	d100      	bne.n	8005210 <memmove+0x20>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005214:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005218:	e7f7      	b.n	800520a <memmove+0x1a>
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005222:	e7eb      	b.n	80051fc <memmove+0xc>

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <_realloc_r>:
 8005234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	4682      	mov	sl, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b929      	cbnz	r1, 800524a <_realloc_r+0x16>
 800523e:	4611      	mov	r1, r2
 8005240:	b003      	add	sp, #12
 8005242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f7ff b8ff 	b.w	8004448 <_malloc_r>
 800524a:	9201      	str	r2, [sp, #4]
 800524c:	f7ff fb16 	bl	800487c <__malloc_lock>
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005256:	f102 080b 	add.w	r8, r2, #11
 800525a:	f1b8 0f16 	cmp.w	r8, #22
 800525e:	f1a4 0908 	sub.w	r9, r4, #8
 8005262:	f025 0603 	bic.w	r6, r5, #3
 8005266:	d90a      	bls.n	800527e <_realloc_r+0x4a>
 8005268:	f038 0807 	bics.w	r8, r8, #7
 800526c:	d509      	bpl.n	8005282 <_realloc_r+0x4e>
 800526e:	230c      	movs	r3, #12
 8005270:	f8ca 3000 	str.w	r3, [sl]
 8005274:	2700      	movs	r7, #0
 8005276:	4638      	mov	r0, r7
 8005278:	b003      	add	sp, #12
 800527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527e:	f04f 0810 	mov.w	r8, #16
 8005282:	4590      	cmp	r8, r2
 8005284:	d3f3      	bcc.n	800526e <_realloc_r+0x3a>
 8005286:	45b0      	cmp	r8, r6
 8005288:	f340 8145 	ble.w	8005516 <_realloc_r+0x2e2>
 800528c:	4ba8      	ldr	r3, [pc, #672]	; (8005530 <_realloc_r+0x2fc>)
 800528e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005292:	eb09 0106 	add.w	r1, r9, r6
 8005296:	4571      	cmp	r1, lr
 8005298:	469b      	mov	fp, r3
 800529a:	684b      	ldr	r3, [r1, #4]
 800529c:	d005      	beq.n	80052aa <_realloc_r+0x76>
 800529e:	f023 0001 	bic.w	r0, r3, #1
 80052a2:	4408      	add	r0, r1
 80052a4:	6840      	ldr	r0, [r0, #4]
 80052a6:	07c7      	lsls	r7, r0, #31
 80052a8:	d447      	bmi.n	800533a <_realloc_r+0x106>
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	4571      	cmp	r1, lr
 80052b0:	eb06 0703 	add.w	r7, r6, r3
 80052b4:	d119      	bne.n	80052ea <_realloc_r+0xb6>
 80052b6:	f108 0010 	add.w	r0, r8, #16
 80052ba:	4287      	cmp	r7, r0
 80052bc:	db3f      	blt.n	800533e <_realloc_r+0x10a>
 80052be:	eb09 0308 	add.w	r3, r9, r8
 80052c2:	eba7 0708 	sub.w	r7, r7, r8
 80052c6:	f047 0701 	orr.w	r7, r7, #1
 80052ca:	f8cb 3008 	str.w	r3, [fp, #8]
 80052ce:	605f      	str	r7, [r3, #4]
 80052d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	ea43 0308 	orr.w	r3, r3, r8
 80052dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80052e0:	4650      	mov	r0, sl
 80052e2:	f7ff fad1 	bl	8004888 <__malloc_unlock>
 80052e6:	4627      	mov	r7, r4
 80052e8:	e7c5      	b.n	8005276 <_realloc_r+0x42>
 80052ea:	45b8      	cmp	r8, r7
 80052ec:	dc27      	bgt.n	800533e <_realloc_r+0x10a>
 80052ee:	68cb      	ldr	r3, [r1, #12]
 80052f0:	688a      	ldr	r2, [r1, #8]
 80052f2:	60d3      	str	r3, [r2, #12]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	eba7 0008 	sub.w	r0, r7, r8
 80052fa:	280f      	cmp	r0, #15
 80052fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005300:	eb09 0207 	add.w	r2, r9, r7
 8005304:	f240 8109 	bls.w	800551a <_realloc_r+0x2e6>
 8005308:	eb09 0108 	add.w	r1, r9, r8
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	ea43 0308 	orr.w	r3, r3, r8
 8005314:	f040 0001 	orr.w	r0, r0, #1
 8005318:	f8c9 3004 	str.w	r3, [r9, #4]
 800531c:	6048      	str	r0, [r1, #4]
 800531e:	6853      	ldr	r3, [r2, #4]
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6053      	str	r3, [r2, #4]
 8005326:	3108      	adds	r1, #8
 8005328:	4650      	mov	r0, sl
 800532a:	f7ff fe91 	bl	8005050 <_free_r>
 800532e:	4650      	mov	r0, sl
 8005330:	f7ff faaa 	bl	8004888 <__malloc_unlock>
 8005334:	f109 0708 	add.w	r7, r9, #8
 8005338:	e79d      	b.n	8005276 <_realloc_r+0x42>
 800533a:	2300      	movs	r3, #0
 800533c:	4619      	mov	r1, r3
 800533e:	07e8      	lsls	r0, r5, #31
 8005340:	f100 8084 	bmi.w	800544c <_realloc_r+0x218>
 8005344:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005348:	eba9 0505 	sub.w	r5, r9, r5
 800534c:	6868      	ldr	r0, [r5, #4]
 800534e:	f020 0003 	bic.w	r0, r0, #3
 8005352:	4430      	add	r0, r6
 8005354:	2900      	cmp	r1, #0
 8005356:	d076      	beq.n	8005446 <_realloc_r+0x212>
 8005358:	4571      	cmp	r1, lr
 800535a:	d150      	bne.n	80053fe <_realloc_r+0x1ca>
 800535c:	4403      	add	r3, r0
 800535e:	f108 0110 	add.w	r1, r8, #16
 8005362:	428b      	cmp	r3, r1
 8005364:	db6f      	blt.n	8005446 <_realloc_r+0x212>
 8005366:	462f      	mov	r7, r5
 8005368:	68ea      	ldr	r2, [r5, #12]
 800536a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800536e:	60ca      	str	r2, [r1, #12]
 8005370:	6091      	str	r1, [r2, #8]
 8005372:	1f32      	subs	r2, r6, #4
 8005374:	2a24      	cmp	r2, #36	; 0x24
 8005376:	d83b      	bhi.n	80053f0 <_realloc_r+0x1bc>
 8005378:	2a13      	cmp	r2, #19
 800537a:	d936      	bls.n	80053ea <_realloc_r+0x1b6>
 800537c:	6821      	ldr	r1, [r4, #0]
 800537e:	60a9      	str	r1, [r5, #8]
 8005380:	6861      	ldr	r1, [r4, #4]
 8005382:	60e9      	str	r1, [r5, #12]
 8005384:	2a1b      	cmp	r2, #27
 8005386:	d81c      	bhi.n	80053c2 <_realloc_r+0x18e>
 8005388:	f105 0210 	add.w	r2, r5, #16
 800538c:	f104 0108 	add.w	r1, r4, #8
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	6010      	str	r0, [r2, #0]
 8005394:	6848      	ldr	r0, [r1, #4]
 8005396:	6050      	str	r0, [r2, #4]
 8005398:	6889      	ldr	r1, [r1, #8]
 800539a:	6091      	str	r1, [r2, #8]
 800539c:	eb05 0208 	add.w	r2, r5, r8
 80053a0:	eba3 0308 	sub.w	r3, r3, r8
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8cb 2008 	str.w	r2, [fp, #8]
 80053ac:	6053      	str	r3, [r2, #4]
 80053ae:	686b      	ldr	r3, [r5, #4]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	ea43 0308 	orr.w	r3, r3, r8
 80053b8:	606b      	str	r3, [r5, #4]
 80053ba:	4650      	mov	r0, sl
 80053bc:	f7ff fa64 	bl	8004888 <__malloc_unlock>
 80053c0:	e759      	b.n	8005276 <_realloc_r+0x42>
 80053c2:	68a1      	ldr	r1, [r4, #8]
 80053c4:	6129      	str	r1, [r5, #16]
 80053c6:	68e1      	ldr	r1, [r4, #12]
 80053c8:	6169      	str	r1, [r5, #20]
 80053ca:	2a24      	cmp	r2, #36	; 0x24
 80053cc:	bf01      	itttt	eq
 80053ce:	6922      	ldreq	r2, [r4, #16]
 80053d0:	61aa      	streq	r2, [r5, #24]
 80053d2:	6960      	ldreq	r0, [r4, #20]
 80053d4:	61e8      	streq	r0, [r5, #28]
 80053d6:	bf19      	ittee	ne
 80053d8:	f105 0218 	addne.w	r2, r5, #24
 80053dc:	f104 0110 	addne.w	r1, r4, #16
 80053e0:	f105 0220 	addeq.w	r2, r5, #32
 80053e4:	f104 0118 	addeq.w	r1, r4, #24
 80053e8:	e7d2      	b.n	8005390 <_realloc_r+0x15c>
 80053ea:	463a      	mov	r2, r7
 80053ec:	4621      	mov	r1, r4
 80053ee:	e7cf      	b.n	8005390 <_realloc_r+0x15c>
 80053f0:	4621      	mov	r1, r4
 80053f2:	4638      	mov	r0, r7
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	f7ff fefb 	bl	80051f0 <memmove>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	e7ce      	b.n	800539c <_realloc_r+0x168>
 80053fe:	18c7      	adds	r7, r0, r3
 8005400:	45b8      	cmp	r8, r7
 8005402:	dc20      	bgt.n	8005446 <_realloc_r+0x212>
 8005404:	68cb      	ldr	r3, [r1, #12]
 8005406:	688a      	ldr	r2, [r1, #8]
 8005408:	60d3      	str	r3, [r2, #12]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	4628      	mov	r0, r5
 800540e:	68eb      	ldr	r3, [r5, #12]
 8005410:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005414:	60d3      	str	r3, [r2, #12]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	1f32      	subs	r2, r6, #4
 800541a:	2a24      	cmp	r2, #36	; 0x24
 800541c:	d842      	bhi.n	80054a4 <_realloc_r+0x270>
 800541e:	2a13      	cmp	r2, #19
 8005420:	d93e      	bls.n	80054a0 <_realloc_r+0x26c>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	60ab      	str	r3, [r5, #8]
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	60eb      	str	r3, [r5, #12]
 800542a:	2a1b      	cmp	r2, #27
 800542c:	d824      	bhi.n	8005478 <_realloc_r+0x244>
 800542e:	f105 0010 	add.w	r0, r5, #16
 8005432:	f104 0308 	add.w	r3, r4, #8
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	6002      	str	r2, [r0, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	6042      	str	r2, [r0, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	6083      	str	r3, [r0, #8]
 8005442:	46a9      	mov	r9, r5
 8005444:	e757      	b.n	80052f6 <_realloc_r+0xc2>
 8005446:	4580      	cmp	r8, r0
 8005448:	4607      	mov	r7, r0
 800544a:	dddf      	ble.n	800540c <_realloc_r+0x1d8>
 800544c:	4611      	mov	r1, r2
 800544e:	4650      	mov	r0, sl
 8005450:	f7fe fffa 	bl	8004448 <_malloc_r>
 8005454:	4607      	mov	r7, r0
 8005456:	2800      	cmp	r0, #0
 8005458:	d0af      	beq.n	80053ba <_realloc_r+0x186>
 800545a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	f1a0 0208 	sub.w	r2, r0, #8
 8005466:	444b      	add	r3, r9
 8005468:	429a      	cmp	r2, r3
 800546a:	d11f      	bne.n	80054ac <_realloc_r+0x278>
 800546c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005470:	f027 0703 	bic.w	r7, r7, #3
 8005474:	4437      	add	r7, r6
 8005476:	e73e      	b.n	80052f6 <_realloc_r+0xc2>
 8005478:	68a3      	ldr	r3, [r4, #8]
 800547a:	612b      	str	r3, [r5, #16]
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	616b      	str	r3, [r5, #20]
 8005480:	2a24      	cmp	r2, #36	; 0x24
 8005482:	bf01      	itttt	eq
 8005484:	6923      	ldreq	r3, [r4, #16]
 8005486:	61ab      	streq	r3, [r5, #24]
 8005488:	6962      	ldreq	r2, [r4, #20]
 800548a:	61ea      	streq	r2, [r5, #28]
 800548c:	bf19      	ittee	ne
 800548e:	f105 0018 	addne.w	r0, r5, #24
 8005492:	f104 0310 	addne.w	r3, r4, #16
 8005496:	f105 0020 	addeq.w	r0, r5, #32
 800549a:	f104 0318 	addeq.w	r3, r4, #24
 800549e:	e7ca      	b.n	8005436 <_realloc_r+0x202>
 80054a0:	4623      	mov	r3, r4
 80054a2:	e7c8      	b.n	8005436 <_realloc_r+0x202>
 80054a4:	4621      	mov	r1, r4
 80054a6:	f7ff fea3 	bl	80051f0 <memmove>
 80054aa:	e7ca      	b.n	8005442 <_realloc_r+0x20e>
 80054ac:	1f32      	subs	r2, r6, #4
 80054ae:	2a24      	cmp	r2, #36	; 0x24
 80054b0:	d82d      	bhi.n	800550e <_realloc_r+0x2da>
 80054b2:	2a13      	cmp	r2, #19
 80054b4:	d928      	bls.n	8005508 <_realloc_r+0x2d4>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	6003      	str	r3, [r0, #0]
 80054ba:	6863      	ldr	r3, [r4, #4]
 80054bc:	6043      	str	r3, [r0, #4]
 80054be:	2a1b      	cmp	r2, #27
 80054c0:	d80e      	bhi.n	80054e0 <_realloc_r+0x2ac>
 80054c2:	f100 0308 	add.w	r3, r0, #8
 80054c6:	f104 0208 	add.w	r2, r4, #8
 80054ca:	6811      	ldr	r1, [r2, #0]
 80054cc:	6019      	str	r1, [r3, #0]
 80054ce:	6851      	ldr	r1, [r2, #4]
 80054d0:	6059      	str	r1, [r3, #4]
 80054d2:	6892      	ldr	r2, [r2, #8]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	4621      	mov	r1, r4
 80054d8:	4650      	mov	r0, sl
 80054da:	f7ff fdb9 	bl	8005050 <_free_r>
 80054de:	e76c      	b.n	80053ba <_realloc_r+0x186>
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	6083      	str	r3, [r0, #8]
 80054e4:	68e3      	ldr	r3, [r4, #12]
 80054e6:	60c3      	str	r3, [r0, #12]
 80054e8:	2a24      	cmp	r2, #36	; 0x24
 80054ea:	bf01      	itttt	eq
 80054ec:	6923      	ldreq	r3, [r4, #16]
 80054ee:	6103      	streq	r3, [r0, #16]
 80054f0:	6961      	ldreq	r1, [r4, #20]
 80054f2:	6141      	streq	r1, [r0, #20]
 80054f4:	bf19      	ittee	ne
 80054f6:	f100 0310 	addne.w	r3, r0, #16
 80054fa:	f104 0210 	addne.w	r2, r4, #16
 80054fe:	f100 0318 	addeq.w	r3, r0, #24
 8005502:	f104 0218 	addeq.w	r2, r4, #24
 8005506:	e7e0      	b.n	80054ca <_realloc_r+0x296>
 8005508:	4603      	mov	r3, r0
 800550a:	4622      	mov	r2, r4
 800550c:	e7dd      	b.n	80054ca <_realloc_r+0x296>
 800550e:	4621      	mov	r1, r4
 8005510:	f7ff fe6e 	bl	80051f0 <memmove>
 8005514:	e7df      	b.n	80054d6 <_realloc_r+0x2a2>
 8005516:	4637      	mov	r7, r6
 8005518:	e6ed      	b.n	80052f6 <_realloc_r+0xc2>
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431f      	orrs	r7, r3
 8005520:	f8c9 7004 	str.w	r7, [r9, #4]
 8005524:	6853      	ldr	r3, [r2, #4]
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	6053      	str	r3, [r2, #4]
 800552c:	e6ff      	b.n	800532e <_realloc_r+0xfa>
 800552e:	bf00      	nop
 8005530:	20000100 	.word	0x20000100

08005534 <__ascii_wctomb>:
 8005534:	b149      	cbz	r1, 800554a <__ascii_wctomb+0x16>
 8005536:	2aff      	cmp	r2, #255	; 0xff
 8005538:	bf85      	ittet	hi
 800553a:	238a      	movhi	r3, #138	; 0x8a
 800553c:	6003      	strhi	r3, [r0, #0]
 800553e:	700a      	strbls	r2, [r1, #0]
 8005540:	f04f 30ff 	movhi.w	r0, #4294967295
 8005544:	bf98      	it	ls
 8005546:	2001      	movls	r0, #1
 8005548:	4770      	bx	lr
 800554a:	4608      	mov	r0, r1
 800554c:	4770      	bx	lr
	...

08005550 <_sbrk>:
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <_sbrk+0x14>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	4602      	mov	r2, r0
 8005556:	b909      	cbnz	r1, 800555c <_sbrk+0xc>
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <_sbrk+0x18>)
 800555a:	6019      	str	r1, [r3, #0]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	4402      	add	r2, r0
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4770      	bx	lr
 8005564:	200006cc 	.word	0x200006cc
 8005568:	200007d4 	.word	0x200007d4

0800556c <_init>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr

08005578 <_fini>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr
