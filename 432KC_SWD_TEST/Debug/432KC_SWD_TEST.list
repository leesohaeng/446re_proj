
432KC_SWD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b7c  08003b7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b84  08003b84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003bfc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003bfc  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b73d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bde  00000000  00000000  0002b7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bc1  00000000  00000000  0002e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009969  00000000  00000000  0004f149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1f62  00000000  00000000  00058ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011aa14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c30  00000000  00000000  0011aa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a74 	.word	0x08003a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a74 	.word	0x08003a74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
	int i=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)	ITM_SendChar((*ptr++));
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x2a>
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffc7 	bl	8000568 <ITM_SendChar>
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x16>

	return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fa80 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f813 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f891 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f85f 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint32_t count=0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Count : %lu\n",count++);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	4619      	mov	r1, r3
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <main+0x30>)
 8000618:	f002 fad6 	bl	8002bc8 <iprintf>
	  HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 fae3 	bl	8000be8 <HAL_Delay>
	  printf("Count : %lu\n",count++);
 8000622:	e7f4      	b.n	800060e <main+0x1a>
 8000624:	08003a8c 	.word	0x08003a8c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	; 0x58
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fabe 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064e:	f000 fd65 	bl	800111c <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 f8b0 	bl	80007bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2303      	movs	r3, #3
 800066c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000672:	2314      	movs	r3, #20
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd9e 	bl	80011c8 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000692:	f000 f893 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f9aa 	bl	8001a08 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f87f 	bl	80007bc <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	; 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_USART2_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x58>)
 800070c:	f001 fe68 	bl	80023e0 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f851 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000098 	.word	0x20000098
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0x90>)
 800078c:	f000 fca0 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000790:	2308      	movs	r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0x90>)
 80007a8:	f000 fb28 	bl	8000dfc <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09e      	sub	sp, #120	; 0x78
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2254      	movs	r2, #84	; 0x54
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f9c1 	bl	8002bb8 <memset>
  if(huart->Instance==USART2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <HAL_UART_MspInit+0xcc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d148      	bne.n	80008d2 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fae1 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000858:	f7ff ffb0 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000860:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000866:	6593      	str	r3, [r2, #88]	; 0x58
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0xd0>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800088c:	2304      	movs	r3, #4
 800088e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 faa7 	bl	8000dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80008c0:	2303      	movs	r3, #3
 80008c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 fa95 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3778      	adds	r7, #120	; 0x78
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40021000 	.word	0x40021000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f93a 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	e00a      	b.n	8000960 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800094a:	f3af 8000 	nop.w
 800094e:	4601      	mov	r1, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	b2ca      	uxtb	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf0      	blt.n	800094a <_read+0x12>
	}

return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099a:	605a      	str	r2, [r3, #4]
	return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_isatty>:

int _isatty(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f002 f8aa 	bl	8002b64 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000c000 	.word	0x2000c000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	20000130 	.word	0x20000130

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0x5c>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SystemInit+0x5c>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x60>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <SystemInit+0x60>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <SystemInit+0x60>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <SystemInit+0x60>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <SystemInit+0x60>)
 8000a74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <SystemInit+0x60>)
 8000a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x60>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x60>)
 8000a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SystemInit+0x60>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	40021000 	.word	0x40021000

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ffca 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ab4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ab6:	e003      	b.n	8000ac0 <LoopCopyDataInit>

08000ab8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000abc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000abe:	3104      	adds	r1, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ac4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ac6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ac8:	d3f6      	bcc.n	8000ab8 <CopyDataInit>
	ldr	r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000acc:	e002      	b.n	8000ad4 <LoopFillZerobss>

08000ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ace:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ad0:	f842 3b04 	str.w	r3, [r2], #4

08000ad4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ad6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ad8:	d3f9      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 f849 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fd89 	bl	80005f4 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000ae8:	08003b8c 	.word	0x08003b8c
	ldr	r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000af0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000af4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000af8:	20000130 	.word	0x20000130

08000afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>

08000afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f943 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f80e 	bl	8000b30 <HAL_InitTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b20:	f7ff fe52 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_InitTick+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d023      	beq.n	8000b8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_InitTick+0x70>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_InitTick+0x6c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f941 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d809      	bhi.n	8000b80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f919 	bl	8000daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_InitTick+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e004      	b.n	8000b90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e001      	b.n	8000b90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	2000011c 	.word	0x2000011c

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000011c 	.word	0x2000011c

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e148      	b.n	800109e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 813a 	beq.w	8001098 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d00b      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d007      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e38:	2b11      	cmp	r3, #17
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b12      	cmp	r3, #18
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f003 0201 	and.w	r2, r3, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0xea>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8094 	beq.w	8001098 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_GPIO_Init+0x2c0>)
 8000f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x2c0>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x2c0>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f88:	4a4d      	ldr	r2, [pc, #308]	; (80010c0 <HAL_GPIO_Init+0x2c4>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_GPIO_Init+0x1d4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_GPIO_Init+0x2c8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d007      	beq.n	8000fcc <HAL_GPIO_Init+0x1d0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_GPIO_Init+0x1cc>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1d6>
 8000fc8:	2307      	movs	r3, #7
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1d6>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1d6>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fe2:	4937      	ldr	r1, [pc, #220]	; (80010c0 <HAL_GPIO_Init+0x2c4>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001014:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_GPIO_Init+0x2d0>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f47f aeaf 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48000800 	.word	0x48000800
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_PWREx_GetVoltageRange+0x18>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40007000 	.word	0x40007000

0800111c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112a:	d130      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001138:	d038      	beq.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001148:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2232      	movs	r2, #50	; 0x32
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9b      	lsrs	r3, r3, #18
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001160:	e002      	b.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b01      	subs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d102      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f2      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001188:	d110      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e00f      	b.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119a:	d007      	beq.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a4:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40007000 	.word	0x40007000
 80011c0:	20000000 	.word	0x20000000
 80011c4:	431bde83 	.word	0x431bde83

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f000 bc11 	b.w	80019fe <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011dc:	4ba0      	ldr	r3, [pc, #640]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e6:	4b9e      	ldr	r3, [pc, #632]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80e4 	beq.w	80013c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_RCC_OscConfig+0x4c>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	f040 808b 	bne.w	8001322 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b01      	cmp	r3, #1
 8001210:	f040 8087 	bne.w	8001322 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x64>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e3e8      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_RCC_OscConfig+0x7e>
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001244:	e005      	b.n	8001252 <HAL_RCC_OscConfig+0x8a>
 8001246:	4b86      	ldr	r3, [pc, #536]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001252:	4293      	cmp	r3, r2
 8001254:	d223      	bcs.n	800129e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fd7a 	bl	8001d54 <RCC_SetFlashLatencyFromMSIRange>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e3c9      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7c      	ldr	r2, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4977      	ldr	r1, [pc, #476]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	4972      	ldr	r1, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e025      	b.n	80012ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6f      	ldr	r2, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	496a      	ldr	r1, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012bc:	4b68      	ldr	r3, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4965      	ldr	r1, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fd3a 	bl	8001d54 <RCC_SetFlashLatencyFromMSIRange>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e389      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ea:	f000 fc6f 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	495a      	ldr	r1, [pc, #360]	; (8001464 <HAL_RCC_OscConfig+0x29c>)
 80012fc:	5ccb      	ldrb	r3, [r1, r3]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_RCC_OscConfig+0x2a0>)
 8001308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_RCC_OscConfig+0x2a4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc0e 	bl	8000b30 <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d052      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	e36d      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d032      	beq.n	8001390 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800132a:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc4b 	bl	8000bd0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800133e:	f7ff fc47 	bl	8000bd0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e356      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a3f      	ldr	r2, [pc, #252]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	493a      	ldr	r1, [pc, #232]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
 800138e:	e01a      	b.n	80013c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc18 	bl	8000bd0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc14 	bl	8000bd0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e323      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1dc>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d073      	beq.n	80014ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x21c>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d10e      	bne.n	80013fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d063      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d15f      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e300      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x24c>
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0x288>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x270>
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0x288>
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RCC_OscConfig+0x298>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01b      	beq.n	8001490 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fbba 	bl	8000bd0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145e:	e010      	b.n	8001482 <HAL_RCC_OscConfig+0x2ba>
 8001460:	40021000 	.word	0x40021000
 8001464:	08003a9c 	.word	0x08003a9c
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fbae 	bl	8000bd0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2bd      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	4baf      	ldr	r3, [pc, #700]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x2a8>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb9e 	bl	8000bd0 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fb9a 	bl	8000bd0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e2a9      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	4ba5      	ldr	r3, [pc, #660]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x2d0>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d060      	beq.n	8001588 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x310>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d119      	bne.n	8001506 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d116      	bne.n	8001506 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d8:	4b99      	ldr	r3, [pc, #612]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_OscConfig+0x328>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e286      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b93      	ldr	r3, [pc, #588]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	4990      	ldr	r1, [pc, #576]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001504:	e040      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d023      	beq.n	8001556 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150e:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a8b      	ldr	r2, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fb59 	bl	8000bd0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fb55 	bl	8000bd0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e264      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	4b82      	ldr	r3, [pc, #520]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	497c      	ldr	r1, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a79      	ldr	r2, [pc, #484]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 800155c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fb35 	bl	8000bd0 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fb31 	bl	8000bd0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e240      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d03c      	beq.n	800160e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb10 	bl	8000bd0 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb0c 	bl	8000bd0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e21b      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c6:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ef      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3ec>
 80015d4:	e01b      	b.n	800160e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff faf3 	bl	8000bd0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff faef 	bl	8000bd0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1fe      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001600:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ef      	bne.n	80015ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80a6 	beq.w	8001768 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10d      	bne.n	8001648 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4b44      	ldr	r3, [pc, #272]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	4a43      	ldr	r2, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6593      	str	r3, [r2, #88]	; 0x58
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001644:	2301      	movs	r3, #1
 8001646:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_OscConfig+0x57c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d118      	bne.n	8001686 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x57c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <HAL_RCC_OscConfig+0x57c>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001660:	f7ff fab6 	bl	8000bd0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001668:	f7ff fab2 	bl	8000bd0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1c1      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x57c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4d8>
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169e:	e024      	b.n	80016ea <HAL_RCC_OscConfig+0x522>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d110      	bne.n	80016ca <HAL_RCC_OscConfig+0x502>
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c8:	e00f      	b.n	80016ea <HAL_RCC_OscConfig+0x522>
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fa6d 	bl	8000bd0 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa69 	bl	8000bd0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e176      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x578>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0ed      	beq.n	80016fa <HAL_RCC_OscConfig+0x532>
 800171e:	e01a      	b.n	8001756 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fa56 	bl	8000bd0 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001726:	e00f      	b.n	8001748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fa52 	bl	8000bd0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d906      	bls.n	8001748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e15f      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001748:	4baa      	ldr	r3, [pc, #680]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e8      	bne.n	8001728 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4ba5      	ldr	r3, [pc, #660]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4aa4      	ldr	r2, [pc, #656]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800177c:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001782:	4a9c      	ldr	r2, [pc, #624]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa20 	bl	8000bd0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001794:	f7ff fa1c 	bl	8000bd0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e12b      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017a6:	4b93      	ldr	r3, [pc, #588]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80017a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x5cc>
 80017b4:	e01b      	b.n	80017ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017b6:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80017b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017bc:	4a8d      	ldr	r2, [pc, #564]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fa03 	bl	8000bd0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ce:	f7ff f9ff 	bl	8000bd0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10e      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e0:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8102 	beq.w	80019fc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 80c5 	bne.w	800198c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001802:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0203 	and.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	429a      	cmp	r2, r3
 8001814:	d12c      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	3b01      	subs	r3, #1
 8001822:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d123      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d11b      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d113      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	3b01      	subs	r3, #1
 8001856:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d109      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d067      	beq.n	8001940 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d062      	beq.n	800193c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0bb      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001886:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800188c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001890:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001892:	f7ff f99d 	bl	8000bd0 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f999 	bl	8000bd0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0a8      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <HAL_RCC_OscConfig+0x830>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018c8:	3a01      	subs	r2, #1
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	4311      	orrs	r1, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018d2:	0212      	lsls	r2, r2, #8
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018da:	0852      	lsrs	r2, r2, #1
 80018dc:	3a01      	subs	r2, #1
 80018de:	0552      	lsls	r2, r2, #21
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018e6:	0852      	lsrs	r2, r2, #1
 80018e8:	3a01      	subs	r2, #1
 80018ea:	0652      	lsls	r2, r2, #25
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018f2:	06d2      	lsls	r2, r2, #27
 80018f4:	430a      	orrs	r2, r1
 80018f6:	493f      	ldr	r1, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018fc:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3c      	ldr	r2, [pc, #240]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001914:	f7ff f95c 	bl	8000bd0 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f958 	bl	8000bd0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e067      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193a:	e05f      	b.n	80019fc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e05e      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d157      	bne.n	80019fc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001964:	f7ff f934 	bl	8000bd0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f930 	bl	8000bd0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e03f      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x7a4>
 800198a:	e037      	b.n	80019fc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d02d      	beq.n	80019ee <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019b0:	f023 0303 	bic.w	r3, r3, #3
 80019b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f903 	bl	8000bd0 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff f8ff 	bl	8000bd0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e00e      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x806>
 80019ec:	e006      	b.n	80019fc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e005      	b.n	80019fe <HAL_RCC_OscConfig+0x836>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0c8      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4961      	ldr	r1, [pc, #388]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b0      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d04c      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e09e      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e092      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a90:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e086      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e07e      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 0203 	bic.w	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	493f      	ldr	r1, [pc, #252]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac2:	f7ff f885 	bl	8000bd0 <HAL_GetTick>
 8001ac6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7ff f881 	bl	8000bd0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e066      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 020c 	and.w	r2, r3, #12
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d1eb      	bne.n	8001aca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	492c      	ldr	r1, [pc, #176]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d210      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4924      	ldr	r1, [pc, #144]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e036      	b.n	8001bae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4918      	ldr	r1, [pc, #96]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4910      	ldr	r1, [pc, #64]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7e:	f000 f825 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ffc4 	bl	8000b30 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bac:	7afb      	ldrb	r3, [r7, #11]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08003a9c 	.word	0x08003a9c
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bda:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d121      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d11e      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c00:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e005      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10d      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e004      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d134      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0xac>
 8001c70:	e005      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c7a:	617b      	str	r3, [r7, #20]
      break;
 8001c7c:	e002      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	617b      	str	r3, [r7, #20]
      break;
 8001c82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	3301      	adds	r3, #1
 8001c90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	0e5b      	lsrs	r3, r3, #25
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	08003ab4 	.word	0x08003ab4
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08003aac 	.word	0x08003aac

08001d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d2c:	f7ff ffda 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0adb      	lsrs	r3, r3, #11
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08003aac 	.word	0x08003aac

08001d54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d6c:	f7ff f9c8 	bl	8001100 <HAL_PWREx_GetVoltageRange>
 8001d70:	6178      	str	r0, [r7, #20]
 8001d72:	e014      	b.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d8c:	f7ff f9b8 	bl	8001100 <HAL_PWREx_GetVoltageRange>
 8001d90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	d10b      	bne.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d919      	bls.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2ba0      	cmp	r3, #160	; 0xa0
 8001db0:	d902      	bls.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db2:	2302      	movs	r3, #2
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e013      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e010      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d902      	bls.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e00a      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d102      	bne.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e004      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b70      	cmp	r3, #112	; 0x70
 8001dda:	d101      	bne.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 0207 	bic.w	r2, r3, #7
 8001de8:	4909      	ldr	r1, [pc, #36]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40022000 	.word	0x40022000

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e20:	2300      	movs	r3, #0
 8001e22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d031      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e38:	d01a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e3e:	d814      	bhi.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e48:	d10f      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e4a:	4bac      	ldr	r3, [pc, #688]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4aab      	ldr	r2, [pc, #684]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e56:	e00c      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f9cc 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e003      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e6e:	e000      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e72:	7cfb      	ldrb	r3, [r7, #19]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e78:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	499d      	ldr	r1, [pc, #628]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e8e:	e001      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8099 	beq.w	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ea6:	4b95      	ldr	r3, [pc, #596]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	4a8e      	ldr	r2, [pc, #568]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec8:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed8:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a88      	ldr	r2, [pc, #544]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe fe74 	bl	8000bd0 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eea:	e009      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eec:	f7fe fe70 	bl	8000bd0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d902      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	74fb      	strb	r3, [r7, #19]
        break;
 8001efe:	e005      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d155      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f12:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01e      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f3a:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	4a6a      	ldr	r2, [pc, #424]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f5a:	4a68      	ldr	r2, [pc, #416]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fe30 	bl	8000bd0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	e00b      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fe2c 	bl	8000bd0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d902      	bls.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	74fb      	strb	r3, [r7, #19]
            break;
 8001f8a:	e006      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0ec      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	4953      	ldr	r1, [pc, #332]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7c7b      	ldrb	r3, [r7, #17]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4943      	ldr	r1, [pc, #268]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	f023 020c 	bic.w	r2, r3, #12
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	493a      	ldr	r1, [pc, #232]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	4932      	ldr	r1, [pc, #200]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	4921      	ldr	r1, [pc, #132]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4918      	ldr	r1, [pc, #96]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4910      	ldr	r1, [pc, #64]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02c      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ec:	d10a      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a02      	ldr	r2, [pc, #8]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f8:	60d3      	str	r3, [r2, #12]
 80020fa:	e015      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800210c:	d10c      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	2101      	movs	r1, #1
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f871 	bl	80021fc <RCCEx_PLLSAI1_Config>
 800211a:	4603      	mov	r3, r0
 800211c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d028      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002152:	d106      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
 8002160:	e011      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800216a:	d10c      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f842 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01c      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002198:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2102      	movs	r1, #2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f81f 	bl	80021fc <RCCEx_PLLSAI1_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4904      	ldr	r1, [pc, #16]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000

080021fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d018      	beq.n	8002248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d10d      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
       ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
       ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d047      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e044      	b.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d018      	beq.n	8002282 <RCCEx_PLLSAI1_Config+0x86>
 8002250:	2b03      	cmp	r3, #3
 8002252:	d825      	bhi.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d002      	beq.n	800225e <RCCEx_PLLSAI1_Config+0x62>
 8002258:	2b02      	cmp	r3, #2
 800225a:	d009      	beq.n	8002270 <RCCEx_PLLSAI1_Config+0x74>
 800225c:	e020      	b.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11d      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226e:	e01a      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e013      	b.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800229e:	e006      	b.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e004      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	430b      	orrs	r3, r1
 80022cc:	4943      	ldr	r1, [pc, #268]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d17c      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fc74 	bl	8000bd0 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ea:	e009      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ec:	f7fe fc70 	bl	8000bd0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	73fb      	strb	r3, [r7, #15]
        break;
 80022fe:	e005      	b.n	800230c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ef      	bne.n	80022ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d15f      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d110      	bne.n	800233a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002320:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6892      	ldr	r2, [r2, #8]
 8002328:	0211      	lsls	r1, r2, #8
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68d2      	ldr	r2, [r2, #12]
 800232e:	06d2      	lsls	r2, r2, #27
 8002330:	430a      	orrs	r2, r1
 8002332:	492a      	ldr	r1, [pc, #168]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	610b      	str	r3, [r1, #16]
 8002338:	e027      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d112      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6892      	ldr	r2, [r2, #8]
 8002350:	0211      	lsls	r1, r2, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6912      	ldr	r2, [r2, #16]
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	430a      	orrs	r2, r1
 800235e:	491f      	ldr	r1, [pc, #124]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	610b      	str	r3, [r1, #16]
 8002364:	e011      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800236e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	0211      	lsls	r1, r2, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6952      	ldr	r2, [r2, #20]
 800237c:	0852      	lsrs	r2, r2, #1
 800237e:	3a01      	subs	r2, #1
 8002380:	0652      	lsls	r2, r2, #25
 8002382:	430a      	orrs	r2, r1
 8002384:	4915      	ldr	r1, [pc, #84]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002394:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe fc1b 	bl	8000bd0 <HAL_GetTick>
 800239a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800239c:	e009      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800239e:	f7fe fc17 	bl	8000bd0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d902      	bls.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	73fb      	strb	r3, [r7, #15]
          break;
 80023b0:	e005      	b.n	80023be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ef      	beq.n	800239e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e040      	b.n	8002474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fa04 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f82c 	bl	800247c <UART_SetConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa2c 	bl	8002894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800244a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800245a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fab3 	bl	80029d8 <UART_CheckIdleState>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4313      	orrs	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4baf      	ldr	r3, [pc, #700]	; (8002764 <UART_SetConfig+0x2e8>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	69f9      	ldr	r1, [r7, #28]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4aa4      	ldr	r2, [pc, #656]	; (8002768 <UART_SetConfig+0x2ec>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a9b      	ldr	r2, [pc, #620]	; (800276c <UART_SetConfig+0x2f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d121      	bne.n	8002546 <UART_SetConfig+0xca>
 8002502:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <UART_SetConfig+0x2f4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d817      	bhi.n	8002540 <UART_SetConfig+0xc4>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <UART_SetConfig+0x9c>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	08002535 	.word	0x08002535
 8002520:	0800252f 	.word	0x0800252f
 8002524:	0800253b 	.word	0x0800253b
 8002528:	2301      	movs	r3, #1
 800252a:	76fb      	strb	r3, [r7, #27]
 800252c:	e070      	b.n	8002610 <UART_SetConfig+0x194>
 800252e:	2302      	movs	r3, #2
 8002530:	76fb      	strb	r3, [r7, #27]
 8002532:	e06d      	b.n	8002610 <UART_SetConfig+0x194>
 8002534:	2304      	movs	r3, #4
 8002536:	76fb      	strb	r3, [r7, #27]
 8002538:	e06a      	b.n	8002610 <UART_SetConfig+0x194>
 800253a:	2308      	movs	r3, #8
 800253c:	76fb      	strb	r3, [r7, #27]
 800253e:	e067      	b.n	8002610 <UART_SetConfig+0x194>
 8002540:	2310      	movs	r3, #16
 8002542:	76fb      	strb	r3, [r7, #27]
 8002544:	e064      	b.n	8002610 <UART_SetConfig+0x194>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8a      	ldr	r2, [pc, #552]	; (8002774 <UART_SetConfig+0x2f8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d132      	bne.n	80025b6 <UART_SetConfig+0x13a>
 8002550:	4b87      	ldr	r3, [pc, #540]	; (8002770 <UART_SetConfig+0x2f4>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d828      	bhi.n	80025b0 <UART_SetConfig+0x134>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <UART_SetConfig+0xe8>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002599 	.word	0x08002599
 8002568:	080025b1 	.word	0x080025b1
 800256c:	080025b1 	.word	0x080025b1
 8002570:	080025b1 	.word	0x080025b1
 8002574:	080025a5 	.word	0x080025a5
 8002578:	080025b1 	.word	0x080025b1
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080025b1 	.word	0x080025b1
 8002584:	0800259f 	.word	0x0800259f
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025b1 	.word	0x080025b1
 8002590:	080025b1 	.word	0x080025b1
 8002594:	080025ab 	.word	0x080025ab
 8002598:	2300      	movs	r3, #0
 800259a:	76fb      	strb	r3, [r7, #27]
 800259c:	e038      	b.n	8002610 <UART_SetConfig+0x194>
 800259e:	2302      	movs	r3, #2
 80025a0:	76fb      	strb	r3, [r7, #27]
 80025a2:	e035      	b.n	8002610 <UART_SetConfig+0x194>
 80025a4:	2304      	movs	r3, #4
 80025a6:	76fb      	strb	r3, [r7, #27]
 80025a8:	e032      	b.n	8002610 <UART_SetConfig+0x194>
 80025aa:	2308      	movs	r3, #8
 80025ac:	76fb      	strb	r3, [r7, #27]
 80025ae:	e02f      	b.n	8002610 <UART_SetConfig+0x194>
 80025b0:	2310      	movs	r3, #16
 80025b2:	76fb      	strb	r3, [r7, #27]
 80025b4:	e02c      	b.n	8002610 <UART_SetConfig+0x194>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6b      	ldr	r2, [pc, #428]	; (8002768 <UART_SetConfig+0x2ec>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d125      	bne.n	800260c <UART_SetConfig+0x190>
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <UART_SetConfig+0x2f4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025ce:	d017      	beq.n	8002600 <UART_SetConfig+0x184>
 80025d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025d4:	d817      	bhi.n	8002606 <UART_SetConfig+0x18a>
 80025d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025da:	d00b      	beq.n	80025f4 <UART_SetConfig+0x178>
 80025dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e0:	d811      	bhi.n	8002606 <UART_SetConfig+0x18a>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <UART_SetConfig+0x172>
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	d006      	beq.n	80025fa <UART_SetConfig+0x17e>
 80025ec:	e00b      	b.n	8002606 <UART_SetConfig+0x18a>
 80025ee:	2300      	movs	r3, #0
 80025f0:	76fb      	strb	r3, [r7, #27]
 80025f2:	e00d      	b.n	8002610 <UART_SetConfig+0x194>
 80025f4:	2302      	movs	r3, #2
 80025f6:	76fb      	strb	r3, [r7, #27]
 80025f8:	e00a      	b.n	8002610 <UART_SetConfig+0x194>
 80025fa:	2304      	movs	r3, #4
 80025fc:	76fb      	strb	r3, [r7, #27]
 80025fe:	e007      	b.n	8002610 <UART_SetConfig+0x194>
 8002600:	2308      	movs	r3, #8
 8002602:	76fb      	strb	r3, [r7, #27]
 8002604:	e004      	b.n	8002610 <UART_SetConfig+0x194>
 8002606:	2310      	movs	r3, #16
 8002608:	76fb      	strb	r3, [r7, #27]
 800260a:	e001      	b.n	8002610 <UART_SetConfig+0x194>
 800260c:	2310      	movs	r3, #16
 800260e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a54      	ldr	r2, [pc, #336]	; (8002768 <UART_SetConfig+0x2ec>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d173      	bne.n	8002702 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800261a:	7efb      	ldrb	r3, [r7, #27]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d824      	bhi.n	800266a <UART_SetConfig+0x1ee>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <UART_SetConfig+0x1ac>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	0800264d 	.word	0x0800264d
 800262c:	0800266b 	.word	0x0800266b
 8002630:	08002655 	.word	0x08002655
 8002634:	0800266b 	.word	0x0800266b
 8002638:	0800265b 	.word	0x0800265b
 800263c:	0800266b 	.word	0x0800266b
 8002640:	0800266b 	.word	0x0800266b
 8002644:	0800266b 	.word	0x0800266b
 8002648:	08002663 	.word	0x08002663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800264c:	f7ff fb56 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002650:	6178      	str	r0, [r7, #20]
        break;
 8002652:	e00f      	b.n	8002674 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <UART_SetConfig+0x2fc>)
 8002656:	617b      	str	r3, [r7, #20]
        break;
 8002658:	e00c      	b.n	8002674 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800265a:	f7ff fab7 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 800265e:	6178      	str	r0, [r7, #20]
        break;
 8002660:	e008      	b.n	8002674 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	617b      	str	r3, [r7, #20]
        break;
 8002668:	e004      	b.n	8002674 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	76bb      	strb	r3, [r7, #26]
        break;
 8002672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80fe 	beq.w	8002878 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d305      	bcc.n	8002698 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d902      	bls.n	800269e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	76bb      	strb	r3, [r7, #26]
 800269c:	e0ec      	b.n	8002878 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	020b      	lsls	r3, r1, #8
 80026b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80026b4:	0202      	lsls	r2, r0, #8
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	6849      	ldr	r1, [r1, #4]
 80026ba:	0849      	lsrs	r1, r1, #1
 80026bc:	4608      	mov	r0, r1
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	1814      	adds	r4, r2, r0
 80026c4:	eb43 0501 	adc.w	r5, r3, r1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	4620      	mov	r0, r4
 80026d4:	4629      	mov	r1, r5
 80026d6:	f7fd fdcb 	bl	8000270 <__aeabi_uldivmod>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4613      	mov	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026e8:	d308      	bcc.n	80026fc <UART_SetConfig+0x280>
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f0:	d204      	bcs.n	80026fc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	e0bd      	b.n	8002878 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	76bb      	strb	r3, [r7, #26]
 8002700:	e0ba      	b.n	8002878 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270a:	d168      	bne.n	80027de <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800270c:	7efb      	ldrb	r3, [r7, #27]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d834      	bhi.n	800277c <UART_SetConfig+0x300>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <UART_SetConfig+0x29c>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	0800273d 	.word	0x0800273d
 800271c:	08002745 	.word	0x08002745
 8002720:	0800274d 	.word	0x0800274d
 8002724:	0800277d 	.word	0x0800277d
 8002728:	08002753 	.word	0x08002753
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800277d 	.word	0x0800277d
 8002734:	0800277d 	.word	0x0800277d
 8002738:	0800275b 	.word	0x0800275b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff fade 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002740:	6178      	str	r0, [r7, #20]
        break;
 8002742:	e020      	b.n	8002786 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002744:	f7ff faf0 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 8002748:	6178      	str	r0, [r7, #20]
        break;
 800274a:	e01c      	b.n	8002786 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <UART_SetConfig+0x2fc>)
 800274e:	617b      	str	r3, [r7, #20]
        break;
 8002750:	e019      	b.n	8002786 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff fa3b 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8002756:	6178      	str	r0, [r7, #20]
        break;
 8002758:	e015      	b.n	8002786 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275e:	617b      	str	r3, [r7, #20]
        break;
 8002760:	e011      	b.n	8002786 <UART_SetConfig+0x30a>
 8002762:	bf00      	nop
 8002764:	efff69f3 	.word	0xefff69f3
 8002768:	40008000 	.word	0x40008000
 800276c:	40013800 	.word	0x40013800
 8002770:	40021000 	.word	0x40021000
 8002774:	40004400 	.word	0x40004400
 8002778:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	76bb      	strb	r3, [r7, #26]
        break;
 8002784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d075      	beq.n	8002878 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005a      	lsls	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d916      	bls.n	80027d8 <UART_SetConfig+0x35c>
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d212      	bcs.n	80027d8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f023 030f 	bic.w	r3, r3, #15
 80027ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	89fa      	ldrh	r2, [r7, #14]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	e04f      	b.n	8002878 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	76bb      	strb	r3, [r7, #26]
 80027dc:	e04c      	b.n	8002878 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027de:	7efb      	ldrb	r3, [r7, #27]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d828      	bhi.n	8002836 <UART_SetConfig+0x3ba>
 80027e4:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <UART_SetConfig+0x370>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002819 	.word	0x08002819
 80027f4:	08002821 	.word	0x08002821
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002827 	.word	0x08002827
 8002800:	08002837 	.word	0x08002837
 8002804:	08002837 	.word	0x08002837
 8002808:	08002837 	.word	0x08002837
 800280c:	0800282f 	.word	0x0800282f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002810:	f7ff fa74 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002814:	6178      	str	r0, [r7, #20]
        break;
 8002816:	e013      	b.n	8002840 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002818:	f7ff fa86 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 800281c:	6178      	str	r0, [r7, #20]
        break;
 800281e:	e00f      	b.n	8002840 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <UART_SetConfig+0x414>)
 8002822:	617b      	str	r3, [r7, #20]
        break;
 8002824:	e00c      	b.n	8002840 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002826:	f7ff f9d1 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 800282a:	6178      	str	r0, [r7, #20]
        break;
 800282c:	e008      	b.n	8002840 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	617b      	str	r3, [r7, #20]
        break;
 8002834:	e004      	b.n	8002840 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	76bb      	strb	r3, [r7, #26]
        break;
 800283e:	bf00      	nop
    }

    if (pclk != 0U)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085a      	lsrs	r2, r3, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	441a      	add	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	b29b      	uxth	r3, r3
 800285a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d908      	bls.n	8002874 <UART_SetConfig+0x3f8>
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d204      	bcs.n	8002874 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	e001      	b.n	8002878 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002884:	7ebb      	ldrb	r3, [r7, #26]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	bf00      	nop
 8002890:	00f42400 	.word	0x00f42400

08002894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01a      	beq.n	80029aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002992:	d10a      	bne.n	80029aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  }
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029e8:	f7fe f8f2 	bl	8000bd0 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d10e      	bne.n	8002a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f82d 	bl	8002a6a <UART_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e023      	b.n	8002a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d10e      	bne.n	8002a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f817 	bl	8002a6a <UART_WaitOnFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e00d      	b.n	8002a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7a:	e05e      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d05a      	beq.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a84:	f7fe f8a4 	bl	8000bd0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d302      	bcc.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11b      	bne.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e043      	b.n	8002b5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02c      	beq.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d124      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e00f      	b.n	8002b5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d091      	beq.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <__errno>:
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <__errno+0x8>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	2000000c 	.word	0x2000000c

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4d0d      	ldr	r5, [pc, #52]	; (8002ba8 <__libc_init_array+0x38>)
 8002b74:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <__libc_init_array+0x3c>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	42a6      	cmp	r6, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	4d0b      	ldr	r5, [pc, #44]	; (8002bb0 <__libc_init_array+0x40>)
 8002b82:	4c0c      	ldr	r4, [pc, #48]	; (8002bb4 <__libc_init_array+0x44>)
 8002b84:	f000 ff76 	bl	8003a74 <_init>
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	42a6      	cmp	r6, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b98:	4798      	blx	r3
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba2:	4798      	blx	r3
 8002ba4:	3601      	adds	r6, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	08003b84 	.word	0x08003b84
 8002bac:	08003b84 	.word	0x08003b84
 8002bb0:	08003b84 	.word	0x08003b84
 8002bb4:	08003b88 	.word	0x08003b88

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <iprintf>:
 8002bc8:	b40f      	push	{r0, r1, r2, r3}
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <iprintf+0x2c>)
 8002bcc:	b513      	push	{r0, r1, r4, lr}
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	b124      	cbz	r4, 8002bdc <iprintf+0x14>
 8002bd2:	69a3      	ldr	r3, [r4, #24]
 8002bd4:	b913      	cbnz	r3, 8002bdc <iprintf+0x14>
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 f866 	bl	8002ca8 <__sinit>
 8002bdc:	ab05      	add	r3, sp, #20
 8002bde:	9a04      	ldr	r2, [sp, #16]
 8002be0:	68a1      	ldr	r1, [r4, #8]
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 f983 	bl	8002ef0 <_vfiprintf_r>
 8002bea:	b002      	add	sp, #8
 8002bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bf0:	b004      	add	sp, #16
 8002bf2:	4770      	bx	lr
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <std>:
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8002c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c06:	6083      	str	r3, [r0, #8]
 8002c08:	8181      	strh	r1, [r0, #12]
 8002c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8002c0c:	81c2      	strh	r2, [r0, #14]
 8002c0e:	6183      	str	r3, [r0, #24]
 8002c10:	4619      	mov	r1, r3
 8002c12:	2208      	movs	r2, #8
 8002c14:	305c      	adds	r0, #92	; 0x5c
 8002c16:	f7ff ffcf 	bl	8002bb8 <memset>
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <std+0x38>)
 8002c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <std+0x3c>)
 8002c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <std+0x40>)
 8002c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <std+0x44>)
 8002c28:	6224      	str	r4, [r4, #32]
 8002c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	bf00      	nop
 8002c30:	08003499 	.word	0x08003499
 8002c34:	080034bb 	.word	0x080034bb
 8002c38:	080034f3 	.word	0x080034f3
 8002c3c:	08003517 	.word	0x08003517

08002c40 <_cleanup_r>:
 8002c40:	4901      	ldr	r1, [pc, #4]	; (8002c48 <_cleanup_r+0x8>)
 8002c42:	f000 b8af 	b.w	8002da4 <_fwalk_reent>
 8002c46:	bf00      	nop
 8002c48:	080037f1 	.word	0x080037f1

08002c4c <__sfmoreglue>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	1e4a      	subs	r2, r1, #1
 8002c50:	2568      	movs	r5, #104	; 0x68
 8002c52:	4355      	muls	r5, r2
 8002c54:	460e      	mov	r6, r1
 8002c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c5a:	f000 f8c5 	bl	8002de8 <_malloc_r>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	b140      	cbz	r0, 8002c74 <__sfmoreglue+0x28>
 8002c62:	2100      	movs	r1, #0
 8002c64:	e9c0 1600 	strd	r1, r6, [r0]
 8002c68:	300c      	adds	r0, #12
 8002c6a:	60a0      	str	r0, [r4, #8]
 8002c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c70:	f7ff ffa2 	bl	8002bb8 <memset>
 8002c74:	4620      	mov	r0, r4
 8002c76:	bd70      	pop	{r4, r5, r6, pc}

08002c78 <__sfp_lock_acquire>:
 8002c78:	4801      	ldr	r0, [pc, #4]	; (8002c80 <__sfp_lock_acquire+0x8>)
 8002c7a:	f000 b8b3 	b.w	8002de4 <__retarget_lock_acquire_recursive>
 8002c7e:	bf00      	nop
 8002c80:	20000128 	.word	0x20000128

08002c84 <__sfp_lock_release>:
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <__sfp_lock_release+0x8>)
 8002c86:	f000 b8ae 	b.w	8002de6 <__retarget_lock_release_recursive>
 8002c8a:	bf00      	nop
 8002c8c:	20000128 	.word	0x20000128

08002c90 <__sinit_lock_acquire>:
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <__sinit_lock_acquire+0x8>)
 8002c92:	f000 b8a7 	b.w	8002de4 <__retarget_lock_acquire_recursive>
 8002c96:	bf00      	nop
 8002c98:	20000123 	.word	0x20000123

08002c9c <__sinit_lock_release>:
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <__sinit_lock_release+0x8>)
 8002c9e:	f000 b8a2 	b.w	8002de6 <__retarget_lock_release_recursive>
 8002ca2:	bf00      	nop
 8002ca4:	20000123 	.word	0x20000123

08002ca8 <__sinit>:
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	4604      	mov	r4, r0
 8002cac:	f7ff fff0 	bl	8002c90 <__sinit_lock_acquire>
 8002cb0:	69a3      	ldr	r3, [r4, #24]
 8002cb2:	b11b      	cbz	r3, 8002cbc <__sinit+0x14>
 8002cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cb8:	f7ff bff0 	b.w	8002c9c <__sinit_lock_release>
 8002cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <__sinit+0x68>)
 8002cc4:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <__sinit+0x6c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	bf04      	itt	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	61a3      	streq	r3, [r4, #24]
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 f820 	bl	8002d18 <__sfp>
 8002cd8:	6060      	str	r0, [r4, #4]
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f000 f81c 	bl	8002d18 <__sfp>
 8002ce0:	60a0      	str	r0, [r4, #8]
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f000 f818 	bl	8002d18 <__sfp>
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60e0      	str	r0, [r4, #12]
 8002cec:	2104      	movs	r1, #4
 8002cee:	6860      	ldr	r0, [r4, #4]
 8002cf0:	f7ff ff82 	bl	8002bf8 <std>
 8002cf4:	68a0      	ldr	r0, [r4, #8]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2109      	movs	r1, #9
 8002cfa:	f7ff ff7d 	bl	8002bf8 <std>
 8002cfe:	68e0      	ldr	r0, [r4, #12]
 8002d00:	2202      	movs	r2, #2
 8002d02:	2112      	movs	r1, #18
 8002d04:	f7ff ff78 	bl	8002bf8 <std>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61a3      	str	r3, [r4, #24]
 8002d0c:	e7d2      	b.n	8002cb4 <__sinit+0xc>
 8002d0e:	bf00      	nop
 8002d10:	08003ae4 	.word	0x08003ae4
 8002d14:	08002c41 	.word	0x08002c41

08002d18 <__sfp>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	4607      	mov	r7, r0
 8002d1c:	f7ff ffac 	bl	8002c78 <__sfp_lock_acquire>
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <__sfp+0x84>)
 8002d22:	681e      	ldr	r6, [r3, #0]
 8002d24:	69b3      	ldr	r3, [r6, #24]
 8002d26:	b913      	cbnz	r3, 8002d2e <__sfp+0x16>
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f7ff ffbd 	bl	8002ca8 <__sinit>
 8002d2e:	3648      	adds	r6, #72	; 0x48
 8002d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	d503      	bpl.n	8002d40 <__sfp+0x28>
 8002d38:	6833      	ldr	r3, [r6, #0]
 8002d3a:	b30b      	cbz	r3, 8002d80 <__sfp+0x68>
 8002d3c:	6836      	ldr	r6, [r6, #0]
 8002d3e:	e7f7      	b.n	8002d30 <__sfp+0x18>
 8002d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d44:	b9d5      	cbnz	r5, 8002d7c <__sfp+0x64>
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <__sfp+0x88>)
 8002d48:	60e3      	str	r3, [r4, #12]
 8002d4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8002d50:	f000 f847 	bl	8002de2 <__retarget_lock_init_recursive>
 8002d54:	f7ff ff96 	bl	8002c84 <__sfp_lock_release>
 8002d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d60:	6025      	str	r5, [r4, #0]
 8002d62:	61a5      	str	r5, [r4, #24]
 8002d64:	2208      	movs	r2, #8
 8002d66:	4629      	mov	r1, r5
 8002d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d6c:	f7ff ff24 	bl	8002bb8 <memset>
 8002d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d78:	4620      	mov	r0, r4
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7c:	3468      	adds	r4, #104	; 0x68
 8002d7e:	e7d9      	b.n	8002d34 <__sfp+0x1c>
 8002d80:	2104      	movs	r1, #4
 8002d82:	4638      	mov	r0, r7
 8002d84:	f7ff ff62 	bl	8002c4c <__sfmoreglue>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	6030      	str	r0, [r6, #0]
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1d5      	bne.n	8002d3c <__sfp+0x24>
 8002d90:	f7ff ff78 	bl	8002c84 <__sfp_lock_release>
 8002d94:	230c      	movs	r3, #12
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	e7ee      	b.n	8002d78 <__sfp+0x60>
 8002d9a:	bf00      	nop
 8002d9c:	08003ae4 	.word	0x08003ae4
 8002da0:	ffff0001 	.word	0xffff0001

08002da4 <_fwalk_reent>:
 8002da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002da8:	4606      	mov	r6, r0
 8002daa:	4688      	mov	r8, r1
 8002dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002db0:	2700      	movs	r7, #0
 8002db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002db6:	f1b9 0901 	subs.w	r9, r9, #1
 8002dba:	d505      	bpl.n	8002dc8 <_fwalk_reent+0x24>
 8002dbc:	6824      	ldr	r4, [r4, #0]
 8002dbe:	2c00      	cmp	r4, #0
 8002dc0:	d1f7      	bne.n	8002db2 <_fwalk_reent+0xe>
 8002dc2:	4638      	mov	r0, r7
 8002dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dc8:	89ab      	ldrh	r3, [r5, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d907      	bls.n	8002dde <_fwalk_reent+0x3a>
 8002dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	d003      	beq.n	8002dde <_fwalk_reent+0x3a>
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	4630      	mov	r0, r6
 8002dda:	47c0      	blx	r8
 8002ddc:	4307      	orrs	r7, r0
 8002dde:	3568      	adds	r5, #104	; 0x68
 8002de0:	e7e9      	b.n	8002db6 <_fwalk_reent+0x12>

08002de2 <__retarget_lock_init_recursive>:
 8002de2:	4770      	bx	lr

08002de4 <__retarget_lock_acquire_recursive>:
 8002de4:	4770      	bx	lr

08002de6 <__retarget_lock_release_recursive>:
 8002de6:	4770      	bx	lr

08002de8 <_malloc_r>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	1ccd      	adds	r5, r1, #3
 8002dec:	f025 0503 	bic.w	r5, r5, #3
 8002df0:	3508      	adds	r5, #8
 8002df2:	2d0c      	cmp	r5, #12
 8002df4:	bf38      	it	cc
 8002df6:	250c      	movcc	r5, #12
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	4606      	mov	r6, r0
 8002dfc:	db01      	blt.n	8002e02 <_malloc_r+0x1a>
 8002dfe:	42a9      	cmp	r1, r5
 8002e00:	d903      	bls.n	8002e0a <_malloc_r+0x22>
 8002e02:	230c      	movs	r3, #12
 8002e04:	6033      	str	r3, [r6, #0]
 8002e06:	2000      	movs	r0, #0
 8002e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0a:	f000 fda3 	bl	8003954 <__malloc_lock>
 8002e0e:	4921      	ldr	r1, [pc, #132]	; (8002e94 <_malloc_r+0xac>)
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	4614      	mov	r4, r2
 8002e14:	b99c      	cbnz	r4, 8002e3e <_malloc_r+0x56>
 8002e16:	4f20      	ldr	r7, [pc, #128]	; (8002e98 <_malloc_r+0xb0>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b923      	cbnz	r3, 8002e26 <_malloc_r+0x3e>
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f000 fb2a 	bl	8003478 <_sbrk_r>
 8002e24:	6038      	str	r0, [r7, #0]
 8002e26:	4629      	mov	r1, r5
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f000 fb25 	bl	8003478 <_sbrk_r>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	d123      	bne.n	8002e7a <_malloc_r+0x92>
 8002e32:	230c      	movs	r3, #12
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	4630      	mov	r0, r6
 8002e38:	f000 fd92 	bl	8003960 <__malloc_unlock>
 8002e3c:	e7e3      	b.n	8002e06 <_malloc_r+0x1e>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	1b5b      	subs	r3, r3, r5
 8002e42:	d417      	bmi.n	8002e74 <_malloc_r+0x8c>
 8002e44:	2b0b      	cmp	r3, #11
 8002e46:	d903      	bls.n	8002e50 <_malloc_r+0x68>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	441c      	add	r4, r3
 8002e4c:	6025      	str	r5, [r4, #0]
 8002e4e:	e004      	b.n	8002e5a <_malloc_r+0x72>
 8002e50:	6863      	ldr	r3, [r4, #4]
 8002e52:	42a2      	cmp	r2, r4
 8002e54:	bf0c      	ite	eq
 8002e56:	600b      	streq	r3, [r1, #0]
 8002e58:	6053      	strne	r3, [r2, #4]
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 fd80 	bl	8003960 <__malloc_unlock>
 8002e60:	f104 000b 	add.w	r0, r4, #11
 8002e64:	1d23      	adds	r3, r4, #4
 8002e66:	f020 0007 	bic.w	r0, r0, #7
 8002e6a:	1ac2      	subs	r2, r0, r3
 8002e6c:	d0cc      	beq.n	8002e08 <_malloc_r+0x20>
 8002e6e:	1a1b      	subs	r3, r3, r0
 8002e70:	50a3      	str	r3, [r4, r2]
 8002e72:	e7c9      	b.n	8002e08 <_malloc_r+0x20>
 8002e74:	4622      	mov	r2, r4
 8002e76:	6864      	ldr	r4, [r4, #4]
 8002e78:	e7cc      	b.n	8002e14 <_malloc_r+0x2c>
 8002e7a:	1cc4      	adds	r4, r0, #3
 8002e7c:	f024 0403 	bic.w	r4, r4, #3
 8002e80:	42a0      	cmp	r0, r4
 8002e82:	d0e3      	beq.n	8002e4c <_malloc_r+0x64>
 8002e84:	1a21      	subs	r1, r4, r0
 8002e86:	4630      	mov	r0, r6
 8002e88:	f000 faf6 	bl	8003478 <_sbrk_r>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d1dd      	bne.n	8002e4c <_malloc_r+0x64>
 8002e90:	e7cf      	b.n	8002e32 <_malloc_r+0x4a>
 8002e92:	bf00      	nop
 8002e94:	20000090 	.word	0x20000090
 8002e98:	20000094 	.word	0x20000094

08002e9c <__sfputc_r>:
 8002e9c:	6893      	ldr	r3, [r2, #8]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	b410      	push	{r4}
 8002ea4:	6093      	str	r3, [r2, #8]
 8002ea6:	da08      	bge.n	8002eba <__sfputc_r+0x1e>
 8002ea8:	6994      	ldr	r4, [r2, #24]
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	db01      	blt.n	8002eb2 <__sfputc_r+0x16>
 8002eae:	290a      	cmp	r1, #10
 8002eb0:	d103      	bne.n	8002eba <__sfputc_r+0x1e>
 8002eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eb6:	f000 bb33 	b.w	8003520 <__swbuf_r>
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	1c58      	adds	r0, r3, #1
 8002ebe:	6010      	str	r0, [r2, #0]
 8002ec0:	7019      	strb	r1, [r3, #0]
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <__sfputs_r>:
 8002eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ecc:	4606      	mov	r6, r0
 8002ece:	460f      	mov	r7, r1
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	18d5      	adds	r5, r2, r3
 8002ed4:	42ac      	cmp	r4, r5
 8002ed6:	d101      	bne.n	8002edc <__sfputs_r+0x12>
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e007      	b.n	8002eec <__sfputs_r+0x22>
 8002edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee0:	463a      	mov	r2, r7
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff ffda 	bl	8002e9c <__sfputc_r>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d1f3      	bne.n	8002ed4 <__sfputs_r+0xa>
 8002eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ef0 <_vfiprintf_r>:
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	b09d      	sub	sp, #116	; 0x74
 8002ef8:	4614      	mov	r4, r2
 8002efa:	4698      	mov	r8, r3
 8002efc:	4606      	mov	r6, r0
 8002efe:	b118      	cbz	r0, 8002f08 <_vfiprintf_r+0x18>
 8002f00:	6983      	ldr	r3, [r0, #24]
 8002f02:	b90b      	cbnz	r3, 8002f08 <_vfiprintf_r+0x18>
 8002f04:	f7ff fed0 	bl	8002ca8 <__sinit>
 8002f08:	4b89      	ldr	r3, [pc, #548]	; (8003130 <_vfiprintf_r+0x240>)
 8002f0a:	429d      	cmp	r5, r3
 8002f0c:	d11b      	bne.n	8002f46 <_vfiprintf_r+0x56>
 8002f0e:	6875      	ldr	r5, [r6, #4]
 8002f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f12:	07d9      	lsls	r1, r3, #31
 8002f14:	d405      	bmi.n	8002f22 <_vfiprintf_r+0x32>
 8002f16:	89ab      	ldrh	r3, [r5, #12]
 8002f18:	059a      	lsls	r2, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_vfiprintf_r+0x32>
 8002f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f1e:	f7ff ff61 	bl	8002de4 <__retarget_lock_acquire_recursive>
 8002f22:	89ab      	ldrh	r3, [r5, #12]
 8002f24:	071b      	lsls	r3, r3, #28
 8002f26:	d501      	bpl.n	8002f2c <_vfiprintf_r+0x3c>
 8002f28:	692b      	ldr	r3, [r5, #16]
 8002f2a:	b9eb      	cbnz	r3, 8002f68 <_vfiprintf_r+0x78>
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f000 fb5a 	bl	80035e8 <__swsetup_r>
 8002f34:	b1c0      	cbz	r0, 8002f68 <_vfiprintf_r+0x78>
 8002f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f38:	07dc      	lsls	r4, r3, #31
 8002f3a:	d50e      	bpl.n	8002f5a <_vfiprintf_r+0x6a>
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	b01d      	add	sp, #116	; 0x74
 8002f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f46:	4b7b      	ldr	r3, [pc, #492]	; (8003134 <_vfiprintf_r+0x244>)
 8002f48:	429d      	cmp	r5, r3
 8002f4a:	d101      	bne.n	8002f50 <_vfiprintf_r+0x60>
 8002f4c:	68b5      	ldr	r5, [r6, #8]
 8002f4e:	e7df      	b.n	8002f10 <_vfiprintf_r+0x20>
 8002f50:	4b79      	ldr	r3, [pc, #484]	; (8003138 <_vfiprintf_r+0x248>)
 8002f52:	429d      	cmp	r5, r3
 8002f54:	bf08      	it	eq
 8002f56:	68f5      	ldreq	r5, [r6, #12]
 8002f58:	e7da      	b.n	8002f10 <_vfiprintf_r+0x20>
 8002f5a:	89ab      	ldrh	r3, [r5, #12]
 8002f5c:	0598      	lsls	r0, r3, #22
 8002f5e:	d4ed      	bmi.n	8002f3c <_vfiprintf_r+0x4c>
 8002f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f62:	f7ff ff40 	bl	8002de6 <__retarget_lock_release_recursive>
 8002f66:	e7e9      	b.n	8002f3c <_vfiprintf_r+0x4c>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f76:	2330      	movs	r3, #48	; 0x30
 8002f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800313c <_vfiprintf_r+0x24c>
 8002f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f80:	f04f 0901 	mov.w	r9, #1
 8002f84:	4623      	mov	r3, r4
 8002f86:	469a      	mov	sl, r3
 8002f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f8c:	b10a      	cbz	r2, 8002f92 <_vfiprintf_r+0xa2>
 8002f8e:	2a25      	cmp	r2, #37	; 0x25
 8002f90:	d1f9      	bne.n	8002f86 <_vfiprintf_r+0x96>
 8002f92:	ebba 0b04 	subs.w	fp, sl, r4
 8002f96:	d00b      	beq.n	8002fb0 <_vfiprintf_r+0xc0>
 8002f98:	465b      	mov	r3, fp
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f7ff ff93 	bl	8002eca <__sfputs_r>
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	f000 80aa 	beq.w	80030fe <_vfiprintf_r+0x20e>
 8002faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fac:	445a      	add	r2, fp
 8002fae:	9209      	str	r2, [sp, #36]	; 0x24
 8002fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a2 	beq.w	80030fe <_vfiprintf_r+0x20e>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fc4:	f10a 0a01 	add.w	sl, sl, #1
 8002fc8:	9304      	str	r3, [sp, #16]
 8002fca:	9307      	str	r3, [sp, #28]
 8002fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002fd2:	4654      	mov	r4, sl
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fda:	4858      	ldr	r0, [pc, #352]	; (800313c <_vfiprintf_r+0x24c>)
 8002fdc:	f7fd f8f8 	bl	80001d0 <memchr>
 8002fe0:	9a04      	ldr	r2, [sp, #16]
 8002fe2:	b9d8      	cbnz	r0, 800301c <_vfiprintf_r+0x12c>
 8002fe4:	06d1      	lsls	r1, r2, #27
 8002fe6:	bf44      	itt	mi
 8002fe8:	2320      	movmi	r3, #32
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fee:	0713      	lsls	r3, r2, #28
 8002ff0:	bf44      	itt	mi
 8002ff2:	232b      	movmi	r3, #43	; 0x2b
 8002ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d015      	beq.n	800302c <_vfiprintf_r+0x13c>
 8003000:	9a07      	ldr	r2, [sp, #28]
 8003002:	4654      	mov	r4, sl
 8003004:	2000      	movs	r0, #0
 8003006:	f04f 0c0a 	mov.w	ip, #10
 800300a:	4621      	mov	r1, r4
 800300c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003010:	3b30      	subs	r3, #48	; 0x30
 8003012:	2b09      	cmp	r3, #9
 8003014:	d94e      	bls.n	80030b4 <_vfiprintf_r+0x1c4>
 8003016:	b1b0      	cbz	r0, 8003046 <_vfiprintf_r+0x156>
 8003018:	9207      	str	r2, [sp, #28]
 800301a:	e014      	b.n	8003046 <_vfiprintf_r+0x156>
 800301c:	eba0 0308 	sub.w	r3, r0, r8
 8003020:	fa09 f303 	lsl.w	r3, r9, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	9304      	str	r3, [sp, #16]
 8003028:	46a2      	mov	sl, r4
 800302a:	e7d2      	b.n	8002fd2 <_vfiprintf_r+0xe2>
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	1d19      	adds	r1, r3, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	9103      	str	r1, [sp, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	bfbb      	ittet	lt
 8003038:	425b      	neglt	r3, r3
 800303a:	f042 0202 	orrlt.w	r2, r2, #2
 800303e:	9307      	strge	r3, [sp, #28]
 8003040:	9307      	strlt	r3, [sp, #28]
 8003042:	bfb8      	it	lt
 8003044:	9204      	strlt	r2, [sp, #16]
 8003046:	7823      	ldrb	r3, [r4, #0]
 8003048:	2b2e      	cmp	r3, #46	; 0x2e
 800304a:	d10c      	bne.n	8003066 <_vfiprintf_r+0x176>
 800304c:	7863      	ldrb	r3, [r4, #1]
 800304e:	2b2a      	cmp	r3, #42	; 0x2a
 8003050:	d135      	bne.n	80030be <_vfiprintf_r+0x1ce>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	1d1a      	adds	r2, r3, #4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	9203      	str	r2, [sp, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	bfb8      	it	lt
 800305e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003062:	3402      	adds	r4, #2
 8003064:	9305      	str	r3, [sp, #20]
 8003066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800314c <_vfiprintf_r+0x25c>
 800306a:	7821      	ldrb	r1, [r4, #0]
 800306c:	2203      	movs	r2, #3
 800306e:	4650      	mov	r0, sl
 8003070:	f7fd f8ae 	bl	80001d0 <memchr>
 8003074:	b140      	cbz	r0, 8003088 <_vfiprintf_r+0x198>
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	eba0 000a 	sub.w	r0, r0, sl
 800307c:	fa03 f000 	lsl.w	r0, r3, r0
 8003080:	9b04      	ldr	r3, [sp, #16]
 8003082:	4303      	orrs	r3, r0
 8003084:	3401      	adds	r4, #1
 8003086:	9304      	str	r3, [sp, #16]
 8003088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800308c:	482c      	ldr	r0, [pc, #176]	; (8003140 <_vfiprintf_r+0x250>)
 800308e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003092:	2206      	movs	r2, #6
 8003094:	f7fd f89c 	bl	80001d0 <memchr>
 8003098:	2800      	cmp	r0, #0
 800309a:	d03f      	beq.n	800311c <_vfiprintf_r+0x22c>
 800309c:	4b29      	ldr	r3, [pc, #164]	; (8003144 <_vfiprintf_r+0x254>)
 800309e:	bb1b      	cbnz	r3, 80030e8 <_vfiprintf_r+0x1f8>
 80030a0:	9b03      	ldr	r3, [sp, #12]
 80030a2:	3307      	adds	r3, #7
 80030a4:	f023 0307 	bic.w	r3, r3, #7
 80030a8:	3308      	adds	r3, #8
 80030aa:	9303      	str	r3, [sp, #12]
 80030ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ae:	443b      	add	r3, r7
 80030b0:	9309      	str	r3, [sp, #36]	; 0x24
 80030b2:	e767      	b.n	8002f84 <_vfiprintf_r+0x94>
 80030b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b8:	460c      	mov	r4, r1
 80030ba:	2001      	movs	r0, #1
 80030bc:	e7a5      	b.n	800300a <_vfiprintf_r+0x11a>
 80030be:	2300      	movs	r3, #0
 80030c0:	3401      	adds	r4, #1
 80030c2:	9305      	str	r3, [sp, #20]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 0c0a 	mov.w	ip, #10
 80030ca:	4620      	mov	r0, r4
 80030cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030d0:	3a30      	subs	r2, #48	; 0x30
 80030d2:	2a09      	cmp	r2, #9
 80030d4:	d903      	bls.n	80030de <_vfiprintf_r+0x1ee>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0c5      	beq.n	8003066 <_vfiprintf_r+0x176>
 80030da:	9105      	str	r1, [sp, #20]
 80030dc:	e7c3      	b.n	8003066 <_vfiprintf_r+0x176>
 80030de:	fb0c 2101 	mla	r1, ip, r1, r2
 80030e2:	4604      	mov	r4, r0
 80030e4:	2301      	movs	r3, #1
 80030e6:	e7f0      	b.n	80030ca <_vfiprintf_r+0x1da>
 80030e8:	ab03      	add	r3, sp, #12
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	462a      	mov	r2, r5
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <_vfiprintf_r+0x258>)
 80030f0:	a904      	add	r1, sp, #16
 80030f2:	4630      	mov	r0, r6
 80030f4:	f3af 8000 	nop.w
 80030f8:	4607      	mov	r7, r0
 80030fa:	1c78      	adds	r0, r7, #1
 80030fc:	d1d6      	bne.n	80030ac <_vfiprintf_r+0x1bc>
 80030fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003100:	07d9      	lsls	r1, r3, #31
 8003102:	d405      	bmi.n	8003110 <_vfiprintf_r+0x220>
 8003104:	89ab      	ldrh	r3, [r5, #12]
 8003106:	059a      	lsls	r2, r3, #22
 8003108:	d402      	bmi.n	8003110 <_vfiprintf_r+0x220>
 800310a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800310c:	f7ff fe6b 	bl	8002de6 <__retarget_lock_release_recursive>
 8003110:	89ab      	ldrh	r3, [r5, #12]
 8003112:	065b      	lsls	r3, r3, #25
 8003114:	f53f af12 	bmi.w	8002f3c <_vfiprintf_r+0x4c>
 8003118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800311a:	e711      	b.n	8002f40 <_vfiprintf_r+0x50>
 800311c:	ab03      	add	r3, sp, #12
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	462a      	mov	r2, r5
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <_vfiprintf_r+0x258>)
 8003124:	a904      	add	r1, sp, #16
 8003126:	4630      	mov	r0, r6
 8003128:	f000 f880 	bl	800322c <_printf_i>
 800312c:	e7e4      	b.n	80030f8 <_vfiprintf_r+0x208>
 800312e:	bf00      	nop
 8003130:	08003b08 	.word	0x08003b08
 8003134:	08003b28 	.word	0x08003b28
 8003138:	08003ae8 	.word	0x08003ae8
 800313c:	08003b48 	.word	0x08003b48
 8003140:	08003b52 	.word	0x08003b52
 8003144:	00000000 	.word	0x00000000
 8003148:	08002ecb 	.word	0x08002ecb
 800314c:	08003b4e 	.word	0x08003b4e

08003150 <_printf_common>:
 8003150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003154:	4616      	mov	r6, r2
 8003156:	4699      	mov	r9, r3
 8003158:	688a      	ldr	r2, [r1, #8]
 800315a:	690b      	ldr	r3, [r1, #16]
 800315c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003160:	4293      	cmp	r3, r2
 8003162:	bfb8      	it	lt
 8003164:	4613      	movlt	r3, r2
 8003166:	6033      	str	r3, [r6, #0]
 8003168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800316c:	4607      	mov	r7, r0
 800316e:	460c      	mov	r4, r1
 8003170:	b10a      	cbz	r2, 8003176 <_printf_common+0x26>
 8003172:	3301      	adds	r3, #1
 8003174:	6033      	str	r3, [r6, #0]
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	0699      	lsls	r1, r3, #26
 800317a:	bf42      	ittt	mi
 800317c:	6833      	ldrmi	r3, [r6, #0]
 800317e:	3302      	addmi	r3, #2
 8003180:	6033      	strmi	r3, [r6, #0]
 8003182:	6825      	ldr	r5, [r4, #0]
 8003184:	f015 0506 	ands.w	r5, r5, #6
 8003188:	d106      	bne.n	8003198 <_printf_common+0x48>
 800318a:	f104 0a19 	add.w	sl, r4, #25
 800318e:	68e3      	ldr	r3, [r4, #12]
 8003190:	6832      	ldr	r2, [r6, #0]
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	42ab      	cmp	r3, r5
 8003196:	dc26      	bgt.n	80031e6 <_printf_common+0x96>
 8003198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800319c:	1e13      	subs	r3, r2, #0
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	bf18      	it	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	0692      	lsls	r2, r2, #26
 80031a6:	d42b      	bmi.n	8003200 <_printf_common+0xb0>
 80031a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031ac:	4649      	mov	r1, r9
 80031ae:	4638      	mov	r0, r7
 80031b0:	47c0      	blx	r8
 80031b2:	3001      	adds	r0, #1
 80031b4:	d01e      	beq.n	80031f4 <_printf_common+0xa4>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	68e5      	ldr	r5, [r4, #12]
 80031ba:	6832      	ldr	r2, [r6, #0]
 80031bc:	f003 0306 	and.w	r3, r3, #6
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	bf08      	it	eq
 80031c4:	1aad      	subeq	r5, r5, r2
 80031c6:	68a3      	ldr	r3, [r4, #8]
 80031c8:	6922      	ldr	r2, [r4, #16]
 80031ca:	bf0c      	ite	eq
 80031cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031d0:	2500      	movne	r5, #0
 80031d2:	4293      	cmp	r3, r2
 80031d4:	bfc4      	itt	gt
 80031d6:	1a9b      	subgt	r3, r3, r2
 80031d8:	18ed      	addgt	r5, r5, r3
 80031da:	2600      	movs	r6, #0
 80031dc:	341a      	adds	r4, #26
 80031de:	42b5      	cmp	r5, r6
 80031e0:	d11a      	bne.n	8003218 <_printf_common+0xc8>
 80031e2:	2000      	movs	r0, #0
 80031e4:	e008      	b.n	80031f8 <_printf_common+0xa8>
 80031e6:	2301      	movs	r3, #1
 80031e8:	4652      	mov	r2, sl
 80031ea:	4649      	mov	r1, r9
 80031ec:	4638      	mov	r0, r7
 80031ee:	47c0      	blx	r8
 80031f0:	3001      	adds	r0, #1
 80031f2:	d103      	bne.n	80031fc <_printf_common+0xac>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031fc:	3501      	adds	r5, #1
 80031fe:	e7c6      	b.n	800318e <_printf_common+0x3e>
 8003200:	18e1      	adds	r1, r4, r3
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	2030      	movs	r0, #48	; 0x30
 8003206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800320a:	4422      	add	r2, r4
 800320c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003214:	3302      	adds	r3, #2
 8003216:	e7c7      	b.n	80031a8 <_printf_common+0x58>
 8003218:	2301      	movs	r3, #1
 800321a:	4622      	mov	r2, r4
 800321c:	4649      	mov	r1, r9
 800321e:	4638      	mov	r0, r7
 8003220:	47c0      	blx	r8
 8003222:	3001      	adds	r0, #1
 8003224:	d0e6      	beq.n	80031f4 <_printf_common+0xa4>
 8003226:	3601      	adds	r6, #1
 8003228:	e7d9      	b.n	80031de <_printf_common+0x8e>
	...

0800322c <_printf_i>:
 800322c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	460c      	mov	r4, r1
 8003232:	4691      	mov	r9, r2
 8003234:	7e27      	ldrb	r7, [r4, #24]
 8003236:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003238:	2f78      	cmp	r7, #120	; 0x78
 800323a:	4680      	mov	r8, r0
 800323c:	469a      	mov	sl, r3
 800323e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003242:	d807      	bhi.n	8003254 <_printf_i+0x28>
 8003244:	2f62      	cmp	r7, #98	; 0x62
 8003246:	d80a      	bhi.n	800325e <_printf_i+0x32>
 8003248:	2f00      	cmp	r7, #0
 800324a:	f000 80d8 	beq.w	80033fe <_printf_i+0x1d2>
 800324e:	2f58      	cmp	r7, #88	; 0x58
 8003250:	f000 80a3 	beq.w	800339a <_printf_i+0x16e>
 8003254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800325c:	e03a      	b.n	80032d4 <_printf_i+0xa8>
 800325e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003262:	2b15      	cmp	r3, #21
 8003264:	d8f6      	bhi.n	8003254 <_printf_i+0x28>
 8003266:	a001      	add	r0, pc, #4	; (adr r0, 800326c <_printf_i+0x40>)
 8003268:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800326c:	080032c5 	.word	0x080032c5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	08003255 	.word	0x08003255
 8003278:	08003255 	.word	0x08003255
 800327c:	08003255 	.word	0x08003255
 8003280:	08003255 	.word	0x08003255
 8003284:	080032d9 	.word	0x080032d9
 8003288:	08003255 	.word	0x08003255
 800328c:	08003255 	.word	0x08003255
 8003290:	08003255 	.word	0x08003255
 8003294:	08003255 	.word	0x08003255
 8003298:	080033e5 	.word	0x080033e5
 800329c:	08003309 	.word	0x08003309
 80032a0:	080033c7 	.word	0x080033c7
 80032a4:	08003255 	.word	0x08003255
 80032a8:	08003255 	.word	0x08003255
 80032ac:	08003407 	.word	0x08003407
 80032b0:	08003255 	.word	0x08003255
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003255 	.word	0x08003255
 80032bc:	08003255 	.word	0x08003255
 80032c0:	080033cf 	.word	0x080033cf
 80032c4:	680b      	ldr	r3, [r1, #0]
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	600a      	str	r2, [r1, #0]
 80032cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0a3      	b.n	8003420 <_printf_i+0x1f4>
 80032d8:	6825      	ldr	r5, [r4, #0]
 80032da:	6808      	ldr	r0, [r1, #0]
 80032dc:	062e      	lsls	r6, r5, #24
 80032de:	f100 0304 	add.w	r3, r0, #4
 80032e2:	d50a      	bpl.n	80032fa <_printf_i+0xce>
 80032e4:	6805      	ldr	r5, [r0, #0]
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	da03      	bge.n	80032f4 <_printf_i+0xc8>
 80032ec:	232d      	movs	r3, #45	; 0x2d
 80032ee:	426d      	negs	r5, r5
 80032f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f4:	485e      	ldr	r0, [pc, #376]	; (8003470 <_printf_i+0x244>)
 80032f6:	230a      	movs	r3, #10
 80032f8:	e019      	b.n	800332e <_printf_i+0x102>
 80032fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032fe:	6805      	ldr	r5, [r0, #0]
 8003300:	600b      	str	r3, [r1, #0]
 8003302:	bf18      	it	ne
 8003304:	b22d      	sxthne	r5, r5
 8003306:	e7ef      	b.n	80032e8 <_printf_i+0xbc>
 8003308:	680b      	ldr	r3, [r1, #0]
 800330a:	6825      	ldr	r5, [r4, #0]
 800330c:	1d18      	adds	r0, r3, #4
 800330e:	6008      	str	r0, [r1, #0]
 8003310:	0628      	lsls	r0, r5, #24
 8003312:	d501      	bpl.n	8003318 <_printf_i+0xec>
 8003314:	681d      	ldr	r5, [r3, #0]
 8003316:	e002      	b.n	800331e <_printf_i+0xf2>
 8003318:	0669      	lsls	r1, r5, #25
 800331a:	d5fb      	bpl.n	8003314 <_printf_i+0xe8>
 800331c:	881d      	ldrh	r5, [r3, #0]
 800331e:	4854      	ldr	r0, [pc, #336]	; (8003470 <_printf_i+0x244>)
 8003320:	2f6f      	cmp	r7, #111	; 0x6f
 8003322:	bf0c      	ite	eq
 8003324:	2308      	moveq	r3, #8
 8003326:	230a      	movne	r3, #10
 8003328:	2100      	movs	r1, #0
 800332a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800332e:	6866      	ldr	r6, [r4, #4]
 8003330:	60a6      	str	r6, [r4, #8]
 8003332:	2e00      	cmp	r6, #0
 8003334:	bfa2      	ittt	ge
 8003336:	6821      	ldrge	r1, [r4, #0]
 8003338:	f021 0104 	bicge.w	r1, r1, #4
 800333c:	6021      	strge	r1, [r4, #0]
 800333e:	b90d      	cbnz	r5, 8003344 <_printf_i+0x118>
 8003340:	2e00      	cmp	r6, #0
 8003342:	d04d      	beq.n	80033e0 <_printf_i+0x1b4>
 8003344:	4616      	mov	r6, r2
 8003346:	fbb5 f1f3 	udiv	r1, r5, r3
 800334a:	fb03 5711 	mls	r7, r3, r1, r5
 800334e:	5dc7      	ldrb	r7, [r0, r7]
 8003350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003354:	462f      	mov	r7, r5
 8003356:	42bb      	cmp	r3, r7
 8003358:	460d      	mov	r5, r1
 800335a:	d9f4      	bls.n	8003346 <_printf_i+0x11a>
 800335c:	2b08      	cmp	r3, #8
 800335e:	d10b      	bne.n	8003378 <_printf_i+0x14c>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	07df      	lsls	r7, r3, #31
 8003364:	d508      	bpl.n	8003378 <_printf_i+0x14c>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	6861      	ldr	r1, [r4, #4]
 800336a:	4299      	cmp	r1, r3
 800336c:	bfde      	ittt	le
 800336e:	2330      	movle	r3, #48	; 0x30
 8003370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003378:	1b92      	subs	r2, r2, r6
 800337a:	6122      	str	r2, [r4, #16]
 800337c:	f8cd a000 	str.w	sl, [sp]
 8003380:	464b      	mov	r3, r9
 8003382:	aa03      	add	r2, sp, #12
 8003384:	4621      	mov	r1, r4
 8003386:	4640      	mov	r0, r8
 8003388:	f7ff fee2 	bl	8003150 <_printf_common>
 800338c:	3001      	adds	r0, #1
 800338e:	d14c      	bne.n	800342a <_printf_i+0x1fe>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b004      	add	sp, #16
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	4835      	ldr	r0, [pc, #212]	; (8003470 <_printf_i+0x244>)
 800339c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	680e      	ldr	r6, [r1, #0]
 80033a4:	061f      	lsls	r7, r3, #24
 80033a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80033aa:	600e      	str	r6, [r1, #0]
 80033ac:	d514      	bpl.n	80033d8 <_printf_i+0x1ac>
 80033ae:	07d9      	lsls	r1, r3, #31
 80033b0:	bf44      	itt	mi
 80033b2:	f043 0320 	orrmi.w	r3, r3, #32
 80033b6:	6023      	strmi	r3, [r4, #0]
 80033b8:	b91d      	cbnz	r5, 80033c2 <_printf_i+0x196>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	f023 0320 	bic.w	r3, r3, #32
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	2310      	movs	r3, #16
 80033c4:	e7b0      	b.n	8003328 <_printf_i+0xfc>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	f043 0320 	orr.w	r3, r3, #32
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	2378      	movs	r3, #120	; 0x78
 80033d0:	4828      	ldr	r0, [pc, #160]	; (8003474 <_printf_i+0x248>)
 80033d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033d6:	e7e3      	b.n	80033a0 <_printf_i+0x174>
 80033d8:	065e      	lsls	r6, r3, #25
 80033da:	bf48      	it	mi
 80033dc:	b2ad      	uxthmi	r5, r5
 80033de:	e7e6      	b.n	80033ae <_printf_i+0x182>
 80033e0:	4616      	mov	r6, r2
 80033e2:	e7bb      	b.n	800335c <_printf_i+0x130>
 80033e4:	680b      	ldr	r3, [r1, #0]
 80033e6:	6826      	ldr	r6, [r4, #0]
 80033e8:	6960      	ldr	r0, [r4, #20]
 80033ea:	1d1d      	adds	r5, r3, #4
 80033ec:	600d      	str	r5, [r1, #0]
 80033ee:	0635      	lsls	r5, r6, #24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	d501      	bpl.n	80033f8 <_printf_i+0x1cc>
 80033f4:	6018      	str	r0, [r3, #0]
 80033f6:	e002      	b.n	80033fe <_printf_i+0x1d2>
 80033f8:	0671      	lsls	r1, r6, #25
 80033fa:	d5fb      	bpl.n	80033f4 <_printf_i+0x1c8>
 80033fc:	8018      	strh	r0, [r3, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	6123      	str	r3, [r4, #16]
 8003402:	4616      	mov	r6, r2
 8003404:	e7ba      	b.n	800337c <_printf_i+0x150>
 8003406:	680b      	ldr	r3, [r1, #0]
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	600a      	str	r2, [r1, #0]
 800340c:	681e      	ldr	r6, [r3, #0]
 800340e:	6862      	ldr	r2, [r4, #4]
 8003410:	2100      	movs	r1, #0
 8003412:	4630      	mov	r0, r6
 8003414:	f7fc fedc 	bl	80001d0 <memchr>
 8003418:	b108      	cbz	r0, 800341e <_printf_i+0x1f2>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	6060      	str	r0, [r4, #4]
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	2300      	movs	r3, #0
 8003424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003428:	e7a8      	b.n	800337c <_printf_i+0x150>
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	4632      	mov	r2, r6
 800342e:	4649      	mov	r1, r9
 8003430:	4640      	mov	r0, r8
 8003432:	47d0      	blx	sl
 8003434:	3001      	adds	r0, #1
 8003436:	d0ab      	beq.n	8003390 <_printf_i+0x164>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	079b      	lsls	r3, r3, #30
 800343c:	d413      	bmi.n	8003466 <_printf_i+0x23a>
 800343e:	68e0      	ldr	r0, [r4, #12]
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	4298      	cmp	r0, r3
 8003444:	bfb8      	it	lt
 8003446:	4618      	movlt	r0, r3
 8003448:	e7a4      	b.n	8003394 <_printf_i+0x168>
 800344a:	2301      	movs	r3, #1
 800344c:	4632      	mov	r2, r6
 800344e:	4649      	mov	r1, r9
 8003450:	4640      	mov	r0, r8
 8003452:	47d0      	blx	sl
 8003454:	3001      	adds	r0, #1
 8003456:	d09b      	beq.n	8003390 <_printf_i+0x164>
 8003458:	3501      	adds	r5, #1
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	9903      	ldr	r1, [sp, #12]
 800345e:	1a5b      	subs	r3, r3, r1
 8003460:	42ab      	cmp	r3, r5
 8003462:	dcf2      	bgt.n	800344a <_printf_i+0x21e>
 8003464:	e7eb      	b.n	800343e <_printf_i+0x212>
 8003466:	2500      	movs	r5, #0
 8003468:	f104 0619 	add.w	r6, r4, #25
 800346c:	e7f5      	b.n	800345a <_printf_i+0x22e>
 800346e:	bf00      	nop
 8003470:	08003b59 	.word	0x08003b59
 8003474:	08003b6a 	.word	0x08003b6a

08003478 <_sbrk_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4d06      	ldr	r5, [pc, #24]	; (8003494 <_sbrk_r+0x1c>)
 800347c:	2300      	movs	r3, #0
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	f7fd faaa 	bl	80009dc <_sbrk>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d102      	bne.n	8003492 <_sbrk_r+0x1a>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	b103      	cbz	r3, 8003492 <_sbrk_r+0x1a>
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	bd38      	pop	{r3, r4, r5, pc}
 8003494:	2000012c 	.word	0x2000012c

08003498 <__sread>:
 8003498:	b510      	push	{r4, lr}
 800349a:	460c      	mov	r4, r1
 800349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a0:	f000 fab4 	bl	8003a0c <_read_r>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	bfab      	itete	ge
 80034a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034aa:	89a3      	ldrhlt	r3, [r4, #12]
 80034ac:	181b      	addge	r3, r3, r0
 80034ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034b2:	bfac      	ite	ge
 80034b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80034b6:	81a3      	strhlt	r3, [r4, #12]
 80034b8:	bd10      	pop	{r4, pc}

080034ba <__swrite>:
 80034ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034be:	461f      	mov	r7, r3
 80034c0:	898b      	ldrh	r3, [r1, #12]
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	4605      	mov	r5, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	4616      	mov	r6, r2
 80034ca:	d505      	bpl.n	80034d8 <__swrite+0x1e>
 80034cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d0:	2302      	movs	r3, #2
 80034d2:	2200      	movs	r2, #0
 80034d4:	f000 f9c8 	bl	8003868 <_lseek_r>
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e2:	81a3      	strh	r3, [r4, #12]
 80034e4:	4632      	mov	r2, r6
 80034e6:	463b      	mov	r3, r7
 80034e8:	4628      	mov	r0, r5
 80034ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ee:	f000 b869 	b.w	80035c4 <_write_r>

080034f2 <__sseek>:
 80034f2:	b510      	push	{r4, lr}
 80034f4:	460c      	mov	r4, r1
 80034f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fa:	f000 f9b5 	bl	8003868 <_lseek_r>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	bf15      	itete	ne
 8003504:	6560      	strne	r0, [r4, #84]	; 0x54
 8003506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800350a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800350e:	81a3      	strheq	r3, [r4, #12]
 8003510:	bf18      	it	ne
 8003512:	81a3      	strhne	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__sclose>:
 8003516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351a:	f000 b8d3 	b.w	80036c4 <_close_r>
	...

08003520 <__swbuf_r>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	460e      	mov	r6, r1
 8003524:	4614      	mov	r4, r2
 8003526:	4605      	mov	r5, r0
 8003528:	b118      	cbz	r0, 8003532 <__swbuf_r+0x12>
 800352a:	6983      	ldr	r3, [r0, #24]
 800352c:	b90b      	cbnz	r3, 8003532 <__swbuf_r+0x12>
 800352e:	f7ff fbbb 	bl	8002ca8 <__sinit>
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <__swbuf_r+0x98>)
 8003534:	429c      	cmp	r4, r3
 8003536:	d12b      	bne.n	8003590 <__swbuf_r+0x70>
 8003538:	686c      	ldr	r4, [r5, #4]
 800353a:	69a3      	ldr	r3, [r4, #24]
 800353c:	60a3      	str	r3, [r4, #8]
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	071a      	lsls	r2, r3, #28
 8003542:	d52f      	bpl.n	80035a4 <__swbuf_r+0x84>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	b36b      	cbz	r3, 80035a4 <__swbuf_r+0x84>
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1ac0      	subs	r0, r0, r3
 800354e:	6963      	ldr	r3, [r4, #20]
 8003550:	b2f6      	uxtb	r6, r6
 8003552:	4283      	cmp	r3, r0
 8003554:	4637      	mov	r7, r6
 8003556:	dc04      	bgt.n	8003562 <__swbuf_r+0x42>
 8003558:	4621      	mov	r1, r4
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f948 	bl	80037f0 <_fflush_r>
 8003560:	bb30      	cbnz	r0, 80035b0 <__swbuf_r+0x90>
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	6022      	str	r2, [r4, #0]
 800356e:	701e      	strb	r6, [r3, #0]
 8003570:	6963      	ldr	r3, [r4, #20]
 8003572:	3001      	adds	r0, #1
 8003574:	4283      	cmp	r3, r0
 8003576:	d004      	beq.n	8003582 <__swbuf_r+0x62>
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	07db      	lsls	r3, r3, #31
 800357c:	d506      	bpl.n	800358c <__swbuf_r+0x6c>
 800357e:	2e0a      	cmp	r6, #10
 8003580:	d104      	bne.n	800358c <__swbuf_r+0x6c>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 f933 	bl	80037f0 <_fflush_r>
 800358a:	b988      	cbnz	r0, 80035b0 <__swbuf_r+0x90>
 800358c:	4638      	mov	r0, r7
 800358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <__swbuf_r+0x9c>)
 8003592:	429c      	cmp	r4, r3
 8003594:	d101      	bne.n	800359a <__swbuf_r+0x7a>
 8003596:	68ac      	ldr	r4, [r5, #8]
 8003598:	e7cf      	b.n	800353a <__swbuf_r+0x1a>
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <__swbuf_r+0xa0>)
 800359c:	429c      	cmp	r4, r3
 800359e:	bf08      	it	eq
 80035a0:	68ec      	ldreq	r4, [r5, #12]
 80035a2:	e7ca      	b.n	800353a <__swbuf_r+0x1a>
 80035a4:	4621      	mov	r1, r4
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 f81e 	bl	80035e8 <__swsetup_r>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d0cb      	beq.n	8003548 <__swbuf_r+0x28>
 80035b0:	f04f 37ff 	mov.w	r7, #4294967295
 80035b4:	e7ea      	b.n	800358c <__swbuf_r+0x6c>
 80035b6:	bf00      	nop
 80035b8:	08003b08 	.word	0x08003b08
 80035bc:	08003b28 	.word	0x08003b28
 80035c0:	08003ae8 	.word	0x08003ae8

080035c4 <_write_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4d07      	ldr	r5, [pc, #28]	; (80035e4 <_write_r+0x20>)
 80035c8:	4604      	mov	r4, r0
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	602a      	str	r2, [r5, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f7fc ffef 	bl	80005b6 <_write>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_write_r+0x1e>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_write_r+0x1e>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	2000012c 	.word	0x2000012c

080035e8 <__swsetup_r>:
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <__swsetup_r+0xcc>)
 80035ea:	b570      	push	{r4, r5, r6, lr}
 80035ec:	681d      	ldr	r5, [r3, #0]
 80035ee:	4606      	mov	r6, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	b125      	cbz	r5, 80035fe <__swsetup_r+0x16>
 80035f4:	69ab      	ldr	r3, [r5, #24]
 80035f6:	b913      	cbnz	r3, 80035fe <__swsetup_r+0x16>
 80035f8:	4628      	mov	r0, r5
 80035fa:	f7ff fb55 	bl	8002ca8 <__sinit>
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <__swsetup_r+0xd0>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d10f      	bne.n	8003624 <__swsetup_r+0x3c>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800360c:	0719      	lsls	r1, r3, #28
 800360e:	d42c      	bmi.n	800366a <__swsetup_r+0x82>
 8003610:	06dd      	lsls	r5, r3, #27
 8003612:	d411      	bmi.n	8003638 <__swsetup_r+0x50>
 8003614:	2309      	movs	r3, #9
 8003616:	6033      	str	r3, [r6, #0]
 8003618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	e03e      	b.n	80036a2 <__swsetup_r+0xba>
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <__swsetup_r+0xd4>)
 8003626:	429c      	cmp	r4, r3
 8003628:	d101      	bne.n	800362e <__swsetup_r+0x46>
 800362a:	68ac      	ldr	r4, [r5, #8]
 800362c:	e7eb      	b.n	8003606 <__swsetup_r+0x1e>
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <__swsetup_r+0xd8>)
 8003630:	429c      	cmp	r4, r3
 8003632:	bf08      	it	eq
 8003634:	68ec      	ldreq	r4, [r5, #12]
 8003636:	e7e6      	b.n	8003606 <__swsetup_r+0x1e>
 8003638:	0758      	lsls	r0, r3, #29
 800363a:	d512      	bpl.n	8003662 <__swsetup_r+0x7a>
 800363c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800363e:	b141      	cbz	r1, 8003652 <__swsetup_r+0x6a>
 8003640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003644:	4299      	cmp	r1, r3
 8003646:	d002      	beq.n	800364e <__swsetup_r+0x66>
 8003648:	4630      	mov	r0, r6
 800364a:	f000 f98f 	bl	800396c <_free_r>
 800364e:	2300      	movs	r3, #0
 8003650:	6363      	str	r3, [r4, #52]	; 0x34
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	2300      	movs	r3, #0
 800365c:	6063      	str	r3, [r4, #4]
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f043 0308 	orr.w	r3, r3, #8
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	b94b      	cbnz	r3, 8003682 <__swsetup_r+0x9a>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003678:	d003      	beq.n	8003682 <__swsetup_r+0x9a>
 800367a:	4621      	mov	r1, r4
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f929 	bl	80038d4 <__smakebuf_r>
 8003682:	89a0      	ldrh	r0, [r4, #12]
 8003684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003688:	f010 0301 	ands.w	r3, r0, #1
 800368c:	d00a      	beq.n	80036a4 <__swsetup_r+0xbc>
 800368e:	2300      	movs	r3, #0
 8003690:	60a3      	str	r3, [r4, #8]
 8003692:	6963      	ldr	r3, [r4, #20]
 8003694:	425b      	negs	r3, r3
 8003696:	61a3      	str	r3, [r4, #24]
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	b943      	cbnz	r3, 80036ae <__swsetup_r+0xc6>
 800369c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036a0:	d1ba      	bne.n	8003618 <__swsetup_r+0x30>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	0781      	lsls	r1, r0, #30
 80036a6:	bf58      	it	pl
 80036a8:	6963      	ldrpl	r3, [r4, #20]
 80036aa:	60a3      	str	r3, [r4, #8]
 80036ac:	e7f4      	b.n	8003698 <__swsetup_r+0xb0>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7f7      	b.n	80036a2 <__swsetup_r+0xba>
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	08003b08 	.word	0x08003b08
 80036bc:	08003b28 	.word	0x08003b28
 80036c0:	08003ae8 	.word	0x08003ae8

080036c4 <_close_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d06      	ldr	r5, [pc, #24]	; (80036e0 <_close_r+0x1c>)
 80036c8:	2300      	movs	r3, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	f7fd f94f 	bl	8000972 <_close>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_close_r+0x1a>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_close_r+0x1a>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	2000012c 	.word	0x2000012c

080036e4 <__sflush_r>:
 80036e4:	898a      	ldrh	r2, [r1, #12]
 80036e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ea:	4605      	mov	r5, r0
 80036ec:	0710      	lsls	r0, r2, #28
 80036ee:	460c      	mov	r4, r1
 80036f0:	d458      	bmi.n	80037a4 <__sflush_r+0xc0>
 80036f2:	684b      	ldr	r3, [r1, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dc05      	bgt.n	8003704 <__sflush_r+0x20>
 80036f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dc02      	bgt.n	8003704 <__sflush_r+0x20>
 80036fe:	2000      	movs	r0, #0
 8003700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003706:	2e00      	cmp	r6, #0
 8003708:	d0f9      	beq.n	80036fe <__sflush_r+0x1a>
 800370a:	2300      	movs	r3, #0
 800370c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003710:	682f      	ldr	r7, [r5, #0]
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	d032      	beq.n	800377c <__sflush_r+0x98>
 8003716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	075a      	lsls	r2, r3, #29
 800371c:	d505      	bpl.n	800372a <__sflush_r+0x46>
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	1ac0      	subs	r0, r0, r3
 8003722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003724:	b10b      	cbz	r3, 800372a <__sflush_r+0x46>
 8003726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003728:	1ac0      	subs	r0, r0, r3
 800372a:	2300      	movs	r3, #0
 800372c:	4602      	mov	r2, r0
 800372e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003730:	6a21      	ldr	r1, [r4, #32]
 8003732:	4628      	mov	r0, r5
 8003734:	47b0      	blx	r6
 8003736:	1c43      	adds	r3, r0, #1
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	d106      	bne.n	800374a <__sflush_r+0x66>
 800373c:	6829      	ldr	r1, [r5, #0]
 800373e:	291d      	cmp	r1, #29
 8003740:	d82c      	bhi.n	800379c <__sflush_r+0xb8>
 8003742:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <__sflush_r+0x108>)
 8003744:	40ca      	lsrs	r2, r1
 8003746:	07d6      	lsls	r6, r2, #31
 8003748:	d528      	bpl.n	800379c <__sflush_r+0xb8>
 800374a:	2200      	movs	r2, #0
 800374c:	6062      	str	r2, [r4, #4]
 800374e:	04d9      	lsls	r1, r3, #19
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	d504      	bpl.n	8003760 <__sflush_r+0x7c>
 8003756:	1c42      	adds	r2, r0, #1
 8003758:	d101      	bne.n	800375e <__sflush_r+0x7a>
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	b903      	cbnz	r3, 8003760 <__sflush_r+0x7c>
 800375e:	6560      	str	r0, [r4, #84]	; 0x54
 8003760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003762:	602f      	str	r7, [r5, #0]
 8003764:	2900      	cmp	r1, #0
 8003766:	d0ca      	beq.n	80036fe <__sflush_r+0x1a>
 8003768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800376c:	4299      	cmp	r1, r3
 800376e:	d002      	beq.n	8003776 <__sflush_r+0x92>
 8003770:	4628      	mov	r0, r5
 8003772:	f000 f8fb 	bl	800396c <_free_r>
 8003776:	2000      	movs	r0, #0
 8003778:	6360      	str	r0, [r4, #52]	; 0x34
 800377a:	e7c1      	b.n	8003700 <__sflush_r+0x1c>
 800377c:	6a21      	ldr	r1, [r4, #32]
 800377e:	2301      	movs	r3, #1
 8003780:	4628      	mov	r0, r5
 8003782:	47b0      	blx	r6
 8003784:	1c41      	adds	r1, r0, #1
 8003786:	d1c7      	bne.n	8003718 <__sflush_r+0x34>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0c4      	beq.n	8003718 <__sflush_r+0x34>
 800378e:	2b1d      	cmp	r3, #29
 8003790:	d001      	beq.n	8003796 <__sflush_r+0xb2>
 8003792:	2b16      	cmp	r3, #22
 8003794:	d101      	bne.n	800379a <__sflush_r+0xb6>
 8003796:	602f      	str	r7, [r5, #0]
 8003798:	e7b1      	b.n	80036fe <__sflush_r+0x1a>
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	e7ad      	b.n	8003700 <__sflush_r+0x1c>
 80037a4:	690f      	ldr	r7, [r1, #16]
 80037a6:	2f00      	cmp	r7, #0
 80037a8:	d0a9      	beq.n	80036fe <__sflush_r+0x1a>
 80037aa:	0793      	lsls	r3, r2, #30
 80037ac:	680e      	ldr	r6, [r1, #0]
 80037ae:	bf08      	it	eq
 80037b0:	694b      	ldreq	r3, [r1, #20]
 80037b2:	600f      	str	r7, [r1, #0]
 80037b4:	bf18      	it	ne
 80037b6:	2300      	movne	r3, #0
 80037b8:	eba6 0807 	sub.w	r8, r6, r7
 80037bc:	608b      	str	r3, [r1, #8]
 80037be:	f1b8 0f00 	cmp.w	r8, #0
 80037c2:	dd9c      	ble.n	80036fe <__sflush_r+0x1a>
 80037c4:	6a21      	ldr	r1, [r4, #32]
 80037c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037c8:	4643      	mov	r3, r8
 80037ca:	463a      	mov	r2, r7
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b0      	blx	r6
 80037d0:	2800      	cmp	r0, #0
 80037d2:	dc06      	bgt.n	80037e2 <__sflush_r+0xfe>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037da:	81a3      	strh	r3, [r4, #12]
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	e78e      	b.n	8003700 <__sflush_r+0x1c>
 80037e2:	4407      	add	r7, r0
 80037e4:	eba8 0800 	sub.w	r8, r8, r0
 80037e8:	e7e9      	b.n	80037be <__sflush_r+0xda>
 80037ea:	bf00      	nop
 80037ec:	20400001 	.word	0x20400001

080037f0 <_fflush_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	4605      	mov	r5, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	b913      	cbnz	r3, 8003800 <_fflush_r+0x10>
 80037fa:	2500      	movs	r5, #0
 80037fc:	4628      	mov	r0, r5
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	b118      	cbz	r0, 800380a <_fflush_r+0x1a>
 8003802:	6983      	ldr	r3, [r0, #24]
 8003804:	b90b      	cbnz	r3, 800380a <_fflush_r+0x1a>
 8003806:	f7ff fa4f 	bl	8002ca8 <__sinit>
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <_fflush_r+0x6c>)
 800380c:	429c      	cmp	r4, r3
 800380e:	d11b      	bne.n	8003848 <_fflush_r+0x58>
 8003810:	686c      	ldr	r4, [r5, #4]
 8003812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0ef      	beq.n	80037fa <_fflush_r+0xa>
 800381a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800381c:	07d0      	lsls	r0, r2, #31
 800381e:	d404      	bmi.n	800382a <_fflush_r+0x3a>
 8003820:	0599      	lsls	r1, r3, #22
 8003822:	d402      	bmi.n	800382a <_fflush_r+0x3a>
 8003824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003826:	f7ff fadd 	bl	8002de4 <__retarget_lock_acquire_recursive>
 800382a:	4628      	mov	r0, r5
 800382c:	4621      	mov	r1, r4
 800382e:	f7ff ff59 	bl	80036e4 <__sflush_r>
 8003832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003834:	07da      	lsls	r2, r3, #31
 8003836:	4605      	mov	r5, r0
 8003838:	d4e0      	bmi.n	80037fc <_fflush_r+0xc>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	059b      	lsls	r3, r3, #22
 800383e:	d4dd      	bmi.n	80037fc <_fflush_r+0xc>
 8003840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003842:	f7ff fad0 	bl	8002de6 <__retarget_lock_release_recursive>
 8003846:	e7d9      	b.n	80037fc <_fflush_r+0xc>
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <_fflush_r+0x70>)
 800384a:	429c      	cmp	r4, r3
 800384c:	d101      	bne.n	8003852 <_fflush_r+0x62>
 800384e:	68ac      	ldr	r4, [r5, #8]
 8003850:	e7df      	b.n	8003812 <_fflush_r+0x22>
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <_fflush_r+0x74>)
 8003854:	429c      	cmp	r4, r3
 8003856:	bf08      	it	eq
 8003858:	68ec      	ldreq	r4, [r5, #12]
 800385a:	e7da      	b.n	8003812 <_fflush_r+0x22>
 800385c:	08003b08 	.word	0x08003b08
 8003860:	08003b28 	.word	0x08003b28
 8003864:	08003ae8 	.word	0x08003ae8

08003868 <_lseek_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4d07      	ldr	r5, [pc, #28]	; (8003888 <_lseek_r+0x20>)
 800386c:	4604      	mov	r4, r0
 800386e:	4608      	mov	r0, r1
 8003870:	4611      	mov	r1, r2
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fd f8a2 	bl	80009c0 <_lseek>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_lseek_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_lseek_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	2000012c 	.word	0x2000012c

0800388c <__swhatbuf_r>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	460e      	mov	r6, r1
 8003890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003894:	2900      	cmp	r1, #0
 8003896:	b096      	sub	sp, #88	; 0x58
 8003898:	4614      	mov	r4, r2
 800389a:	461d      	mov	r5, r3
 800389c:	da07      	bge.n	80038ae <__swhatbuf_r+0x22>
 800389e:	2300      	movs	r3, #0
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	89b3      	ldrh	r3, [r6, #12]
 80038a4:	061a      	lsls	r2, r3, #24
 80038a6:	d410      	bmi.n	80038ca <__swhatbuf_r+0x3e>
 80038a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ac:	e00e      	b.n	80038cc <__swhatbuf_r+0x40>
 80038ae:	466a      	mov	r2, sp
 80038b0:	f000 f8be 	bl	8003a30 <_fstat_r>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	dbf2      	blt.n	800389e <__swhatbuf_r+0x12>
 80038b8:	9a01      	ldr	r2, [sp, #4]
 80038ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038c2:	425a      	negs	r2, r3
 80038c4:	415a      	adcs	r2, r3
 80038c6:	602a      	str	r2, [r5, #0]
 80038c8:	e7ee      	b.n	80038a8 <__swhatbuf_r+0x1c>
 80038ca:	2340      	movs	r3, #64	; 0x40
 80038cc:	2000      	movs	r0, #0
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	b016      	add	sp, #88	; 0x58
 80038d2:	bd70      	pop	{r4, r5, r6, pc}

080038d4 <__smakebuf_r>:
 80038d4:	898b      	ldrh	r3, [r1, #12]
 80038d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d8:	079d      	lsls	r5, r3, #30
 80038da:	4606      	mov	r6, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	d507      	bpl.n	80038f0 <__smakebuf_r+0x1c>
 80038e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	2301      	movs	r3, #1
 80038ea:	6163      	str	r3, [r4, #20]
 80038ec:	b002      	add	sp, #8
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	ab01      	add	r3, sp, #4
 80038f2:	466a      	mov	r2, sp
 80038f4:	f7ff ffca 	bl	800388c <__swhatbuf_r>
 80038f8:	9900      	ldr	r1, [sp, #0]
 80038fa:	4605      	mov	r5, r0
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff fa73 	bl	8002de8 <_malloc_r>
 8003902:	b948      	cbnz	r0, 8003918 <__smakebuf_r+0x44>
 8003904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003908:	059a      	lsls	r2, r3, #22
 800390a:	d4ef      	bmi.n	80038ec <__smakebuf_r+0x18>
 800390c:	f023 0303 	bic.w	r3, r3, #3
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	e7e3      	b.n	80038e0 <__smakebuf_r+0xc>
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <__smakebuf_r+0x7c>)
 800391a:	62b3      	str	r3, [r6, #40]	; 0x28
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	6020      	str	r0, [r4, #0]
 8003920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003924:	81a3      	strh	r3, [r4, #12]
 8003926:	9b00      	ldr	r3, [sp, #0]
 8003928:	6163      	str	r3, [r4, #20]
 800392a:	9b01      	ldr	r3, [sp, #4]
 800392c:	6120      	str	r0, [r4, #16]
 800392e:	b15b      	cbz	r3, 8003948 <__smakebuf_r+0x74>
 8003930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003934:	4630      	mov	r0, r6
 8003936:	f000 f88d 	bl	8003a54 <_isatty_r>
 800393a:	b128      	cbz	r0, 8003948 <__smakebuf_r+0x74>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	89a0      	ldrh	r0, [r4, #12]
 800394a:	4305      	orrs	r5, r0
 800394c:	81a5      	strh	r5, [r4, #12]
 800394e:	e7cd      	b.n	80038ec <__smakebuf_r+0x18>
 8003950:	08002c41 	.word	0x08002c41

08003954 <__malloc_lock>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__malloc_lock+0x8>)
 8003956:	f7ff ba45 	b.w	8002de4 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	20000124 	.word	0x20000124

08003960 <__malloc_unlock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_unlock+0x8>)
 8003962:	f7ff ba40 	b.w	8002de6 <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	20000124 	.word	0x20000124

0800396c <_free_r>:
 800396c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800396e:	2900      	cmp	r1, #0
 8003970:	d048      	beq.n	8003a04 <_free_r+0x98>
 8003972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003976:	9001      	str	r0, [sp, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f1a1 0404 	sub.w	r4, r1, #4
 800397e:	bfb8      	it	lt
 8003980:	18e4      	addlt	r4, r4, r3
 8003982:	f7ff ffe7 	bl	8003954 <__malloc_lock>
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <_free_r+0x9c>)
 8003988:	9801      	ldr	r0, [sp, #4]
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	4615      	mov	r5, r2
 800398e:	b933      	cbnz	r3, 800399e <_free_r+0x32>
 8003990:	6063      	str	r3, [r4, #4]
 8003992:	6014      	str	r4, [r2, #0]
 8003994:	b003      	add	sp, #12
 8003996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800399a:	f7ff bfe1 	b.w	8003960 <__malloc_unlock>
 800399e:	42a3      	cmp	r3, r4
 80039a0:	d90b      	bls.n	80039ba <_free_r+0x4e>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	1862      	adds	r2, r4, r1
 80039a6:	4293      	cmp	r3, r2
 80039a8:	bf04      	itt	eq
 80039aa:	681a      	ldreq	r2, [r3, #0]
 80039ac:	685b      	ldreq	r3, [r3, #4]
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	bf04      	itt	eq
 80039b2:	1852      	addeq	r2, r2, r1
 80039b4:	6022      	streq	r2, [r4, #0]
 80039b6:	602c      	str	r4, [r5, #0]
 80039b8:	e7ec      	b.n	8003994 <_free_r+0x28>
 80039ba:	461a      	mov	r2, r3
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b10b      	cbz	r3, 80039c4 <_free_r+0x58>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d9fa      	bls.n	80039ba <_free_r+0x4e>
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	1855      	adds	r5, r2, r1
 80039c8:	42a5      	cmp	r5, r4
 80039ca:	d10b      	bne.n	80039e4 <_free_r+0x78>
 80039cc:	6824      	ldr	r4, [r4, #0]
 80039ce:	4421      	add	r1, r4
 80039d0:	1854      	adds	r4, r2, r1
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	d1dd      	bne.n	8003994 <_free_r+0x28>
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6053      	str	r3, [r2, #4]
 80039de:	4421      	add	r1, r4
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	e7d7      	b.n	8003994 <_free_r+0x28>
 80039e4:	d902      	bls.n	80039ec <_free_r+0x80>
 80039e6:	230c      	movs	r3, #12
 80039e8:	6003      	str	r3, [r0, #0]
 80039ea:	e7d3      	b.n	8003994 <_free_r+0x28>
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	1961      	adds	r1, r4, r5
 80039f0:	428b      	cmp	r3, r1
 80039f2:	bf04      	itt	eq
 80039f4:	6819      	ldreq	r1, [r3, #0]
 80039f6:	685b      	ldreq	r3, [r3, #4]
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	bf04      	itt	eq
 80039fc:	1949      	addeq	r1, r1, r5
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	6054      	str	r4, [r2, #4]
 8003a02:	e7c7      	b.n	8003994 <_free_r+0x28>
 8003a04:	b003      	add	sp, #12
 8003a06:	bd30      	pop	{r4, r5, pc}
 8003a08:	20000090 	.word	0x20000090

08003a0c <_read_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d07      	ldr	r5, [pc, #28]	; (8003a2c <_read_r+0x20>)
 8003a10:	4604      	mov	r4, r0
 8003a12:	4608      	mov	r0, r1
 8003a14:	4611      	mov	r1, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	602a      	str	r2, [r5, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f7fc ff8c 	bl	8000938 <_read>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_read_r+0x1e>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_read_r+0x1e>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	2000012c 	.word	0x2000012c

08003a30 <_fstat_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4d07      	ldr	r5, [pc, #28]	; (8003a50 <_fstat_r+0x20>)
 8003a34:	2300      	movs	r3, #0
 8003a36:	4604      	mov	r4, r0
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	602b      	str	r3, [r5, #0]
 8003a3e:	f7fc ffa4 	bl	800098a <_fstat>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	d102      	bne.n	8003a4c <_fstat_r+0x1c>
 8003a46:	682b      	ldr	r3, [r5, #0]
 8003a48:	b103      	cbz	r3, 8003a4c <_fstat_r+0x1c>
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	bd38      	pop	{r3, r4, r5, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000012c 	.word	0x2000012c

08003a54 <_isatty_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4d06      	ldr	r5, [pc, #24]	; (8003a70 <_isatty_r+0x1c>)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	f7fc ffa3 	bl	80009aa <_isatty>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_isatty_r+0x1a>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_isatty_r+0x1a>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	2000012c 	.word	0x2000012c

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
