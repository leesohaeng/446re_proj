
446RE_USART2_RX_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000160c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017d0  080017d0  000117d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080017f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000064  2000000c  08001804  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000070  08001804  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ea1c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002137  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000034a8  00000000  00000000  00030b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000608  00000000  00000000  00034038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007b0  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003d91  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000029c8  00000000  00000000  00038b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b549  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f54  00000000  00000000  0003b5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080017b8 	.word	0x080017b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080017b8 	.word	0x080017b8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f894 	bl	8000658 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f84a 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f81b 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 f836 	bl	80015f4 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005c4:	0200      	lsls	r0, r0, #8
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	bf28      	it	cs
 80005ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 0501 	mov.w	r5, #1
 80005f4:	fa05 f303 	lsl.w	r3, r5, r3
 80005f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fc:	bf8c      	ite	hi
 80005fe:	3c03      	subhi	r4, #3
 8000600:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4019      	ands	r1, r3
 8000604:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa05 f404 	lsl.w	r4, r5, r4
 800060a:	3c01      	subs	r4, #1
 800060c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	ea42 0201 	orr.w	r2, r2, r1
 8000614:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	bfaf      	iteee	ge
 800061a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	andlt.w	r0, r0, #15
 8000622:	4b06      	ldrlt	r3, [pc, #24]	; (800063c <HAL_NVIC_SetPriority+0x64>)
 8000624:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	bfa5      	ittet	ge
 8000628:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800062c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	e000ed14 	.word	0xe000ed14

08000640 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000640:	0942      	lsrs	r2, r0, #5
 8000642:	2301      	movs	r3, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	fa03 f000 	lsl.w	r0, r3, r0
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_NVIC_EnableIRQ+0x14>)
 800064e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000686:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000688:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800068a:	bf0c      	ite	eq
 800068c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000690:	f022 0204 	bicne.w	r2, r2, #4
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	4770      	bx	lr
 8000698:	e000e010 	.word	0xe000e010

0800069c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800069c:	4770      	bx	lr

0800069e <HAL_SYSTICK_IRQHandler>:
{
 800069e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006a0:	f7ff fffc 	bl	800069c <HAL_SYSTICK_Callback>
 80006a4:	bd08      	pop	{r3, pc}

080006a6 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006a6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d003      	beq.n	80006b6 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006b2:	2001      	movs	r0, #1
 80006b4:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006b6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006b8:	2305      	movs	r3, #5
 80006ba:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80006be:	6813      	ldr	r3, [r2, #0]
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006c6:	2000      	movs	r0, #0
}
 80006c8:	4770      	bx	lr
	...

080006cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000878 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d8:	4a65      	ldr	r2, [pc, #404]	; (8000870 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006da:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800087c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006e0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006e2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006e8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006f0:	45b6      	cmp	lr, r6
 80006f2:	f040 80aa 	bne.w	800084a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f6:	684c      	ldr	r4, [r1, #4]
 80006f8:	f024 0710 	bic.w	r7, r4, #16
 80006fc:	2f02      	cmp	r7, #2
 80006fe:	d116      	bne.n	800072e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000700:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000704:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000708:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800070c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000710:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000714:	f04f 0c0f 	mov.w	ip, #15
 8000718:	fa0c fc0b 	lsl.w	ip, ip, fp
 800071c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000720:	690d      	ldr	r5, [r1, #16]
 8000722:	fa05 f50b 	lsl.w	r5, r5, fp
 8000726:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800072a:	f8ca 5020 	str.w	r5, [sl, #32]
 800072e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000732:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000734:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000738:	fa05 f50a 	lsl.w	r5, r5, sl
 800073c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800073e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000742:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000750:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000752:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000756:	d811      	bhi.n	800077c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000758:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800075a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800075e:	68cf      	ldr	r7, [r1, #12]
 8000760:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000764:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000768:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800076a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800076c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000770:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000774:	409f      	lsls	r7, r3
 8000776:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800077a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800077c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800077e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000780:	688f      	ldr	r7, [r1, #8]
 8000782:	fa07 f70a 	lsl.w	r7, r7, sl
 8000786:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000788:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800078a:	00e5      	lsls	r5, r4, #3
 800078c:	d55d      	bpl.n	800084a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	f04f 0b00 	mov.w	fp, #0
 8000792:	f8cd b00c 	str.w	fp, [sp, #12]
 8000796:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	4d36      	ldr	r5, [pc, #216]	; (8000874 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007a0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007a8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007ac:	9703      	str	r7, [sp, #12]
 80007ae:	9f03      	ldr	r7, [sp, #12]
 80007b0:	f023 0703 	bic.w	r7, r3, #3
 80007b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007b8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007bc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007c8:	f04f 0e0f 	mov.w	lr, #15
 80007cc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d6:	d03f      	beq.n	8000858 <HAL_GPIO_Init+0x18c>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d03d      	beq.n	800085c <HAL_GPIO_Init+0x190>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d03b      	beq.n	8000860 <HAL_GPIO_Init+0x194>
 80007e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	d039      	beq.n	8000864 <HAL_GPIO_Init+0x198>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	d037      	beq.n	8000868 <HAL_GPIO_Init+0x19c>
 80007f8:	4548      	cmp	r0, r9
 80007fa:	d037      	beq.n	800086c <HAL_GPIO_Init+0x1a0>
 80007fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000800:	42a8      	cmp	r0, r5
 8000802:	bf14      	ite	ne
 8000804:	2507      	movne	r5, #7
 8000806:	2506      	moveq	r5, #6
 8000808:	fa05 f50c 	lsl.w	r5, r5, ip
 800080c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000810:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000812:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000814:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000816:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf0c      	ite	eq
 800081c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000820:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000822:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000824:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000828:	bf0c      	ite	eq
 800082a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800082c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800082e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000830:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000832:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000836:	bf0c      	ite	eq
 8000838:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800083a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800083c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800083e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000840:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000842:	bf54      	ite	pl
 8000844:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000846:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000848:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084a:	3301      	adds	r3, #1
 800084c:	2b10      	cmp	r3, #16
 800084e:	f47f af48 	bne.w	80006e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000852:	b005      	add	sp, #20
 8000854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000858:	465d      	mov	r5, fp
 800085a:	e7d5      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 800085c:	2501      	movs	r5, #1
 800085e:	e7d3      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 8000860:	2502      	movs	r5, #2
 8000862:	e7d1      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 8000864:	2503      	movs	r5, #3
 8000866:	e7cf      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 8000868:	2504      	movs	r5, #4
 800086a:	e7cd      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 800086c:	2505      	movs	r5, #5
 800086e:	e7cb      	b.n	8000808 <HAL_GPIO_Init+0x13c>
 8000870:	40013c00 	.word	0x40013c00
 8000874:	40020000 	.word	0x40020000
 8000878:	40023800 	.word	0x40023800
 800087c:	40021400 	.word	0x40021400

08000880 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000880:	b10a      	cbz	r2, 8000886 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000882:	6181      	str	r1, [r0, #24]
 8000884:	4770      	bx	lr
 8000886:	0409      	lsls	r1, r1, #16
 8000888:	e7fb      	b.n	8000882 <HAL_GPIO_WritePin+0x2>

0800088a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800088a:	6943      	ldr	r3, [r0, #20]
 800088c:	4059      	eors	r1, r3
 800088e:	6141      	str	r1, [r0, #20]
 8000890:	4770      	bx	lr
	...

08000894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000894:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800089c:	4c18      	ldr	r4, [pc, #96]	; (8000900 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_PWREx_EnableOverDrive+0x70>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b6:	f7ff fe77 	bl	80005a8 <HAL_GetTick>
 80008ba:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	03da      	lsls	r2, r3, #15
 80008c0:	d50b      	bpl.n	80008da <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008c4:	4c0e      	ldr	r4, [pc, #56]	; (8000900 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008ca:	f7ff fe6d 	bl	80005a8 <HAL_GetTick>
 80008ce:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008d0:	6863      	ldr	r3, [r4, #4]
 80008d2:	039b      	lsls	r3, r3, #14
 80008d4:	d50a      	bpl.n	80008ec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008d6:	2000      	movs	r0, #0
 80008d8:	e006      	b.n	80008e8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008da:	f7ff fe65 	bl	80005a8 <HAL_GetTick>
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008e4:	d9ea      	bls.n	80008bc <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
}
 80008e8:	b003      	add	sp, #12
 80008ea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ec:	f7ff fe5c 	bl	80005a8 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008f6:	d9eb      	bls.n	80008d0 <HAL_PWREx_EnableOverDrive+0x3c>
 80008f8:	e7f5      	b.n	80008e6 <HAL_PWREx_EnableOverDrive+0x52>
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000
 8000904:	420e0040 	.word	0x420e0040
 8000908:	420e0044 	.word	0x420e0044

0800090c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000910:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000912:	4604      	mov	r4, r0
 8000914:	b910      	cbnz	r0, 800091c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000916:	2001      	movs	r0, #1
 8000918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <HAL_RCC_ClockConfig+0x124>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	f002 020f 	and.w	r2, r2, #15
 8000924:	428a      	cmp	r2, r1
 8000926:	d328      	bcc.n	800097a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000928:	6821      	ldr	r1, [r4, #0]
 800092a:	078f      	lsls	r7, r1, #30
 800092c:	d42d      	bmi.n	800098a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800092e:	07c8      	lsls	r0, r1, #31
 8000930:	d440      	bmi.n	80009b4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <HAL_RCC_ClockConfig+0x124>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	f002 020f 	and.w	r2, r2, #15
 800093a:	4295      	cmp	r5, r2
 800093c:	d366      	bcc.n	8000a0c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800093e:	6822      	ldr	r2, [r4, #0]
 8000940:	0751      	lsls	r1, r2, #29
 8000942:	d46c      	bmi.n	8000a1e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000944:	0713      	lsls	r3, r2, #28
 8000946:	d507      	bpl.n	8000958 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000948:	4a3a      	ldr	r2, [pc, #232]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
 800094a:	6921      	ldr	r1, [r4, #16]
 800094c:	6893      	ldr	r3, [r2, #8]
 800094e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000952:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000956:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000958:	f000 f898 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 800095c:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <HAL_RCC_ClockConfig+0x12c>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	40d8      	lsrs	r0, r3
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <HAL_RCC_ClockConfig+0x130>)
 800096c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fdd0 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000974:	2000      	movs	r0, #0
 8000976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800097a:	b2ca      	uxtb	r2, r1
 800097c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 030f 	and.w	r3, r3, #15
 8000984:	4299      	cmp	r1, r3
 8000986:	d1c6      	bne.n	8000916 <HAL_RCC_ClockConfig+0xa>
 8000988:	e7ce      	b.n	8000928 <HAL_RCC_ClockConfig+0x1c>
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800098c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000990:	bf1e      	ittt	ne
 8000992:	689a      	ldrne	r2, [r3, #8]
 8000994:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000998:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800099a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800099c:	bf42      	ittt	mi
 800099e:	689a      	ldrmi	r2, [r3, #8]
 80009a0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80009a4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	68a0      	ldr	r0, [r4, #8]
 80009aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009ae:	4302      	orrs	r2, r0
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	e7bc      	b.n	800092e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b4:	6862      	ldr	r2, [r4, #4]
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
 80009b8:	2a01      	cmp	r2, #1
 80009ba:	d11d      	bne.n	80009f8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c2:	d0a8      	beq.n	8000916 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009c4:	4e1b      	ldr	r6, [pc, #108]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
 80009c6:	68b3      	ldr	r3, [r6, #8]
 80009c8:	f023 0303 	bic.w	r3, r3, #3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009d0:	f7ff fdea 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009da:	68b3      	ldr	r3, [r6, #8]
 80009dc:	6862      	ldr	r2, [r4, #4]
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009e6:	d0a4      	beq.n	8000932 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e8:	f7ff fdde 	bl	80005a8 <HAL_GetTick>
 80009ec:	1bc0      	subs	r0, r0, r7
 80009ee:	4540      	cmp	r0, r8
 80009f0:	d9f3      	bls.n	80009da <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
}
 80009f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009f8:	1e91      	subs	r1, r2, #2
 80009fa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009fc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009fe:	d802      	bhi.n	8000a06 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a04:	e7dd      	b.n	80009c2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	f013 0f02 	tst.w	r3, #2
 8000a0a:	e7da      	b.n	80009c2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a0c:	b2ea      	uxtb	r2, r5
 8000a0e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	429d      	cmp	r5, r3
 8000a18:	f47f af7d 	bne.w	8000916 <HAL_RCC_ClockConfig+0xa>
 8000a1c:	e78f      	b.n	800093e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a1e:	4905      	ldr	r1, [pc, #20]	; (8000a34 <HAL_RCC_ClockConfig+0x128>)
 8000a20:	68e0      	ldr	r0, [r4, #12]
 8000a22:	688b      	ldr	r3, [r1, #8]
 8000a24:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a28:	4303      	orrs	r3, r0
 8000a2a:	608b      	str	r3, [r1, #8]
 8000a2c:	e78a      	b.n	8000944 <HAL_RCC_ClockConfig+0x38>
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00
 8000a34:	40023800 	.word	0x40023800
 8000a38:	080017d0 	.word	0x080017d0
 8000a3c:	20000008 	.word	0x20000008

08000a40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008

08000a4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a5a:	6810      	ldr	r0, [r2, #0]
}
 8000a5c:	40d8      	lsrs	r0, r3
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800
 8000a64:	080017e0 	.word	0x080017e0
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a7a:	6810      	ldr	r0, [r2, #0]
}
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	080017e0 	.word	0x080017e0
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a8c:	4920      	ldr	r1, [pc, #128]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a8e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a90:	688b      	ldr	r3, [r1, #8]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d007      	beq.n	8000aaa <HAL_RCC_GetSysClockFreq+0x1e>
 8000a9a:	2b0c      	cmp	r3, #12
 8000a9c:	d020      	beq.n	8000ae0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000a9e:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x88>)
 8000aa0:	481d      	ldr	r0, [pc, #116]	; (8000b18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf18      	it	ne
 8000aa6:	4610      	movne	r0, r2
 8000aa8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aaa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000aac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ab0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ab4:	bf14      	ite	ne
 8000ab6:	4818      	ldrne	r0, [pc, #96]	; (8000b18 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ab8:	4816      	ldreq	r0, [pc, #88]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000abe:	bf18      	it	ne
 8000ac0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ac2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ac6:	fba1 0100 	umull	r0, r1, r1, r0
 8000aca:	f7ff fb9b 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000ada:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ade:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ae2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ae4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ae6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aea:	bf14      	ite	ne
 8000aec:	480a      	ldrne	r0, [pc, #40]	; (8000b18 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aee:	4809      	ldreq	r0, [pc, #36]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000af4:	bf18      	it	ne
 8000af6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000af8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afc:	fba1 0100 	umull	r0, r1, r1, r0
 8000b00:	f7ff fb80 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000b0c:	e7e5      	b.n	8000ada <HAL_RCC_GetSysClockFreq+0x4e>
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	00f42400 	.word	0x00f42400
 8000b18:	007a1200 	.word	0x007a1200

08000b1c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1c:	6803      	ldr	r3, [r0, #0]
{
 8000b1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b22:	07df      	lsls	r7, r3, #31
{
 8000b24:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b26:	d410      	bmi.n	8000b4a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	079e      	lsls	r6, r3, #30
 8000b2c:	d467      	bmi.n	8000bfe <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	071a      	lsls	r2, r3, #28
 8000b32:	f100 80b2 	bmi.w	8000c9a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	075b      	lsls	r3, r3, #29
 8000b3a:	f100 80d0 	bmi.w	8000cde <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b3e:	69a2      	ldr	r2, [r4, #24]
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f040 8139 	bne.w	8000db8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b46:	2000      	movs	r0, #0
 8000b48:	e01e      	b.n	8000b88 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b4a:	4b97      	ldr	r3, [pc, #604]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	f002 020c 	and.w	r2, r2, #12
 8000b52:	2a04      	cmp	r2, #4
 8000b54:	d010      	beq.n	8000b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b5c:	2a08      	cmp	r2, #8
 8000b5e:	d102      	bne.n	8000b66 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	025d      	lsls	r5, r3, #9
 8000b64:	d408      	bmi.n	8000b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b66:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b6e:	2a0c      	cmp	r2, #12
 8000b70:	d10d      	bne.n	8000b8e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	0250      	lsls	r0, r2, #9
 8000b76:	d50a      	bpl.n	8000b8e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b78:	4b8b      	ldr	r3, [pc, #556]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	0399      	lsls	r1, r3, #14
 8000b7e:	d5d3      	bpl.n	8000b28 <HAL_RCC_OscConfig+0xc>
 8000b80:	6863      	ldr	r3, [r4, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1d0      	bne.n	8000b28 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
}
 8000b88:	b002      	add	sp, #8
 8000b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	6862      	ldr	r2, [r4, #4]
 8000b90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000b94:	d111      	bne.n	8000bba <HAL_RCC_OscConfig+0x9e>
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fd03 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4d81      	ldr	r5, [pc, #516]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000ba4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	039a      	lsls	r2, r3, #14
 8000baa:	d4bd      	bmi.n	8000b28 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcfc 	bl	80005a8 <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	2864      	cmp	r0, #100	; 0x64
 8000bb4:	d9f7      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	e7e6      	b.n	8000b88 <HAL_RCC_OscConfig+0x6c>
 8000bba:	4d7b      	ldr	r5, [pc, #492]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	d107      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xb8>
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	602b      	str	r3, [r5, #0]
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd0:	602b      	str	r3, [r5, #0]
 8000bd2:	e7e4      	b.n	8000b9e <HAL_RCC_OscConfig+0x82>
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd8:	602b      	str	r3, [r5, #0]
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d1db      	bne.n	8000b9e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000be6:	f7ff fcdf 	bl	80005a8 <HAL_GetTick>
 8000bea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	039b      	lsls	r3, r3, #14
 8000bf0:	d59a      	bpl.n	8000b28 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf2:	f7ff fcd9 	bl	80005a8 <HAL_GetTick>
 8000bf6:	1b80      	subs	r0, r0, r6
 8000bf8:	2864      	cmp	r0, #100	; 0x64
 8000bfa:	d9f7      	bls.n	8000bec <HAL_RCC_OscConfig+0xd0>
 8000bfc:	e7db      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bfe:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	f012 0f0c 	tst.w	r2, #12
 8000c06:	d010      	beq.n	8000c2a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c0e:	2a08      	cmp	r2, #8
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	025f      	lsls	r7, r3, #9
 8000c16:	d508      	bpl.n	8000c2a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c18:	4a63      	ldr	r2, [pc, #396]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000c1a:	6893      	ldr	r3, [r2, #8]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c20:	2b0c      	cmp	r3, #12
 8000c22:	d111      	bne.n	8000c48 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c24:	6853      	ldr	r3, [r2, #4]
 8000c26:	025e      	lsls	r6, r3, #9
 8000c28:	d40e      	bmi.n	8000c48 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	0795      	lsls	r5, r2, #30
 8000c30:	d502      	bpl.n	8000c38 <HAL_RCC_OscConfig+0x11c>
 8000c32:	68e2      	ldr	r2, [r4, #12]
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d1a6      	bne.n	8000b86 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	6921      	ldr	r1, [r4, #16]
 8000c3c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c40:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c44:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	e772      	b.n	8000b2e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c48:	68e2      	ldr	r2, [r4, #12]
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_RCC_OscConfig+0x290>)
 8000c4c:	b1b2      	cbz	r2, 8000c7c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c52:	f7ff fca9 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c56:	4d54      	ldr	r5, [pc, #336]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	0798      	lsls	r0, r3, #30
 8000c5e:	d507      	bpl.n	8000c70 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	6922      	ldr	r2, [r4, #16]
 8000c64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	e75e      	b.n	8000b2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c70:	f7ff fc9a 	bl	80005a8 <HAL_GetTick>
 8000c74:	1b80      	subs	r0, r0, r6
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d9ef      	bls.n	8000c5a <HAL_RCC_OscConfig+0x13e>
 8000c7a:	e79c      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000c7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fc93 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	4d49      	ldr	r5, [pc, #292]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	0799      	lsls	r1, r3, #30
 8000c8a:	f57f af50 	bpl.w	8000b2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc8b 	bl	80005a8 <HAL_GetTick>
 8000c92:	1b80      	subs	r0, r0, r6
 8000c94:	2802      	cmp	r0, #2
 8000c96:	d9f6      	bls.n	8000c86 <HAL_RCC_OscConfig+0x16a>
 8000c98:	e78d      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c9a:	6962      	ldr	r2, [r4, #20]
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_RCC_OscConfig+0x294>)
 8000c9e:	b17a      	cbz	r2, 8000cc0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc80 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca8:	4d3f      	ldr	r5, [pc, #252]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000caa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cae:	079f      	lsls	r7, r3, #30
 8000cb0:	f53f af41 	bmi.w	8000b36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cb4:	f7ff fc78 	bl	80005a8 <HAL_GetTick>
 8000cb8:	1b80      	subs	r0, r0, r6
 8000cba:	2802      	cmp	r0, #2
 8000cbc:	d9f6      	bls.n	8000cac <HAL_RCC_OscConfig+0x190>
 8000cbe:	e77a      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000cc0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fc71 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc6:	4d38      	ldr	r5, [pc, #224]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cc8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ccc:	0798      	lsls	r0, r3, #30
 8000cce:	f57f af32 	bpl.w	8000b36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fc69 	bl	80005a8 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9f6      	bls.n	8000cca <HAL_RCC_OscConfig+0x1ae>
 8000cdc:	e76b      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cde:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ce6:	d128      	bne.n	8000d3a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cfc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfe:	4d2d      	ldr	r5, [pc, #180]	; (8000db4 <HAL_RCC_OscConfig+0x298>)
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	05d9      	lsls	r1, r3, #23
 8000d04:	d51b      	bpl.n	8000d3e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d06:	68a3      	ldr	r3, [r4, #8]
 8000d08:	4d27      	ldr	r5, [pc, #156]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d127      	bne.n	8000d5e <HAL_RCC_OscConfig+0x242>
 8000d0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d16:	f7ff fc47 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d1a:	4d23      	ldr	r5, [pc, #140]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000d1c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d22:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d24:	079b      	lsls	r3, r3, #30
 8000d26:	d539      	bpl.n	8000d9c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	f43f af08 	beq.w	8000b3e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_RCC_OscConfig+0x28c>)
 8000d30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	e701      	b.n	8000b3e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	e7df      	b.n	8000cfe <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d46:	f7ff fc2f 	bl	80005a8 <HAL_GetTick>
 8000d4a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4c:	682b      	ldr	r3, [r5, #0]
 8000d4e:	05da      	lsls	r2, r3, #23
 8000d50:	d4d9      	bmi.n	8000d06 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d52:	f7ff fc29 	bl	80005a8 <HAL_GetTick>
 8000d56:	1bc0      	subs	r0, r0, r7
 8000d58:	2802      	cmp	r0, #2
 8000d5a:	d9f7      	bls.n	8000d4c <HAL_RCC_OscConfig+0x230>
 8000d5c:	e72b      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d104      	bne.n	8000d6c <HAL_RCC_OscConfig+0x250>
 8000d62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	672b      	str	r3, [r5, #112]	; 0x70
 8000d6a:	e7d0      	b.n	8000d0e <HAL_RCC_OscConfig+0x1f2>
 8000d6c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d6e:	f022 0201 	bic.w	r2, r2, #1
 8000d72:	672a      	str	r2, [r5, #112]	; 0x70
 8000d74:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d76:	f022 0204 	bic.w	r2, r2, #4
 8000d7a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1ca      	bne.n	8000d16 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000d80:	f7ff fc12 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d84:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d88:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d8c:	0798      	lsls	r0, r3, #30
 8000d8e:	d5cb      	bpl.n	8000d28 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d90:	f7ff fc0a 	bl	80005a8 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	4540      	cmp	r0, r8
 8000d98:	d9f7      	bls.n	8000d8a <HAL_RCC_OscConfig+0x26e>
 8000d9a:	e70c      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc04 	bl	80005a8 <HAL_GetTick>
 8000da0:	1bc0      	subs	r0, r0, r7
 8000da2:	4540      	cmp	r0, r8
 8000da4:	d9bd      	bls.n	8000d22 <HAL_RCC_OscConfig+0x206>
 8000da6:	e706      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
 8000da8:	40023800 	.word	0x40023800
 8000dac:	42470000 	.word	0x42470000
 8000db0:	42470e80 	.word	0x42470e80
 8000db4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000db8:	4d23      	ldr	r5, [pc, #140]	; (8000e48 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	68ab      	ldr	r3, [r5, #8]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	f43f aee0 	beq.w	8000b86 <HAL_RCC_OscConfig+0x6a>
 8000dc6:	4e21      	ldr	r6, [pc, #132]	; (8000e4c <HAL_RCC_OscConfig+0x330>)
 8000dc8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dca:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dcc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dce:	d12d      	bne.n	8000e2c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fbea 	bl	80005a8 <HAL_GetTick>
 8000dd4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	0199      	lsls	r1, r3, #6
 8000dda:	d421      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ddc:	6a22      	ldr	r2, [r4, #32]
 8000dde:	69e3      	ldr	r3, [r4, #28]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000de4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000df0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000df4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df6:	4c14      	ldr	r4, [pc, #80]	; (8000e48 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000df8:	0852      	lsrs	r2, r2, #1
 8000dfa:	3a01      	subs	r2, #1
 8000dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e02:	2301      	movs	r3, #1
 8000e04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e06:	f7ff fbcf 	bl	80005a8 <HAL_GetTick>
 8000e0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	019a      	lsls	r2, r3, #6
 8000e10:	f53f ae99 	bmi.w	8000b46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e14:	f7ff fbc8 	bl	80005a8 <HAL_GetTick>
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f6      	bls.n	8000e0c <HAL_RCC_OscConfig+0x2f0>
 8000e1e:	e6ca      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e20:	f7ff fbc2 	bl	80005a8 <HAL_GetTick>
 8000e24:	1bc0      	subs	r0, r0, r7
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9d5      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x2ba>
 8000e2a:	e6c4      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fbbc 	bl	80005a8 <HAL_GetTick>
 8000e30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	f57f ae86 	bpl.w	8000b46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3a:	f7ff fbb5 	bl	80005a8 <HAL_GetTick>
 8000e3e:	1b00      	subs	r0, r0, r4
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f6      	bls.n	8000e32 <HAL_RCC_OscConfig+0x316>
 8000e44:	e6b7      	b.n	8000bb6 <HAL_RCC_OscConfig+0x9a>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470060 	.word	0x42470060

08000e50 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e50:	6803      	ldr	r3, [r0, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000e58:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	f022 0201 	bic.w	r2, r2, #1
 8000e60:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000e62:	2320      	movs	r3, #32
 8000e64:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000e68:	4770      	bx	lr
	...

08000e6c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000e70:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000e72:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000e74:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e76:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000e7c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000e7e:	6133      	str	r3, [r6, #16]
{
 8000e80:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e82:	6883      	ldr	r3, [r0, #8]
 8000e84:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000e86:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e88:	4303      	orrs	r3, r0
 8000e8a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000e8c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e90:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000e92:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e96:	430b      	orrs	r3, r1
 8000e98:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000e9a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000e9c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000e9e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000ea4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ea6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000eaa:	6173      	str	r3, [r6, #20]
 8000eac:	4b7a      	ldr	r3, [pc, #488]	; (8001098 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eae:	d17c      	bne.n	8000faa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d003      	beq.n	8000ebc <UART_SetConfig+0x50>
 8000eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d144      	bne.n	8000f46 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ebc:	f7ff fdd6 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000ec0:	2519      	movs	r5, #25
 8000ec2:	fb05 f300 	mul.w	r3, r5, r0
 8000ec6:	6860      	ldr	r0, [r4, #4]
 8000ec8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ecc:	0040      	lsls	r0, r0, #1
 8000ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ed6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000eda:	f7ff fdc7 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	4368      	muls	r0, r5
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ee8:	f7ff fdc0 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000eec:	6863      	ldr	r3, [r4, #4]
 8000eee:	4368      	muls	r0, r5
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef6:	fbb3 f3f9 	udiv	r3, r3, r9
 8000efa:	fb09 7313 	mls	r3, r9, r3, r7
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	3332      	adds	r3, #50	; 0x32
 8000f02:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000f0c:	f7ff fdae 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000f10:	6862      	ldr	r2, [r4, #4]
 8000f12:	4368      	muls	r0, r5
 8000f14:	0052      	lsls	r2, r2, #1
 8000f16:	fbb0 faf2 	udiv	sl, r0, r2
 8000f1a:	f7ff fda7 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f1e:	6863      	ldr	r3, [r4, #4]
 8000f20:	4368      	muls	r0, r5
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f28:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f2c:	fb09 a313 	mls	r3, r9, r3, sl
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	3332      	adds	r3, #50	; 0x32
 8000f34:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f3e:	443b      	add	r3, r7
 8000f40:	60b3      	str	r3, [r6, #8]
 8000f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f46:	f7ff fd81 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8000f4a:	2519      	movs	r5, #25
 8000f4c:	fb05 f300 	mul.w	r3, r5, r0
 8000f50:	6860      	ldr	r0, [r4, #4]
 8000f52:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f56:	0040      	lsls	r0, r0, #1
 8000f58:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000f64:	f7ff fd72 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	4368      	muls	r0, r5
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f72:	f7ff fd6b 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	4368      	muls	r0, r5
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f80:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f84:	fb09 7313 	mls	r3, r9, r3, r7
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	3332      	adds	r3, #50	; 0x32
 8000f8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000f96:	f7ff fd59 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8000f9a:	6862      	ldr	r2, [r4, #4]
 8000f9c:	4368      	muls	r0, r5
 8000f9e:	0052      	lsls	r2, r2, #1
 8000fa0:	fbb0 faf2 	udiv	sl, r0, r2
 8000fa4:	f7ff fd52 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8000fa8:	e7b9      	b.n	8000f1e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000faa:	429e      	cmp	r6, r3
 8000fac:	d002      	beq.n	8000fb4 <UART_SetConfig+0x148>
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <UART_SetConfig+0x230>)
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d140      	bne.n	8001036 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fb4:	f7ff fd5a 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000fb8:	6867      	ldr	r7, [r4, #4]
 8000fba:	2519      	movs	r5, #25
 8000fbc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fc0:	fb05 f300 	mul.w	r3, r5, r0
 8000fc4:	00bf      	lsls	r7, r7, #2
 8000fc6:	fbb3 f3f7 	udiv	r3, r3, r7
 8000fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fce:	011f      	lsls	r7, r3, #4
 8000fd0:	f7ff fd4c 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	4368      	muls	r0, r5
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	fbb0 f8f3 	udiv	r8, r0, r3
 8000fde:	f7ff fd45 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8000fe2:	6863      	ldr	r3, [r4, #4]
 8000fe4:	4368      	muls	r0, r5
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fec:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ff0:	fb09 8313 	mls	r3, r9, r3, r8
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	3332      	adds	r3, #50	; 0x32
 8000ff8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ffc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001000:	f7ff fd34 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
 8001004:	6862      	ldr	r2, [r4, #4]
 8001006:	4368      	muls	r0, r5
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	fbb0 faf2 	udiv	sl, r0, r2
 800100e:	f7ff fd2d 	bl	8000a6c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001012:	6863      	ldr	r3, [r4, #4]
 8001014:	4368      	muls	r0, r5
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fbb0 f3f3 	udiv	r3, r0, r3
 800101c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001020:	fb09 a313 	mls	r3, r9, r3, sl
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	3332      	adds	r3, #50	; 0x32
 8001028:	fbb3 f3f9 	udiv	r3, r3, r9
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	ea43 0308 	orr.w	r3, r3, r8
 8001034:	e783      	b.n	8000f3e <UART_SetConfig+0xd2>
 8001036:	f7ff fd09 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 800103a:	6867      	ldr	r7, [r4, #4]
 800103c:	2519      	movs	r5, #25
 800103e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001042:	fb05 f300 	mul.w	r3, r5, r0
 8001046:	00bf      	lsls	r7, r7, #2
 8001048:	fbb3 f3f7 	udiv	r3, r3, r7
 800104c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001050:	011f      	lsls	r7, r3, #4
 8001052:	f7ff fcfb 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	4368      	muls	r0, r5
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001060:	f7ff fcf4 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	4368      	muls	r0, r5
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	fbb0 f3f3 	udiv	r3, r0, r3
 800106e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001072:	fb09 8313 	mls	r3, r9, r3, r8
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	3332      	adds	r3, #50	; 0x32
 800107a:	fbb3 f3f9 	udiv	r3, r3, r9
 800107e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001082:	f7ff fce3 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	4368      	muls	r0, r5
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	fbb0 faf2 	udiv	sl, r0, r2
 8001090:	f7ff fcdc 	bl	8000a4c <HAL_RCC_GetPCLK1Freq>
 8001094:	e7bd      	b.n	8001012 <UART_SetConfig+0x1a6>
 8001096:	bf00      	nop
 8001098:	40011000 	.word	0x40011000
 800109c:	40011400 	.word	0x40011400

080010a0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	460e      	mov	r6, r1
 80010a6:	4617      	mov	r7, r2
 80010a8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80010aa:	6821      	ldr	r1, [r4, #0]
 80010ac:	680b      	ldr	r3, [r1, #0]
 80010ae:	ea36 0303 	bics.w	r3, r6, r3
 80010b2:	d101      	bne.n	80010b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80010b4:	2000      	movs	r0, #0
}
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80010b8:	1c6b      	adds	r3, r5, #1
 80010ba:	d0f7      	beq.n	80010ac <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010bc:	b995      	cbnz	r5, 80010e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80010c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80010d0:	2320      	movs	r3, #32
 80010d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80010d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80010da:	2300      	movs	r3, #0
 80010dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80010e0:	2003      	movs	r0, #3
 80010e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010e4:	f7ff fa60 	bl	80005a8 <HAL_GetTick>
 80010e8:	1bc0      	subs	r0, r0, r7
 80010ea:	4285      	cmp	r5, r0
 80010ec:	d2dd      	bcs.n	80010aa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80010ee:	e7e6      	b.n	80010be <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080010f0 <HAL_UART_Init>:
{
 80010f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80010f2:	4604      	mov	r4, r0
 80010f4:	b340      	cbz	r0, 8001148 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80010f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010fe:	b91b      	cbnz	r3, 8001108 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001100:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001104:	f000 faa6 	bl	8001654 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001108:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800110a:	2324      	movs	r3, #36	; 0x24
 800110c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001110:	68d3      	ldr	r3, [r2, #12]
 8001112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001116:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff fea7 	bl	8000e6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001126:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800112e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001136:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001138:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800113a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800113c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800113e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001142:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001146:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
}
 800114a:	bd10      	pop	{r4, pc}

0800114c <HAL_UART_Transmit>:
{
 800114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001150:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001152:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001156:	2b20      	cmp	r3, #32
{
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800115e:	d14f      	bne.n	8001200 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001160:	2900      	cmp	r1, #0
 8001162:	d04a      	beq.n	80011fa <HAL_UART_Transmit+0xae>
 8001164:	2a00      	cmp	r2, #0
 8001166:	d048      	beq.n	80011fa <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001168:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800116c:	2b01      	cmp	r3, #1
 800116e:	d047      	beq.n	8001200 <HAL_UART_Transmit+0xb4>
 8001170:	2301      	movs	r3, #1
 8001172:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001176:	2300      	movs	r3, #0
 8001178:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800117a:	2321      	movs	r3, #33	; 0x21
 800117c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001180:	f7ff fa12 	bl	80005a8 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001184:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001188:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800118a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800118e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001190:	b29b      	uxth	r3, r3
 8001192:	b96b      	cbnz	r3, 80011b0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4632      	mov	r2, r6
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff ff80 	bl	80010a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011a0:	b9b0      	cbnz	r0, 80011d0 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80011a2:	2320      	movs	r3, #32
 80011a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80011a8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80011ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80011b0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011b8:	68a3      	ldr	r3, [r4, #8]
 80011ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011be:	4632      	mov	r2, r6
 80011c0:	463b      	mov	r3, r7
 80011c2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80011c6:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011c8:	d10e      	bne.n	80011e8 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011ca:	f7ff ff69 	bl	80010a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011ce:	b110      	cbz	r0, 80011d6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80011d0:	2003      	movs	r0, #3
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80011d6:	882b      	ldrh	r3, [r5, #0]
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011de:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011e0:	6923      	ldr	r3, [r4, #16]
 80011e2:	b943      	cbnz	r3, 80011f6 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80011e4:	3502      	adds	r5, #2
 80011e6:	e7d2      	b.n	800118e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011e8:	f7ff ff5a 	bl	80010a0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1ef      	bne.n	80011d0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	782a      	ldrb	r2, [r5, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	3501      	adds	r5, #1
 80011f8:	e7c9      	b.n	800118e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001200:	2002      	movs	r0, #2
}
 8001202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001206 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001206:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800120a:	2b20      	cmp	r3, #32
 800120c:	d11c      	bne.n	8001248 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 800120e:	b1c9      	cbz	r1, 8001244 <HAL_UART_Receive_IT+0x3e>
 8001210:	b1c2      	cbz	r2, 8001244 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001212:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001216:	2b01      	cmp	r3, #1
 8001218:	d016      	beq.n	8001248 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 800121a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800121c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800121e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001220:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001222:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001224:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001228:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800122a:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800122c:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 800122e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001232:	f041 0101 	orr.w	r1, r1, #1
 8001236:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001238:	68d1      	ldr	r1, [r2, #12]
 800123a:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800123e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001240:	4618      	mov	r0, r3
 8001242:	4770      	bx	lr
      return HAL_ERROR;
 8001244:	2001      	movs	r0, #1
 8001246:	4770      	bx	lr
    return HAL_BUSY; 
 8001248:	2002      	movs	r0, #2
}
 800124a:	4770      	bx	lr

0800124c <HAL_UART_TxCpltCallback>:
 800124c:	4770      	bx	lr

0800124e <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800124e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001252:	2b22      	cmp	r3, #34	; 0x22
{
 8001254:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001256:	d132      	bne.n	80012be <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001258:	6883      	ldr	r3, [r0, #8]
 800125a:	6901      	ldr	r1, [r0, #16]
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001262:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001264:	d11f      	bne.n	80012a6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001266:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001268:	b9c9      	cbnz	r1, 800129e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800126a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800126e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001272:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001274:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001276:	3c01      	subs	r4, #1
 8001278:	b2a4      	uxth	r4, r4
 800127a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800127c:	b96c      	cbnz	r4, 800129a <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001286:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001290:	2320      	movs	r3, #32
 8001292:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001296:	f000 f8bd 	bl	8001414 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800129a:	2000      	movs	r0, #0
}
 800129c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f823 2b01 	strh.w	r2, [r3], #1
 80012a4:	e7e5      	b.n	8001272 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80012a6:	b921      	cbnz	r1, 80012b2 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	6852      	ldr	r2, [r2, #4]
 80012ac:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e7e0      	b.n	8001274 <UART_Receive_IT+0x26>
 80012b2:	6852      	ldr	r2, [r2, #4]
 80012b4:	1c59      	adds	r1, r3, #1
 80012b6:	6281      	str	r1, [r0, #40]	; 0x28
 80012b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012bc:	e7f7      	b.n	80012ae <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80012be:	2002      	movs	r0, #2
 80012c0:	bd10      	pop	{r4, pc}

080012c2 <HAL_UART_ErrorCallback>:
 80012c2:	4770      	bx	lr

080012c4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80012c4:	6803      	ldr	r3, [r0, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012c8:	68d9      	ldr	r1, [r3, #12]
{
 80012ca:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80012cc:	0716      	lsls	r6, r2, #28
{
 80012ce:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012d0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80012d2:	d107      	bne.n	80012e4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012d4:	0696      	lsls	r6, r2, #26
 80012d6:	d55a      	bpl.n	800138e <HAL_UART_IRQHandler+0xca>
 80012d8:	068d      	lsls	r5, r1, #26
 80012da:	d558      	bpl.n	800138e <HAL_UART_IRQHandler+0xca>
}
 80012dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80012e0:	f7ff bfb5 	b.w	800124e <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80012e4:	f015 0501 	ands.w	r5, r5, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_UART_IRQHandler+0x2c>
 80012ea:	f411 7f90 	tst.w	r1, #288	; 0x120
 80012ee:	d04e      	beq.n	800138e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012f0:	07d3      	lsls	r3, r2, #31
 80012f2:	d505      	bpl.n	8001300 <HAL_UART_IRQHandler+0x3c>
 80012f4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80012f6:	bf42      	ittt	mi
 80012f8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80012fa:	f043 0301 	orrmi.w	r3, r3, #1
 80012fe:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001300:	0750      	lsls	r0, r2, #29
 8001302:	d504      	bpl.n	800130e <HAL_UART_IRQHandler+0x4a>
 8001304:	b11d      	cbz	r5, 800130e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800130e:	0793      	lsls	r3, r2, #30
 8001310:	d504      	bpl.n	800131c <HAL_UART_IRQHandler+0x58>
 8001312:	b11d      	cbz	r5, 800131c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001314:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800131c:	0716      	lsls	r6, r2, #28
 800131e:	d504      	bpl.n	800132a <HAL_UART_IRQHandler+0x66>
 8001320:	b11d      	cbz	r5, 800132a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800132a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d066      	beq.n	80013fe <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001330:	0695      	lsls	r5, r2, #26
 8001332:	d504      	bpl.n	800133e <HAL_UART_IRQHandler+0x7a>
 8001334:	0688      	lsls	r0, r1, #26
 8001336:	d502      	bpl.n	800133e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff ff88 	bl	800124e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001342:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001344:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001346:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001348:	d402      	bmi.n	8001350 <HAL_UART_IRQHandler+0x8c>
 800134a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800134e:	d01a      	beq.n	8001386 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001350:	f7ff fd7e 	bl	8000e50 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	0652      	lsls	r2, r2, #25
 800135a:	d510      	bpl.n	800137e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800135c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800135e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001364:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001366:	b150      	cbz	r0, 800137e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_UART_IRQHandler+0x13c>)
 800136a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800136c:	f7ff f99b 	bl	80006a6 <HAL_DMA_Abort_IT>
 8001370:	2800      	cmp	r0, #0
 8001372:	d044      	beq.n	80013fe <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001374:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800137a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800137c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ff9f 	bl	80012c2 <HAL_UART_ErrorCallback>
 8001384:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001386:	f7ff ff9c 	bl	80012c2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800138c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800138e:	0616      	lsls	r6, r2, #24
 8001390:	d527      	bpl.n	80013e2 <HAL_UART_IRQHandler+0x11e>
 8001392:	060d      	lsls	r5, r1, #24
 8001394:	d525      	bpl.n	80013e2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001396:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800139a:	2a21      	cmp	r2, #33	; 0x21
 800139c:	d12f      	bne.n	80013fe <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800139e:	68a2      	ldr	r2, [r4, #8]
 80013a0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80013a4:	6a22      	ldr	r2, [r4, #32]
 80013a6:	d117      	bne.n	80013d8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80013a8:	8811      	ldrh	r1, [r2, #0]
 80013aa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80013ae:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80013b0:	6921      	ldr	r1, [r4, #16]
 80013b2:	b979      	cbnz	r1, 80013d4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80013b4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80013b6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80013b8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013ba:	3a01      	subs	r2, #1
 80013bc:	b292      	uxth	r2, r2
 80013be:	84e2      	strh	r2, [r4, #38]	; 0x26
 80013c0:	b9ea      	cbnz	r2, 80013fe <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c8:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80013d4:	3201      	adds	r2, #1
 80013d6:	e7ee      	b.n	80013b6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80013d8:	1c51      	adds	r1, r2, #1
 80013da:	6221      	str	r1, [r4, #32]
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	e7ea      	b.n	80013b8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80013e2:	0650      	lsls	r0, r2, #25
 80013e4:	d50b      	bpl.n	80013fe <HAL_UART_IRQHandler+0x13a>
 80013e6:	064a      	lsls	r2, r1, #25
 80013e8:	d509      	bpl.n	80013fe <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80013f2:	2320      	movs	r3, #32
 80013f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff ff27 	bl	800124c <HAL_UART_TxCpltCallback>
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	08001405 	.word	0x08001405

08001404 <UART_DMAAbortOnError>:
{
 8001404:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001406:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800140c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800140e:	f7ff ff58 	bl	80012c2 <HAL_UART_ErrorCallback>
 8001412:	bd08      	pop	{r3, pc}

08001414 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001414:	b510      	push	{r4, lr}
 8001416:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001418:	2120      	movs	r1, #32
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_UART_RxCpltCallback+0x34>)
 800141c:	f7ff fa35 	bl	800088a <HAL_GPIO_TogglePin>

	if(huart->Instance==USART2)
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_UART_RxCpltCallback+0x38>)
 8001424:	429a      	cmp	r2, r3
 8001426:	d10d      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart2,Rx_Buffer,1);
 8001428:	2201      	movs	r2, #1
 800142a:	4909      	ldr	r1, [pc, #36]	; (8001450 <HAL_UART_RxCpltCallback+0x3c>)
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <HAL_UART_RxCpltCallback+0x40>)
 800142e:	f7ff feea 	bl	8001206 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2,Rx_Buffer,1,1000);
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	2201      	movs	r2, #1
 8001438:	4905      	ldr	r1, [pc, #20]	; (8001450 <HAL_UART_RxCpltCallback+0x3c>)
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_UART_RxCpltCallback+0x40>)
	}
}
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart2,Rx_Buffer,1,1000);
 8001440:	f7ff be84 	b.w	800114c <HAL_UART_Transmit>
 8001444:	bd10      	pop	{r4, pc}
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000
 800144c:	40004400 	.word	0x40004400
 8001450:	2000002c 	.word	0x2000002c
 8001454:	20000030 	.word	0x20000030

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b530      	push	{r4, r5, lr}
 800145a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <SystemClock_Config+0xb0>)
 800145e:	2100      	movs	r1, #0
 8001460:	9100      	str	r1, [sp, #0]
 8001462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <SystemClock_Config+0xb4>)
 8001476:	9101      	str	r1, [sp, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148a:	2301      	movs	r3, #1
 800148c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001492:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800149c:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 800149e:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014aa:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ac:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f7ff fb35 	bl	8000b1c <HAL_RCC_OscConfig>
 80014b2:	b100      	cbz	r0, 80014b6 <SystemClock_Config+0x5e>
 80014b4:	e7fe      	b.n	80014b4 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b6:	f7ff f9ed 	bl	8000894 <HAL_PWREx_EnableOverDrive>
 80014ba:	b100      	cbz	r0, 80014be <SystemClock_Config+0x66>
 80014bc:	e7fe      	b.n	80014bc <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ca:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d6:	f7ff fa19 	bl	800090c <HAL_RCC_ClockConfig>
 80014da:	4604      	mov	r4, r0
 80014dc:	b100      	cbz	r0, 80014e0 <SystemClock_Config+0x88>
 80014de:	e7fe      	b.n	80014de <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014e0:	f7ff faae 	bl	8000a40 <HAL_RCC_GetHCLKFreq>
 80014e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ec:	f7ff f8b4 	bl	8000658 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014f0:	4628      	mov	r0, r5
 80014f2:	f7ff f8c7 	bl	8000684 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014f6:	4622      	mov	r2, r4
 80014f8:	4621      	mov	r1, r4
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	f7ff f86b 	bl	80005d8 <HAL_NVIC_SetPriority>
}
 8001502:	b015      	add	sp, #84	; 0x54
 8001504:	bd30      	pop	{r4, r5, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <main>:
{
 8001510:	b500      	push	{lr}
 8001512:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	2400      	movs	r4, #0
  HAL_Init();
 8001516:	f7ff f821 	bl	800055c <HAL_Init>
  SystemClock_Config();
 800151a:	f7ff ff9d 	bl	8001458 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <main+0xc8>)
 8001520:	9401      	str	r4, [sp, #4]
 8001522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <main+0xcc>)
  huart2.Instance = USART2;
 8001526:	4d2e      	ldr	r5, [pc, #184]	; (80015e0 <main+0xd0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	f042 0204 	orr.w	r2, r2, #4
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
 800152e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001530:	f002 0204 	and.w	r2, r2, #4
 8001534:	9201      	str	r2, [sp, #4]
 8001536:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001538:	9402      	str	r4, [sp, #8]
 800153a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
 8001542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001544:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001548:	9202      	str	r2, [sp, #8]
 800154a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	9403      	str	r4, [sp, #12]
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f002 0201 	and.w	r2, r2, #1
 800155c:	9203      	str	r2, [sp, #12]
 800155e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	9404      	str	r4, [sp, #16]
 8001562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001564:	f042 0202 	orr.w	r2, r2, #2
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001570:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001574:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001578:	f7ff f982 	bl	8000880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001582:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <main+0xd4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <main+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001588:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158c:	f7ff f89e 	bl	80006cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001590:	2320      	movs	r3, #32
 8001592:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <main+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800159a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f7ff f894 	bl	80006cc <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80015a4:	4a11      	ldr	r2, [pc, #68]	; (80015ec <main+0xdc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 80015a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015ac:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b0:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b2:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015be:	f7ff fd97 	bl	80010f0 <HAL_UART_Init>
 80015c2:	b940      	cbnz	r0, 80015d6 <main+0xc6>
	while(HAL_UART_Receive_IT(&huart2,Rx_Buffer,1)!=HAL_OK);
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <main+0xe0>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	4621      	mov	r1, r4
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7ff fe1b 	bl	8001206 <HAL_UART_Receive_IT>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d1f8      	bne.n	80015c6 <main+0xb6>
 80015d4:	e7fe      	b.n	80015d4 <main+0xc4>
 80015d6:	e7fe      	b.n	80015d6 <main+0xc6>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	20000030 	.word	0x20000030
 80015e4:	10210000 	.word	0x10210000
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40004400 	.word	0x40004400
 80015f0:	2000002c 	.word	0x2000002c

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f7fe ffdc 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	4611      	mov	r1, r2
 8001600:	f06f 000b 	mvn.w	r0, #11
 8001604:	f7fe ffe8 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	4611      	mov	r1, r2
 800160c:	f06f 000a 	mvn.w	r0, #10
 8001610:	f7fe ffe2 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	4611      	mov	r1, r2
 8001618:	f06f 0009 	mvn.w	r0, #9
 800161c:	f7fe ffdc 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	4611      	mov	r1, r2
 8001624:	f06f 0004 	mvn.w	r0, #4
 8001628:	f7fe ffd6 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	4611      	mov	r1, r2
 8001630:	f06f 0003 	mvn.w	r0, #3
 8001634:	f7fe ffd0 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	4611      	mov	r1, r2
 800163c:	f06f 0001 	mvn.w	r0, #1
 8001640:	f7fe ffca 	bl	80005d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	4611      	mov	r1, r2
 8001648:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001650:	f7fe bfc2 	b.w	80005d8 <HAL_NVIC_SetPriority>

08001654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001656:	6802      	ldr	r2, [r0, #0]
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_UART_MspInit+0x58>)
 800165a:	429a      	cmp	r2, r3
{
 800165c:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800165e:	d122      	bne.n	80016a6 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001660:	2400      	movs	r4, #0
 8001662:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001666:	9400      	str	r4, [sp, #0]
 8001668:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	4811      	ldr	r0, [pc, #68]	; (80016b0 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800166c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001670:	6419      	str	r1, [r3, #64]	; 0x40
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001684:	2301      	movs	r3, #1
 8001686:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168e:	2307      	movs	r3, #7
 8001690:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f7ff f81b 	bl	80006cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001696:	2026      	movs	r0, #38	; 0x26
 8001698:	4622      	mov	r2, r4
 800169a:	4621      	mov	r1, r4
 800169c:	f7fe ff9c 	bl	80005d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a0:	2026      	movs	r0, #38	; 0x26
 80016a2:	f7fe ffcd 	bl	8000640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016a6:	b006      	add	sp, #24
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	bf00      	nop
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40020000 	.word	0x40020000

080016b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80016b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f7fe ff6b 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80016be:	f7fe bfee 	b.w	800069e <HAL_SYSTICK_IRQHandler>
	...

080016c4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <USART2_IRQHandler+0x8>)
 80016c6:	f7ff bdfd 	b.w	80012c4 <HAL_UART_IRQHandler>
 80016ca:	bf00      	nop
 80016cc:	20000030 	.word	0x20000030

080016d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	490f      	ldr	r1, [pc, #60]	; (8001710 <SystemInit+0x40>)
 80016d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80016d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <SystemInit+0x44>)
 80016e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80016ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80016f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <SystemInit+0x48>)
 80016fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001702:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001704:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	40023800 	.word	0x40023800
 8001718:	24003010 	.word	0x24003010

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001722:	e003      	b.n	800172c <LoopCopyDataInit>

08001724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800172a:	3104      	adds	r1, #4

0800172c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001734:	d3f6      	bcc.n	8001724 <CopyDataInit>
  ldr  r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001738:	e002      	b.n	8001740 <LoopFillZerobss>

0800173a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800173a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800173c:	f842 3b04 	str.w	r3, [r2], #4

08001740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001744:	d3f9      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffc3 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f000 f811 	bl	8001770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fedf 	bl	8001510 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001758:	080017f8 	.word	0x080017f8
  ldr  r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001760:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001764:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001768:	20000070 	.word	0x20000070

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <__libc_init_array>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	4e0d      	ldr	r6, [pc, #52]	; (80017a8 <__libc_init_array+0x38>)
 8001774:	4c0d      	ldr	r4, [pc, #52]	; (80017ac <__libc_init_array+0x3c>)
 8001776:	1ba4      	subs	r4, r4, r6
 8001778:	10a4      	asrs	r4, r4, #2
 800177a:	2500      	movs	r5, #0
 800177c:	42a5      	cmp	r5, r4
 800177e:	d109      	bne.n	8001794 <__libc_init_array+0x24>
 8001780:	4e0b      	ldr	r6, [pc, #44]	; (80017b0 <__libc_init_array+0x40>)
 8001782:	4c0c      	ldr	r4, [pc, #48]	; (80017b4 <__libc_init_array+0x44>)
 8001784:	f000 f818 	bl	80017b8 <_init>
 8001788:	1ba4      	subs	r4, r4, r6
 800178a:	10a4      	asrs	r4, r4, #2
 800178c:	2500      	movs	r5, #0
 800178e:	42a5      	cmp	r5, r4
 8001790:	d105      	bne.n	800179e <__libc_init_array+0x2e>
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001798:	4798      	blx	r3
 800179a:	3501      	adds	r5, #1
 800179c:	e7ee      	b.n	800177c <__libc_init_array+0xc>
 800179e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017a2:	4798      	blx	r3
 80017a4:	3501      	adds	r5, #1
 80017a6:	e7f2      	b.n	800178e <__libc_init_array+0x1e>
 80017a8:	080017f0 	.word	0x080017f0
 80017ac:	080017f0 	.word	0x080017f0
 80017b0:	080017f0 	.word	0x080017f0
 80017b4:	080017f4 	.word	0x080017f4

080017b8 <_init>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr

080017c4 <_fini>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr
