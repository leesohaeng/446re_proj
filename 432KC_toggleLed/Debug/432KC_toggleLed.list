
432KC_toggleLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08003444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  20000068  080034ac  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c0  080034ac  000201c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013e72  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000268f  00000000  00000000  00033f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000551e  00000000  00000000  00036599  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0003bab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c18  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000558a  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cb1  00000000  00000000  00042512  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000461c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001e14  00000000  00000000  00046240  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00048054  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000480f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003304 	.word	0x08003304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003304 	.word	0x08003304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_InitTick+0x24>)
{
 8000584:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 fb72 	bl	8000c78 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000594:	2200      	movs	r2, #0
 8000596:	4621      	mov	r1, r4
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 fb2c 	bl	8000bf8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_Init>:
{
 80005a8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 fb12 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ffe5 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005b6:	f001 fe2b 	bl	8002210 <HAL_MspInit>
}
 80005ba:	2000      	movs	r0, #0
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005c0:	4a02      	ldr	r2, [pc, #8]	; (80005cc <HAL_IncTick+0xc>)
 80005c2:	6813      	ldr	r3, [r2, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000090 	.word	0x20000090

080005d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_GetTick+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000090 	.word	0x20000090

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b538      	push	{r3, r4, r5, lr}
 80005de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff6 	bl	80005d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80005e6:	4605      	mov	r5, r0
  {
    wait++;
 80005e8:	bf18      	it	ne
 80005ea:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80005ec:	f7ff fff0 	bl	80005d0 <HAL_GetTick>
 80005f0:	1b40      	subs	r0, r0, r5
 80005f2:	4284      	cmp	r4, r0
 80005f4:	d8fa      	bhi.n	80005ec <HAL_Delay+0x10>
  {
  }
}
 80005f6:	bd38      	pop	{r3, r4, r5, pc}

080005f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005f8:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fa:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80005fe:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000602:	fab6 f386 	clz	r3, r6
 8000606:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800060a:	40de      	lsrs	r6, r3
 800060c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800060e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000612:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000616:	fa93 f5a3 	rbit	r5, r3
 800061a:	fab5 f585 	clz	r5, r5
 800061e:	fa93 f3a3 	rbit	r3, r3
 8000622:	2407      	movs	r4, #7
 8000624:	fa21 f505 	lsr.w	r5, r1, r5
 8000628:	fa04 f505 	lsl.w	r5, r4, r5
 800062c:	fab3 f383 	clz	r3, r3
 8000630:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000634:	40d9      	lsrs	r1, r3
 8000636:	ea24 0405 	bic.w	r4, r4, r5
 800063a:	fa02 f101 	lsl.w	r1, r2, r1
 800063e:	4321      	orrs	r1, r4
 8000640:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8000644:	bd70      	pop	{r4, r5, r6, pc}
	...

08000648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000648:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064e:	4604      	mov	r4, r0
 8000650:	2800      	cmp	r0, #0
 8000652:	f000 80b2 	beq.w	80007ba <HAL_ADC_Init+0x172>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000656:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000658:	b925      	cbnz	r5, 8000664 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065a:	f001 fe1f 	bl	800229c <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800065e:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000660:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8000664:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800066a:	bf41      	itttt	mi
 800066c:	689a      	ldrmi	r2, [r3, #8]
 800066e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8000672:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8000676:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000678:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 800067a:	00d1      	lsls	r1, r2, #3
 800067c:	d574      	bpl.n	8000768 <HAL_ADC_Init+0x120>
 800067e:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000680:	00d2      	lsls	r2, r2, #3
 8000682:	f140 8088 	bpl.w	8000796 <HAL_ADC_Init+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000686:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000688:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800068a:	06d5      	lsls	r5, r2, #27
 800068c:	f100 8091 	bmi.w	80007b2 <HAL_ADC_Init+0x16a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000690:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000692:	0751      	lsls	r1, r2, #29
 8000694:	f100 808d 	bmi.w	80007b2 <HAL_ADC_Init+0x16a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000698:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800069a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800069e:	f042 0202 	orr.w	r2, r2, #2
 80006a2:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	f002 0203 	and.w	r2, r2, #3
 80006aa:	2a01      	cmp	r2, #1
 80006ac:	f040 8087 	bne.w	80007be <HAL_ADC_Init+0x176>
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	07d2      	lsls	r2, r2, #31
 80006b4:	f140 8083 	bpl.w	80007be <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 80006b8:	68e5      	ldr	r5, [r4, #12]
 80006ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80006bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 80006be:	432a      	orrs	r2, r5
 80006c0:	68a5      	ldr	r5, [r4, #8]
 80006c2:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006c4:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006c6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 80006c8:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80006cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006d0:	bf02      	ittt	eq
 80006d2:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 80006d4:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80006d8:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80006de:	b121      	cbz	r1, 80006ea <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006e2:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006e6:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006e8:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80006ea:	68dd      	ldr	r5, [r3, #12]
 80006ec:	4938      	ldr	r1, [pc, #224]	; (80007d0 <HAL_ADC_Init+0x188>)
 80006ee:	4029      	ands	r1, r5
 80006f0:	430a      	orrs	r2, r1
 80006f2:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	f012 0f0c 	tst.w	r2, #12
 80006fa:	d11e      	bne.n	800073a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80006fc:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80006fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000700:	69a5      	ldr	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000702:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000704:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000708:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800070c:	f021 0102 	bic.w	r1, r1, #2
 8000710:	430a      	orrs	r2, r1
 8000712:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000714:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000716:	2a01      	cmp	r2, #1
 8000718:	d147      	bne.n	80007aa <HAL_ADC_Init+0x162>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800071a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800071c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800071e:	6919      	ldr	r1, [r3, #16]
 8000720:	432a      	orrs	r2, r5
 8000722:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000724:	f042 0201 	orr.w	r2, r2, #1
 8000728:	432a      	orrs	r2, r5
 800072a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800072c:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8000730:	432a      	orrs	r2, r5
 8000732:	f021 0104 	bic.w	r1, r1, #4
 8000736:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000738:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800073a:	6922      	ldr	r2, [r4, #16]
 800073c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800073e:	bf05      	ittet	eq
 8000740:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000742:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000744:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000746:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800074a:	bf06      	itte	eq
 800074c:	f021 010f 	biceq.w	r1, r1, #15
 8000750:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000752:	f022 020f 	bicne.w	r2, r2, #15
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000758:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800075a:	f023 0303 	bic.w	r3, r3, #3
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000764:	b003      	add	sp, #12
 8000766:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8000768:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800076a:	491a      	ldr	r1, [pc, #104]	; (80007d4 <HAL_ADC_Init+0x18c>)
 800076c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8000770:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_ADC_Init+0x190>)
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000782:	220a      	movs	r2, #10
 8000784:	434a      	muls	r2, r1
      wait_loop_index--;
 8000786:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8000788:	9a01      	ldr	r2, [sp, #4]
 800078a:	2a00      	cmp	r2, #0
 800078c:	f43f af77 	beq.w	800067e <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8000790:	9a01      	ldr	r2, [sp, #4]
 8000792:	3a01      	subs	r2, #1
 8000794:	e7f7      	b.n	8000786 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000796:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000798:	f042 0210 	orr.w	r2, r2, #16
 800079c:	65a2      	str	r2, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007a0:	f042 0201 	orr.w	r2, r2, #1
 80007a4:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80007a6:	2001      	movs	r0, #1
 80007a8:	e76e      	b.n	8000688 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007aa:	691a      	ldr	r2, [r3, #16]
 80007ac:	f022 0201 	bic.w	r2, r2, #1
 80007b0:	e7c2      	b.n	8000738 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
 80007bc:	e7d2      	b.n	8000764 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80007be:	4907      	ldr	r1, [pc, #28]	; (80007dc <HAL_ADC_Init+0x194>)
 80007c0:	6865      	ldr	r5, [r4, #4]
 80007c2:	688a      	ldr	r2, [r1, #8]
 80007c4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80007c8:	432a      	orrs	r2, r5
 80007ca:	608a      	str	r2, [r1, #8]
 80007cc:	e774      	b.n	80006b8 <HAL_ADC_Init+0x70>
 80007ce:	bf00      	nop
 80007d0:	fff0c007 	.word	0xfff0c007
 80007d4:	001e8480 	.word	0x001e8480
 80007d8:	20000000 	.word	0x20000000
 80007dc:	50040300 	.word	0x50040300

080007e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80007ea:	2b01      	cmp	r3, #1
{
 80007ec:	4605      	mov	r5, r0
 80007ee:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80007f0:	f000 818d 	beq.w	8000b0e <HAL_ADC_ConfigChannel+0x32e>
 80007f4:	2301      	movs	r3, #1
 80007f6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007fa:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80007fc:	6882      	ldr	r2, [r0, #8]
 80007fe:	0757      	lsls	r7, r2, #29
 8000800:	f100 817f 	bmi.w	8000b02 <HAL_ADC_ConfigChannel+0x322>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000804:	684b      	ldr	r3, [r1, #4]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d808      	bhi.n	800081c <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 800080a:	3b02      	subs	r3, #2
 800080c:	2b03      	cmp	r3, #3
 800080e:	d85c      	bhi.n	80008ca <HAL_ADC_ConfigChannel+0xea>
 8000810:	e8df f003 	tbb	[pc, r3]
 8000814:	58565402 	.word	0x58565402
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000818:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 800081a:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800081c:	6861      	ldr	r1, [r4, #4]
 800081e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000822:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000826:	fab3 f383 	clz	r3, r3
 800082a:	f401 7640 	and.w	r6, r1, #768	; 0x300
 800082e:	40de      	lsrs	r6, r3
 8000830:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 8000834:	f001 011f 	and.w	r1, r1, #31
 8000838:	231f      	movs	r3, #31
 800083a:	fa03 f201 	lsl.w	r2, r3, r1
 800083e:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8000842:	ea23 0302 	bic.w	r3, r3, r2
 8000846:	6822      	ldr	r2, [r4, #0]
 8000848:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800084c:	408a      	lsls	r2, r1
 800084e:	4313      	orrs	r3, r2
 8000850:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000854:	6883      	ldr	r3, [r0, #8]
 8000856:	f013 0f0c 	tst.w	r3, #12
 800085a:	d11e      	bne.n	800089a <HAL_ADC_ConfigChannel+0xba>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800085c:	68a2      	ldr	r2, [r4, #8]
 800085e:	6821      	ldr	r1, [r4, #0]
 8000860:	f7ff feca 	bl	80005f8 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000864:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000866:	f8d5 e000 	ldr.w	lr, [r5]
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000870:	2e04      	cmp	r6, #4
 8000872:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8000876:	d02a      	beq.n	80008ce <HAL_ADC_ConfigChannel+0xee>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000878:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800087c:	0048      	lsls	r0, r1, #1
 800087e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000880:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000884:	4081      	lsls	r1, r0
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	4319      	orrs	r1, r3
 800088c:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000890:	4bc6      	ldr	r3, [pc, #792]	; (8000bac <HAL_ADC_ConfigChannel+0x3cc>)
 8000892:	4003      	ands	r3, r0
 8000894:	4319      	orrs	r1, r3
 8000896:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800089a:	6828      	ldr	r0, [r5, #0]
 800089c:	6883      	ldr	r3, [r0, #8]
 800089e:	f003 0303 	and.w	r3, r3, #3
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	f040 8135 	bne.w	8000b12 <HAL_ADC_ConfigChannel+0x332>
 80008a8:	6803      	ldr	r3, [r0, #0]
 80008aa:	07de      	lsls	r6, r3, #31
 80008ac:	f140 8131 	bpl.w	8000b12 <HAL_ADC_ConfigChannel+0x332>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b0:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008b2:	2300      	movs	r3, #0
 80008b4:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
}
 80008b8:	b003      	add	sp, #12
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80008bc:	2312      	movs	r3, #18
 80008be:	e7ac      	b.n	800081a <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80008c0:	2318      	movs	r3, #24
 80008c2:	e7aa      	b.n	800081a <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80008c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c8:	e7a7      	b.n	800081a <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80008ca:	2306      	movs	r3, #6
 80008cc:	e7a5      	b.n	800081a <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008ce:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008d2:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80008d6:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80008da:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80008de:	2800      	cmp	r0, #0
 80008e0:	d13a      	bne.n	8000958 <HAL_ADC_ConfigChannel+0x178>
 80008e2:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80008e6:	4287      	cmp	r7, r0
 80008e8:	f040 814c 	bne.w	8000b84 <HAL_ADC_ConfigChannel+0x3a4>
  MODIFY_REG(*preg,
 80008ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008f0:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80008f4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008f6:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 80008fa:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80008fe:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000902:	bb9f      	cbnz	r7, 800096c <HAL_ADC_ConfigChannel+0x18c>
 8000904:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000908:	4283      	cmp	r3, r0
 800090a:	f040 8140 	bne.w	8000b8e <HAL_ADC_ConfigChannel+0x3ae>
  MODIFY_REG(*preg,
 800090e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000912:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000914:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000916:	6891      	ldr	r1, [r2, #8]
 8000918:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800091c:	f102 0608 	add.w	r6, r2, #8
 8000920:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000924:	bb77      	cbnz	r7, 8000984 <HAL_ADC_ConfigChannel+0x1a4>
 8000926:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800092a:	4298      	cmp	r0, r3
 800092c:	f040 8136 	bne.w	8000b9c <HAL_ADC_ConfigChannel+0x3bc>
  MODIFY_REG(*preg,
 8000930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000934:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000936:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000938:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800093c:	68d2      	ldr	r2, [r2, #12]
 800093e:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8000942:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000946:	bb4e      	cbnz	r6, 800099c <HAL_ADC_ConfigChannel+0x1bc>
 8000948:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800094c:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 800094e:	bf04      	itt	eq
 8000950:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000954:	6002      	streq	r2, [r0, #0]
 8000956:	e7a0      	b.n	800089a <HAL_ADC_ConfigChannel+0xba>
 8000958:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800095c:	fab0 f080 	clz	r0, r0
 8000960:	4287      	cmp	r7, r0
 8000962:	d0c3      	beq.n	80008ec <HAL_ADC_ConfigChannel+0x10c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000964:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000968:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800096c:	fa93 f3a3 	rbit	r3, r3
 8000970:	fab3 f383 	clz	r3, r3
 8000974:	4283      	cmp	r3, r0
 8000976:	d0ca      	beq.n	800090e <HAL_ADC_ConfigChannel+0x12e>
 8000978:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800097a:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800097c:	f102 0608 	add.w	r6, r2, #8
 8000980:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000984:	fa93 f3a3 	rbit	r3, r3
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	4283      	cmp	r3, r0
 800098e:	d0cf      	beq.n	8000930 <HAL_ADC_ConfigChannel+0x150>
 8000990:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000994:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	fab3 f383 	clz	r3, r3
 80009a4:	e7d2      	b.n	800094c <HAL_ADC_ConfigChannel+0x16c>
 80009a6:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80009aa:	fab2 f282 	clz	r2, r2
 80009ae:	3201      	adds	r2, #1
 80009b0:	2a09      	cmp	r2, #9
 80009b2:	d859      	bhi.n	8000a68 <HAL_ADC_ConfigChannel+0x288>
 80009b4:	fa93 f2a3 	rbit	r2, r3
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	3201      	adds	r2, #1
 80009be:	0692      	lsls	r2, r2, #26
 80009c0:	fa93 f1a3 	rbit	r1, r3
 80009c4:	fab1 f181 	clz	r1, r1
 80009c8:	1c4e      	adds	r6, r1, #1
 80009ca:	2101      	movs	r1, #1
 80009cc:	40b1      	lsls	r1, r6
 80009ce:	e001      	b.n	80009d4 <HAL_ADC_ConfigChannel+0x1f4>
 80009d0:	fa01 f10e 	lsl.w	r1, r1, lr
 80009d4:	430a      	orrs	r2, r1
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d140      	bne.n	8000a5c <HAL_ADC_ConfigChannel+0x27c>
 80009da:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009de:	1c59      	adds	r1, r3, #1
 80009e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80009e4:	0509      	lsls	r1, r1, #20
 80009e6:	4311      	orrs	r1, r2
 80009e8:	68a2      	ldr	r2, [r4, #8]
 80009ea:	f7ff fe05 	bl	80005f8 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009ee:	6822      	ldr	r2, [r4, #0]
 80009f0:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3d0>)
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d14b      	bne.n	8000a8e <HAL_ADC_ConfigChannel+0x2ae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009f6:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3d4>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009fe:	f47f af57 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	6898      	ldr	r0, [r3, #8]
 8000a06:	f000 0003 	and.w	r0, r0, #3
 8000a0a:	2801      	cmp	r0, #1
 8000a0c:	d103      	bne.n	8000a16 <HAL_ADC_ConfigChannel+0x236>
 8000a0e:	6819      	ldr	r1, [r3, #0]
 8000a10:	07c9      	lsls	r1, r1, #31
 8000a12:	f100 80b2 	bmi.w	8000b7a <HAL_ADC_ConfigChannel+0x39a>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a16:	4966      	ldr	r1, [pc, #408]	; (8000bb0 <HAL_ADC_ConfigChannel+0x3d0>)
 8000a18:	428a      	cmp	r2, r1
 8000a1a:	d149      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x2d0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000a1c:	4a66      	ldr	r2, [pc, #408]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3d8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	f47f af46 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
 8000a24:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a28:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a2c:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a30:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000a34:	430b      	orrs	r3, r1
 8000a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a3a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8000a3e:	4b5f      	ldr	r3, [pc, #380]	; (8000bbc <HAL_ADC_ConfigChannel+0x3dc>)
 8000a40:	4a5f      	ldr	r2, [pc, #380]	; (8000bc0 <HAL_ADC_ConfigChannel+0x3e0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a48:	2378      	movs	r3, #120	; 0x78
 8000a4a:	4353      	muls	r3, r2
                wait_loop_index--;
 8000a4c:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8000a4e:	9b01      	ldr	r3, [sp, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f43f af2d 	beq.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
                wait_loop_index--;
 8000a56:	9b01      	ldr	r3, [sp, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	e7f7      	b.n	8000a4c <HAL_ADC_ConfigChannel+0x26c>
 8000a5c:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000a60:	fab1 f181 	clz	r1, r1
 8000a64:	3101      	adds	r1, #1
 8000a66:	e7bb      	b.n	80009e0 <HAL_ADC_ConfigChannel+0x200>
 8000a68:	fa93 f2a3 	rbit	r2, r3
 8000a6c:	fab2 f282 	clz	r2, r2
 8000a70:	3201      	adds	r2, #1
 8000a72:	0696      	lsls	r6, r2, #26
 8000a74:	fa93 f1a3 	rbit	r1, r3
 8000a78:	fab1 f181 	clz	r1, r1
 8000a7c:	1c4a      	adds	r2, r1, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4091      	lsls	r1, r2
 8000a82:	e06c      	b.n	8000b5e <HAL_ADC_ConfigChannel+0x37e>
 8000a84:	fa93 f3a3 	rbit	r3, r3
 8000a88:	fab3 f383 	clz	r3, r3
 8000a8c:	e06d      	b.n	8000b6a <HAL_ADC_ConfigChannel+0x38a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <HAL_ADC_ConfigChannel+0x3e4>)
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d104      	bne.n	8000a9e <HAL_ADC_ConfigChannel+0x2be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a94:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3d4>)
 8000a96:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000a9c:	e7af      	b.n	80009fe <HAL_ADC_ConfigChannel+0x21e>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <HAL_ADC_ConfigChannel+0x3e8>)
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	f47f af05 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <HAL_ADC_ConfigChannel+0x3d4>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000aaa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000aae:	e7a6      	b.n	80009fe <HAL_ADC_ConfigChannel+0x21e>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000ab0:	4944      	ldr	r1, [pc, #272]	; (8000bc4 <HAL_ADC_ConfigChannel+0x3e4>)
 8000ab2:	428a      	cmp	r2, r1
 8000ab4:	d111      	bne.n	8000ada <HAL_ADC_ConfigChannel+0x2fa>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000ab6:	4a40      	ldr	r2, [pc, #256]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3d8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	f47f aef9 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
 8000abe:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ac2:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ac6:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aca:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8000ad8:	e6ea      	b.n	80008b0 <HAL_ADC_ConfigChannel+0xd0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000ada:	493b      	ldr	r1, [pc, #236]	; (8000bc8 <HAL_ADC_ConfigChannel+0x3e8>)
 8000adc:	428a      	cmp	r2, r1
 8000ade:	f47f aee7 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000ae2:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <HAL_ADC_ConfigChannel+0x3d8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	f47f aee3 	bne.w	80008b0 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aea:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aee:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000af2:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000af6:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000afa:	430b      	orrs	r3, r1
 8000afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b00:	e7e8      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0x2f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b02:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8000b04:	f042 0220 	orr.w	r2, r2, #32
 8000b08:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	e6d1      	b.n	80008b2 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_LOCK(hadc);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	e6d2      	b.n	80008b8 <HAL_ADC_ConfigChannel+0xd8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000b12:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000b14:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <HAL_ADC_ConfigChannel+0x3ec>)
 8000b16:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	f001 0e20 	and.w	lr, r1, #32
 8000b20:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b24:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000b28:	4072      	eors	r2, r6
 8000b2a:	403a      	ands	r2, r7
 8000b2c:	4072      	eors	r2, r6
 8000b2e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000b32:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <HAL_ADC_ConfigChannel+0x3f0>)
 8000b34:	4291      	cmp	r1, r2
 8000b36:	f47f af5a 	bne.w	80009ee <HAL_ADC_ConfigChannel+0x20e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000b3a:	2f00      	cmp	r7, #0
 8000b3c:	f47f af33 	bne.w	80009a6 <HAL_ADC_ConfigChannel+0x1c6>
 8000b40:	f3c3 6184 	ubfx	r1, r3, #26, #5
 8000b44:	f101 0e01 	add.w	lr, r1, #1
 8000b48:	f1be 0f09 	cmp.w	lr, #9
 8000b4c:	f04f 0101 	mov.w	r1, #1
 8000b50:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8000b54:	f67f af3c 	bls.w	80009d0 <HAL_ADC_ConfigChannel+0x1f0>
 8000b58:	4616      	mov	r6, r2
 8000b5a:	fa01 f10e 	lsl.w	r1, r1, lr
 8000b5e:	ea41 0206 	orr.w	r2, r1, r6
 8000b62:	2f00      	cmp	r7, #0
 8000b64:	d18e      	bne.n	8000a84 <HAL_ADC_ConfigChannel+0x2a4>
 8000b66:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b6e:	f1a3 011b 	sub.w	r1, r3, #27
 8000b72:	0509      	lsls	r1, r1, #20
 8000b74:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000b78:	e735      	b.n	80009e6 <HAL_ADC_ConfigChannel+0x206>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b7a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	65ab      	str	r3, [r5, #88]	; 0x58
 8000b82:	e696      	b.n	80008b2 <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b84:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b88:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000b8c:	e6ba      	b.n	8000904 <HAL_ADC_ConfigChannel+0x124>
 8000b8e:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b90:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b92:	f102 0608 	add.w	r6, r2, #8
 8000b96:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000b9a:	e6c4      	b.n	8000926 <HAL_ADC_ConfigChannel+0x146>
 8000b9c:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ba0:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000ba8:	e6ce      	b.n	8000948 <HAL_ADC_ConfigChannel+0x168>
 8000baa:	bf00      	nop
 8000bac:	03fff000 	.word	0x03fff000
 8000bb0:	c7520000 	.word	0xc7520000
 8000bb4:	50040300 	.word	0x50040300
 8000bb8:	50040000 	.word	0x50040000
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	001e8480 	.word	0x001e8480
 8000bc4:	cb840000 	.word	0xcb840000
 8000bc8:	80000001 	.word	0x80000001
 8000bcc:	0007ffff 	.word	0x0007ffff
 8000bd0:	407f0000 	.word	0x407f0000

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bdc:	041b      	lsls	r3, r3, #16
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000be4:	0200      	lsls	r0, r0, #8
 8000be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000bee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bf0:	60d3      	str	r3, [r2, #12]
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b530      	push	{r4, r5, lr}
 8000bfc:	68dc      	ldr	r4, [r3, #12]
 8000bfe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	bf28      	it	cs
 8000c0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 0501 	mov.w	r5, #1
 8000c14:	fa05 f303 	lsl.w	r3, r5, r3
 8000c18:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1c:	bf8c      	ite	hi
 8000c1e:	3c03      	subhi	r4, #3
 8000c20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c22:	4019      	ands	r1, r3
 8000c24:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c26:	fa05 f404 	lsl.w	r4, r5, r4
 8000c2a:	3c01      	subs	r4, #1
 8000c2c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	ea42 0201 	orr.w	r2, r2, r1
 8000c34:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	bfaf      	iteee	ge
 8000c3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	f000 000f 	andlt.w	r0, r0, #15
 8000c42:	4b06      	ldrlt	r3, [pc, #24]	; (8000c5c <HAL_NVIC_SetPriority+0x64>)
 8000c44:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	bfa5      	ittet	ge
 8000c48:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c4c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c54:	bd30      	pop	{r4, r5, pc}
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	e000ed14 	.word	0xe000ed14

08000c60 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c60:	0942      	lsrs	r2, r0, #5
 8000c62:	2301      	movs	r3, #1
 8000c64:	f000 001f 	and.w	r0, r0, #31
 8000c68:	fa03 f000 	lsl.w	r0, r3, r0
 8000c6c:	4b01      	ldr	r3, [pc, #4]	; (8000c74 <HAL_NVIC_EnableIRQ+0x14>)
 8000c6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	3801      	subs	r0, #1
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d20a      	bcs.n	8000c96 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c84:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	21f0      	movs	r1, #240	; 0xf0
 8000c88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ca6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ca8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000caa:	bf0c      	ite	eq
 8000cac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cb0:	f022 0204 	bicne.w	r2, r2, #4
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cbc:	4770      	bx	lr

08000cbe <HAL_SYSTICK_IRQHandler>:
{
 8000cbe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cc0:	f7ff fffc 	bl	8000cbc <HAL_SYSTICK_Callback>
 8000cc4:	bd08      	pop	{r3, pc}
	...

08000cc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d05b      	beq.n	8000d86 <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cce:	6801      	ldr	r1, [r0, #0]
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <HAL_DMA_Init+0xc4>)
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f04f 0414 	mov.w	r4, #20
 8000cd8:	d841      	bhi.n	8000d5e <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cda:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <HAL_DMA_Init+0xc8>)
 8000cdc:	440a      	add	r2, r1
 8000cde:	fbb2 f2f4 	udiv	r2, r2, r4
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ce6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000cea:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cf2:	6884      	ldr	r4, [r0, #8]
 8000cf4:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000cf8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000cfa:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfc:	432b      	orrs	r3, r5
 8000cfe:	6945      	ldr	r5, [r0, #20]
 8000d00:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d02:	6985      	ldr	r5, [r0, #24]
 8000d04:	432b      	orrs	r3, r5
 8000d06:	69c5      	ldr	r5, [r0, #28]
 8000d08:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d0a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d0c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000d10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d14:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000d16:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d18:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000d1c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d1e:	d011      	beq.n	8000d44 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_DMA_Init+0xcc>)
 8000d22:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000d26:	429a      	cmp	r2, r3
 8000d28:	f04f 030f 	mov.w	r3, #15
 8000d2c:	d11f      	bne.n	8000d6e <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000d2e:	491a      	ldr	r1, [pc, #104]	; (8000d98 <HAL_DMA_Init+0xd0>)
 8000d30:	680a      	ldr	r2, [r1, #0]
 8000d32:	40a3      	lsls	r3, r4
 8000d34:	ea22 0303 	bic.w	r3, r2, r3
 8000d38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000d3a:	6842      	ldr	r2, [r0, #4]
 8000d3c:	680b      	ldr	r3, [r1, #0]
 8000d3e:	40a2      	lsls	r2, r4
 8000d40:	431a      	orrs	r2, r3
 8000d42:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000d44:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d46:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d48:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000d4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000d4c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000d4e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000d50:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8000d52:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d56:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_DMA_Init+0xd4>)
 8000d60:	440b      	add	r3, r1
 8000d62:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_DMA_Init+0xd8>)
 8000d6c:	e7bd      	b.n	8000cea <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <HAL_DMA_Init+0xdc>)
 8000d70:	680a      	ldr	r2, [r1, #0]
 8000d72:	40a3      	lsls	r3, r4
 8000d74:	ea22 0303 	bic.w	r3, r2, r3
 8000d78:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000d7a:	6843      	ldr	r3, [r0, #4]
 8000d7c:	680a      	ldr	r2, [r1, #0]
 8000d7e:	40a3      	lsls	r3, r4
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	e7de      	b.n	8000d44 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8000d86:	2001      	movs	r0, #1
}
 8000d88:	bd30      	pop	{r4, r5, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020407 	.word	0x40020407
 8000d90:	bffdfff8 	.word	0xbffdfff8
 8000d94:	40020000 	.word	0x40020000
 8000d98:	400200a8 	.word	0x400200a8
 8000d9c:	bffdfbf8 	.word	0xbffdfbf8
 8000da0:	40020400 	.word	0x40020400
 8000da4:	400204a8 	.word	0x400204a8

08000da8 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da8:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000daa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000dac:	6803      	ldr	r3, [r0, #0]
{
 8000dae:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000db0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000db2:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000db4:	2404      	movs	r4, #4
 8000db6:	4094      	lsls	r4, r2
 8000db8:	4226      	tst	r6, r4
 8000dba:	d00e      	beq.n	8000dda <HAL_DMA_IRQHandler+0x32>
 8000dbc:	f015 0f04 	tst.w	r5, #4
 8000dc0:	d00b      	beq.n	8000dda <HAL_DMA_IRQHandler+0x32>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dc6:	bf5e      	ittt	pl
 8000dc8:	681a      	ldrpl	r2, [r3, #0]
 8000dca:	f022 0204 	bicpl.w	r2, r2, #4
 8000dce:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000dd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8000dd2:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000dd4:	b373      	cbz	r3, 8000e34 <HAL_DMA_IRQHandler+0x8c>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000dd6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000dd8:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dda:	2402      	movs	r4, #2
 8000ddc:	4094      	lsls	r4, r2
 8000dde:	4226      	tst	r6, r4
 8000de0:	d012      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x60>
 8000de2:	f015 0f02 	tst.w	r5, #2
 8000de6:	d00f      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	0695      	lsls	r5, r2, #26
 8000dec:	d406      	bmi.n	8000dfc <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	f022 020a 	bic.w	r2, r2, #10
 8000df4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000dfc:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8000dfe:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000e00:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8000e04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e06:	e7e5      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e08:	2408      	movs	r4, #8
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	4234      	tst	r4, r6
 8000e0e:	d011      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x8c>
 8000e10:	072c      	lsls	r4, r5, #28
 8000e12:	d50f      	bpl.n	8000e34 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e14:	681c      	ldr	r4, [r3, #0]
 8000e16:	f024 040e 	bic.w	r4, r4, #14
 8000e1a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	fa03 f202 	lsl.w	r2, r3, r2
 8000e22:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e24:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000e26:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e32:	e7cf      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x2c>
}
 8000e34:	bc70      	pop	{r4, r5, r6}
 8000e36:	4770      	bx	lr

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e3e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000f9c <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e44:	4a53      	ldr	r2, [pc, #332]	; (8000f94 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e46:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e48:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 8000e4c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e4e:	9c01      	ldr	r4, [sp, #4]
 8000e50:	40dc      	lsrs	r4, r3
 8000e52:	d102      	bne.n	8000e5a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000e54:	b005      	add	sp, #20
 8000e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e5a:	2401      	movs	r4, #1
 8000e5c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000e60:	9c01      	ldr	r4, [sp, #4]
 8000e62:	ea14 050a 	ands.w	r5, r4, sl
 8000e66:	f000 808f 	beq.w	8000f88 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	684c      	ldr	r4, [r1, #4]
 8000e6c:	f024 0b10 	bic.w	fp, r4, #16
 8000e70:	f1bb 0f02 	cmp.w	fp, #2
 8000e74:	d111      	bne.n	8000e9a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e76:	08df      	lsrs	r7, r3, #3
 8000e78:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e7c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000e80:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e82:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e86:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000e8a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e8e:	690e      	ldr	r6, [r1, #16]
 8000e90:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e94:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000e98:	623e      	str	r6, [r7, #32]
 8000e9a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000e9e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000ea0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000ea2:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ea6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000eac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eae:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eba:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000ebe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	d811      	bhi.n	8000ee6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000ec2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000ec4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ec8:	68ce      	ldr	r6, [r1, #12]
 8000eca:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000ece:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000ed2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ed4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eda:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000ede:	409e      	lsls	r6, r3
 8000ee0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000ee4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ee6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000ee8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eea:	688e      	ldr	r6, [r1, #8]
 8000eec:	fa06 f60c 	lsl.w	r6, r6, ip
 8000ef0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000ef4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef6:	d547      	bpl.n	8000f88 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000efc:	f046 0601 	orr.w	r6, r6, #1
 8000f00:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8000f04:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000f08:	f023 0703 	bic.w	r7, r3, #3
 8000f0c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f10:	f006 0601 	and.w	r6, r6, #1
 8000f14:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000f18:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f1a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f20:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f26:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f2a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f2e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f32:	d02b      	beq.n	8000f8c <HAL_GPIO_Init+0x154>
 8000f34:	4e18      	ldr	r6, [pc, #96]	; (8000f98 <HAL_GPIO_Init+0x160>)
 8000f36:	42b0      	cmp	r0, r6
 8000f38:	d02a      	beq.n	8000f90 <HAL_GPIO_Init+0x158>
 8000f3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f3e:	42b0      	cmp	r0, r6
 8000f40:	bf14      	ite	ne
 8000f42:	2607      	movne	r6, #7
 8000f44:	2602      	moveq	r6, #2
 8000f46:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f4a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f4e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000f50:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f54:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f58:	bf0c      	ite	eq
 8000f5a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000f5c:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000f5e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000f60:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f62:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f66:	bf0c      	ite	eq
 8000f68:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000f6a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000f6c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000f6e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f70:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f74:	bf0c      	ite	eq
 8000f76:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000f78:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000f7a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000f7c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f80:	bf54      	ite	pl
 8000f82:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000f84:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000f86:	60d6      	str	r6, [r2, #12]
    position++;
 8000f88:	3301      	adds	r3, #1
 8000f8a:	e760      	b.n	8000e4e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	e7da      	b.n	8000f46 <HAL_GPIO_Init+0x10e>
 8000f90:	2601      	movs	r6, #1
 8000f92:	e7d8      	b.n	8000f46 <HAL_GPIO_Init+0x10e>
 8000f94:	40010400 	.word	0x40010400
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	b10a      	cbz	r2, 8000fa6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa2:	6181      	str	r1, [r0, #24]
 8000fa4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa6:	6281      	str	r1, [r0, #40]	; 0x28
 8000fa8:	4770      	bx	lr

08000faa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000faa:	6943      	ldr	r3, [r0, #20]
 8000fac:	4059      	eors	r1, r3
 8000fae:	6141      	str	r1, [r0, #20]
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8000fb4:	4a02      	ldr	r2, [pc, #8]	; (8000fc0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000fb6:	6813      	ldr	r3, [r2, #0]
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4770      	bx	lr
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_PWREx_GetVoltageRange+0xc>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000fc8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fdc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe0:	d11a      	bne.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000fe6:	d013      	beq.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000fea:	4912      	ldr	r1, [pc, #72]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff4:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	fbb2 f1f1 	udiv	r1, r2, r1
 8000ffe:	2232      	movs	r2, #50	; 0x32
 8001000:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001002:	b112      	cbz	r2, 800100a <HAL_PWREx_ControlVoltageScaling+0x36>
 8001004:	6959      	ldr	r1, [r3, #20]
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	d404      	bmi.n	8001014 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	d40d      	bmi.n	800102c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001010:	2000      	movs	r0, #0
 8001012:	4770      	bx	lr
        wait_loop_index--;
 8001014:	3a01      	subs	r2, #1
 8001016:	e7f4      	b.n	8001002 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001018:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	bf1f      	itttt	ne
 800101e:	681a      	ldrne	r2, [r3, #0]
 8001020:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001024:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001028:	601a      	strne	r2, [r3, #0]
 800102a:	e7f1      	b.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
}  
 800102e:	4770      	bx	lr
 8001030:	40007000 	.word	0x40007000
 8001034:	000f4240 	.word	0x000f4240
 8001038:	20000000 	.word	0x20000000

0800103c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800103c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800103e:	4d1e      	ldr	r5, [pc, #120]	; (80010b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001040:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001042:	00da      	lsls	r2, r3, #3
{
 8001044:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001046:	d518      	bpl.n	800107a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001048:	f7ff ffbc 	bl	8000fc4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800104c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001050:	d123      	bne.n	800109a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001052:	2c80      	cmp	r4, #128	; 0x80
 8001054:	d929      	bls.n	80010aa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001056:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001058:	bf8c      	ite	hi
 800105a:	2002      	movhi	r0, #2
 800105c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001060:	6813      	ldr	r3, [r2, #0]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	4303      	orrs	r3, r0
 8001068:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001070:	1a18      	subs	r0, r3, r0
 8001072:	bf18      	it	ne
 8001074:	2001      	movne	r0, #1
 8001076:	b003      	add	sp, #12
 8001078:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	65ab      	str	r3, [r5, #88]	; 0x58
 8001082:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800108c:	f7ff ff9a 	bl	8000fc4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001090:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001096:	65ab      	str	r3, [r5, #88]	; 0x58
 8001098:	e7d8      	b.n	800104c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800109a:	2c80      	cmp	r4, #128	; 0x80
 800109c:	d807      	bhi.n	80010ae <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800109e:	d008      	beq.n	80010b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80010a0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80010a4:	4258      	negs	r0, r3
 80010a6:	4158      	adcs	r0, r3
 80010a8:	e7d9      	b.n	800105e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80010aa:	2000      	movs	r0, #0
 80010ac:	e7d7      	b.n	800105e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80010ae:	2003      	movs	r0, #3
 80010b0:	e7d5      	b.n	800105e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80010b2:	2002      	movs	r0, #2
 80010b4:	e7d3      	b.n	800105e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_RCC_GetSysClockFreq+0xc0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	f012 0f0c 	tst.w	r2, #12
{
 80010c8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010ca:	d009      	beq.n	80010e0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80010d2:	2a0c      	cmp	r2, #12
 80010d4:	d12d      	bne.n	8001132 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	f002 0203 	and.w	r2, r2, #3
 80010dc:	2a01      	cmp	r2, #1
 80010de:	d128      	bne.n	8001132 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80010e0:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80010e2:	4928      	ldr	r1, [pc, #160]	; (8001184 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80010e4:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010e6:	bf55      	itete	pl
 80010e8:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010ec:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010ee:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010f2:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80010f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80010fa:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80010fc:	f011 0f0c 	tst.w	r1, #12
 8001100:	bf0c      	ite	eq
 8001102:	4610      	moveq	r0, r2
 8001104:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001106:	6899      	ldr	r1, [r3, #8]
 8001108:	f001 010c 	and.w	r1, r1, #12
 800110c:	290c      	cmp	r1, #12
 800110e:	d130      	bne.n	8001172 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001110:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001112:	68d8      	ldr	r0, [r3, #12]
 8001114:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001118:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800111a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800111e:	2802      	cmp	r0, #2
 8001120:	d019      	beq.n	8001156 <HAL_RCC_GetSysClockFreq+0x96>
 8001122:	2803      	cmp	r0, #3
 8001124:	d026      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001126:	fbb2 f2f1 	udiv	r2, r2, r1
 800112a:	68d8      	ldr	r0, [r3, #12]
 800112c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001130:	e017      	b.n	8001162 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f002 020c 	and.w	r2, r2, #12
 8001138:	2a04      	cmp	r2, #4
 800113a:	d007      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f002 020c 	and.w	r2, r2, #12
 8001142:	2a08      	cmp	r2, #8
 8001144:	d104      	bne.n	8001150 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001146:	4810      	ldr	r0, [pc, #64]	; (8001188 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001148:	2200      	movs	r2, #0
 800114a:	e7dc      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <HAL_RCC_GetSysClockFreq+0xcc>)
 800114e:	e7fb      	b.n	8001148 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001150:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001152:	4602      	mov	r2, r0
 8001154:	e7d7      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_RCC_GetSysClockFreq+0xcc>)
 800115a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800115e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001168:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800116a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800116c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800116e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001172:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001178:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800117c:	e7ef      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x9e>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	0800336c 	.word	0x0800336c
 8001188:	007a1200 	.word	0x007a1200
 800118c:	00f42400 	.word	0x00f42400

08001190 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001190:	6803      	ldr	r3, [r0, #0]
{
 8001192:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001196:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001198:	06d8      	lsls	r0, r3, #27
 800119a:	d539      	bpl.n	8001210 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800119c:	4cab      	ldr	r4, [pc, #684]	; (800144c <HAL_RCC_OscConfig+0x2bc>)
 800119e:	68a3      	ldr	r3, [r4, #8]
 80011a0:	f013 0f0c 	tst.w	r3, #12
 80011a4:	d162      	bne.n	800126c <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	0799      	lsls	r1, r3, #30
 80011aa:	d503      	bpl.n	80011b4 <HAL_RCC_OscConfig+0x24>
 80011ac:	69ab      	ldr	r3, [r5, #24]
 80011ae:	b90b      	cbnz	r3, 80011b4 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80011b0:	2001      	movs	r0, #1
 80011b2:	e07f      	b.n	80012b4 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	6a28      	ldr	r0, [r5, #32]
 80011b8:	071a      	lsls	r2, r3, #28
 80011ba:	bf56      	itet	pl
 80011bc:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80011c0:	6823      	ldrmi	r3, [r4, #0]
 80011c2:	091b      	lsrpl	r3, r3, #4
 80011c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c8:	4283      	cmp	r3, r0
 80011ca:	d23a      	bcs.n	8001242 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011cc:	f7ff ff36 	bl	800103c <RCC_SetFlashLatencyFromMSIRange>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d1ed      	bne.n	80011b0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6023      	str	r3, [r4, #0]
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	6a2a      	ldr	r2, [r5, #32]
 80011e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011e4:	4313      	orrs	r3, r2
 80011e6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	69ea      	ldr	r2, [r5, #28]
 80011ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011f4:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011f6:	f7ff ff63 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 80011fa:	68a3      	ldr	r3, [r4, #8]
 80011fc:	4a94      	ldr	r2, [pc, #592]	; (8001450 <HAL_RCC_OscConfig+0x2c0>)
 80011fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	40d8      	lsrs	r0, r3
 8001206:	4b93      	ldr	r3, [pc, #588]	; (8001454 <HAL_RCC_OscConfig+0x2c4>)
 8001208:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff f9b8 	bl	8000580 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	07d8      	lsls	r0, r3, #31
 8001214:	d461      	bmi.n	80012da <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	0799      	lsls	r1, r3, #30
 800121a:	f100 80a9 	bmi.w	8001370 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	071a      	lsls	r2, r3, #28
 8001222:	f100 80e7 	bmi.w	80013f4 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	075b      	lsls	r3, r3, #29
 800122a:	f100 8115 	bmi.w	8001458 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	069a      	lsls	r2, r3, #26
 8001232:	f100 817c 	bmi.w	800152e <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001236:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001238:	2a00      	cmp	r2, #0
 800123a:	f040 81a3 	bne.w	8001584 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 800123e:	2000      	movs	r0, #0
 8001240:	e038      	b.n	80012b4 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6023      	str	r3, [r4, #0]
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001250:	4303      	orrs	r3, r0
 8001252:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	69ea      	ldr	r2, [r5, #28]
 8001258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800125c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001260:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	f7ff feeb 	bl	800103c <RCC_SetFlashLatencyFromMSIRange>
 8001266:	2800      	cmp	r0, #0
 8001268:	d0c5      	beq.n	80011f6 <HAL_RCC_OscConfig+0x66>
 800126a:	e7a1      	b.n	80011b0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800126c:	69ab      	ldr	r3, [r5, #24]
 800126e:	b323      	cbz	r3, 80012ba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff f9aa 	bl	80005d0 <HAL_GetTick>
 800127c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	079b      	lsls	r3, r3, #30
 8001282:	d511      	bpl.n	80012a8 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	6a2a      	ldr	r2, [r5, #32]
 8001290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001294:	4313      	orrs	r3, r2
 8001296:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	69ea      	ldr	r2, [r5, #28]
 800129c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012a4:	6063      	str	r3, [r4, #4]
 80012a6:	e7b3      	b.n	8001210 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a8:	f7ff f992 	bl	80005d0 <HAL_GetTick>
 80012ac:	1b80      	subs	r0, r0, r6
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d9e5      	bls.n	800127e <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 80012b2:	2003      	movs	r0, #3
}
 80012b4:	b002      	add	sp, #8
 80012b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012c2:	f7ff f985 	bl	80005d0 <HAL_GetTick>
 80012c6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	079f      	lsls	r7, r3, #30
 80012cc:	d5a0      	bpl.n	8001210 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ce:	f7ff f97f 	bl	80005d0 <HAL_GetTick>
 80012d2:	1b80      	subs	r0, r0, r6
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f7      	bls.n	80012c8 <HAL_RCC_OscConfig+0x138>
 80012d8:	e7eb      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80012da:	4c5c      	ldr	r4, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x2bc>)
 80012dc:	68a3      	ldr	r3, [r4, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e6:	68a3      	ldr	r3, [r4, #8]
 80012e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80012ec:	2b0c      	cmp	r3, #12
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f0:	68e3      	ldr	r3, [r4, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	039a      	lsls	r2, r3, #14
 80012fe:	d58a      	bpl.n	8001216 <HAL_RCC_OscConfig+0x86>
 8001300:	686b      	ldr	r3, [r5, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d187      	bne.n	8001216 <HAL_RCC_OscConfig+0x86>
 8001306:	e753      	b.n	80011b0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	686b      	ldr	r3, [r5, #4]
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130e:	d110      	bne.n	8001332 <HAL_RCC_OscConfig+0x1a2>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001318:	f7ff f95a 	bl	80005d0 <HAL_GetTick>
 800131c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	039b      	lsls	r3, r3, #14
 8001322:	f53f af78 	bmi.w	8001216 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff f953 	bl	80005d0 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	2864      	cmp	r0, #100	; 0x64
 800132e:	d9f6      	bls.n	800131e <HAL_RCC_OscConfig+0x18e>
 8001330:	e7bf      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001336:	d104      	bne.n	8001342 <HAL_RCC_OscConfig+0x1b2>
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133e:	6023      	str	r3, [r4, #0]
 8001340:	e7e6      	b.n	8001310 <HAL_RCC_OscConfig+0x180>
 8001342:	6822      	ldr	r2, [r4, #0]
 8001344:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001348:	6022      	str	r2, [r4, #0]
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001350:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e0      	bne.n	8001318 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8001356:	f7ff f93b 	bl	80005d0 <HAL_GetTick>
 800135a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	039f      	lsls	r7, r3, #14
 8001360:	f57f af59 	bpl.w	8001216 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff f934 	bl	80005d0 <HAL_GetTick>
 8001368:	1b80      	subs	r0, r0, r6
 800136a:	2864      	cmp	r0, #100	; 0x64
 800136c:	d9f6      	bls.n	800135c <HAL_RCC_OscConfig+0x1cc>
 800136e:	e7a0      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001370:	4c36      	ldr	r4, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x2bc>)
 8001372:	68a3      	ldr	r3, [r4, #8]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d009      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800137c:	68a3      	ldr	r3, [r4, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d113      	bne.n	80013ae <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001386:	68e3      	ldr	r3, [r4, #12]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d10e      	bne.n	80013ae <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	055e      	lsls	r6, r3, #21
 8001394:	d503      	bpl.n	800139e <HAL_RCC_OscConfig+0x20e>
 8001396:	68eb      	ldr	r3, [r5, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f43f af09 	beq.w	80011b0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	692a      	ldr	r2, [r5, #16]
 80013a2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80013a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013aa:	6063      	str	r3, [r4, #4]
 80013ac:	e737      	b.n	800121e <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ae:	68eb      	ldr	r3, [r5, #12]
 80013b0:	b17b      	cbz	r3, 80013d2 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ba:	f7ff f909 	bl	80005d0 <HAL_GetTick>
 80013be:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	0558      	lsls	r0, r3, #21
 80013c4:	d4eb      	bmi.n	800139e <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff f903 	bl	80005d0 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9f7      	bls.n	80013c0 <HAL_RCC_OscConfig+0x230>
 80013d0:	e76f      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013da:	f7ff f8f9 	bl	80005d0 <HAL_GetTick>
 80013de:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	0559      	lsls	r1, r3, #21
 80013e4:	f57f af1b 	bpl.w	800121e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff f8f2 	bl	80005d0 <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9f6      	bls.n	80013e0 <HAL_RCC_OscConfig+0x250>
 80013f2:	e75e      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f4:	696b      	ldr	r3, [r5, #20]
 80013f6:	4c15      	ldr	r4, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x2bc>)
 80013f8:	b19b      	cbz	r3, 8001422 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 80013fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001406:	f7ff f8e3 	bl	80005d0 <HAL_GetTick>
 800140a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800140c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001410:	079f      	lsls	r7, r3, #30
 8001412:	f53f af08 	bmi.w	8001226 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff f8db 	bl	80005d0 <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f5      	bls.n	800140c <HAL_RCC_OscConfig+0x27c>
 8001420:	e747      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001422:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800142e:	f7ff f8cf 	bl	80005d0 <HAL_GetTick>
 8001432:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001434:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001438:	0798      	lsls	r0, r3, #30
 800143a:	f57f aef4 	bpl.w	8001226 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff f8c7 	bl	80005d0 <HAL_GetTick>
 8001442:	1b80      	subs	r0, r0, r6
 8001444:	2802      	cmp	r0, #2
 8001446:	d9f5      	bls.n	8001434 <HAL_RCC_OscConfig+0x2a4>
 8001448:	e733      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	08003354 	.word	0x08003354
 8001454:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001458:	4c79      	ldr	r4, [pc, #484]	; (8001640 <HAL_RCC_OscConfig+0x4b0>)
 800145a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800145c:	00d9      	lsls	r1, r3, #3
 800145e:	d427      	bmi.n	80014b0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	65a3      	str	r3, [r4, #88]	; 0x58
 8001468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001472:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	4e73      	ldr	r6, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x4b4>)
 8001476:	6833      	ldr	r3, [r6, #0]
 8001478:	05da      	lsls	r2, r3, #23
 800147a:	d51b      	bpl.n	80014b4 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	68ab      	ldr	r3, [r5, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d129      	bne.n	80014d6 <HAL_RCC_OscConfig+0x346>
 8001482:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800148e:	f7ff f89f 	bl	80005d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001496:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001498:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800149c:	0798      	lsls	r0, r3, #30
 800149e:	d540      	bpl.n	8001522 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80014a0:	2f00      	cmp	r7, #0
 80014a2:	f43f aec4 	beq.w	800122e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80014ae:	e6be      	b.n	800122e <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	2700      	movs	r7, #0
 80014b2:	e7df      	b.n	8001474 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014bc:	f7ff f888 	bl	80005d0 <HAL_GetTick>
 80014c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c2:	6833      	ldr	r3, [r6, #0]
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	d4d9      	bmi.n	800147c <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff f882 	bl	80005d0 <HAL_GetTick>
 80014cc:	eba0 0008 	sub.w	r0, r0, r8
 80014d0:	2802      	cmp	r0, #2
 80014d2:	d9f6      	bls.n	80014c2 <HAL_RCC_OscConfig+0x332>
 80014d4:	e6ed      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x358>
 80014da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80014e6:	e7cc      	b.n	8001482 <HAL_RCC_OscConfig+0x2f2>
 80014e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80014f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80014f8:	f022 0204 	bic.w	r2, r2, #4
 80014fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1c4      	bne.n	800148e <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8001504:	f7ff f864 	bl	80005d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800150c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800150e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001512:	0799      	lsls	r1, r3, #30
 8001514:	d5c4      	bpl.n	80014a0 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff f85b 	bl	80005d0 <HAL_GetTick>
 800151a:	1b80      	subs	r0, r0, r6
 800151c:	4540      	cmp	r0, r8
 800151e:	d9f6      	bls.n	800150e <HAL_RCC_OscConfig+0x37e>
 8001520:	e6c7      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff f855 	bl	80005d0 <HAL_GetTick>
 8001526:	1b80      	subs	r0, r0, r6
 8001528:	4540      	cmp	r0, r8
 800152a:	d9b5      	bls.n	8001498 <HAL_RCC_OscConfig+0x308>
 800152c:	e6c1      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800152e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001530:	4c43      	ldr	r4, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x4b0>)
 8001532:	b19b      	cbz	r3, 800155c <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8001534:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001540:	f7ff f846 	bl	80005d0 <HAL_GetTick>
 8001544:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001546:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800154a:	079b      	lsls	r3, r3, #30
 800154c:	f53f ae73 	bmi.w	8001236 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001550:	f7ff f83e 	bl	80005d0 <HAL_GetTick>
 8001554:	1b80      	subs	r0, r0, r6
 8001556:	2802      	cmp	r0, #2
 8001558:	d9f5      	bls.n	8001546 <HAL_RCC_OscConfig+0x3b6>
 800155a:	e6aa      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800155c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001568:	f7ff f832 	bl	80005d0 <HAL_GetTick>
 800156c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800156e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001572:	079f      	lsls	r7, r3, #30
 8001574:	f57f ae5f 	bpl.w	8001236 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001578:	f7ff f82a 	bl	80005d0 <HAL_GetTick>
 800157c:	1b80      	subs	r0, r0, r6
 800157e:	2802      	cmp	r0, #2
 8001580:	d9f5      	bls.n	800156e <HAL_RCC_OscConfig+0x3de>
 8001582:	e696      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001584:	4c2e      	ldr	r4, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x4b0>)
 8001586:	68a3      	ldr	r3, [r4, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b0c      	cmp	r3, #12
 800158e:	f43f ae0f 	beq.w	80011b0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001592:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001594:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800159a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800159c:	d136      	bne.n	800160c <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 800159e:	f7ff f817 	bl	80005d0 <HAL_GetTick>
 80015a2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	0198      	lsls	r0, r3, #6
 80015a8:	d42a      	bmi.n	8001600 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80015ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015ae:	06db      	lsls	r3, r3, #27
 80015b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80015b6:	4313      	orrs	r3, r2
 80015b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80015ba:	3a01      	subs	r2, #1
 80015bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80015c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80015c2:	0852      	lsrs	r2, r2, #1
 80015c4:	3a01      	subs	r2, #1
 80015c6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80015ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80015cc:	0852      	lsrs	r2, r2, #1
 80015ce:	3a01      	subs	r2, #1
 80015d0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80015d4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015dc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015de:	68e3      	ldr	r3, [r4, #12]
 80015e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80015e6:	f7fe fff3 	bl	80005d0 <HAL_GetTick>
 80015ea:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	0199      	lsls	r1, r3, #6
 80015f0:	f53f ae25 	bmi.w	800123e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe ffec 	bl	80005d0 <HAL_GetTick>
 80015f8:	1b40      	subs	r0, r0, r5
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x45c>
 80015fe:	e658      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7fe ffe6 	bl	80005d0 <HAL_GetTick>
 8001604:	1b80      	subs	r0, r0, r6
 8001606:	2802      	cmp	r0, #2
 8001608:	d9cc      	bls.n	80015a4 <HAL_RCC_OscConfig+0x414>
 800160a:	e652      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001610:	bf5e      	ittt	pl
 8001612:	68e3      	ldrpl	r3, [r4, #12]
 8001614:	f023 0303 	bicpl.w	r3, r3, #3
 8001618:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001626:	f7fe ffd3 	bl	80005d0 <HAL_GetTick>
 800162a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	f57f ae05 	bpl.w	800123e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7fe ffcc 	bl	80005d0 <HAL_GetTick>
 8001638:	1b40      	subs	r0, r0, r5
 800163a:	2802      	cmp	r0, #2
 800163c:	d9f6      	bls.n	800162c <HAL_RCC_OscConfig+0x49c>
 800163e:	e638      	b.n	80012b2 <HAL_RCC_OscConfig+0x122>
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001648:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <HAL_RCC_ClockConfig+0x15c>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	428b      	cmp	r3, r1
{
 8001652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001656:	4605      	mov	r5, r0
 8001658:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800165a:	d32b      	bcc.n	80016b4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	07d9      	lsls	r1, r3, #31
 8001660:	d435      	bmi.n	80016ce <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001662:	6829      	ldr	r1, [r5, #0]
 8001664:	078a      	lsls	r2, r1, #30
 8001666:	f100 8083 	bmi.w	8001770 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800166a:	4a4e      	ldr	r2, [pc, #312]	; (80017a4 <HAL_RCC_ClockConfig+0x15c>)
 800166c:	6813      	ldr	r3, [r2, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	429e      	cmp	r6, r3
 8001674:	f0c0 8084 	bcc.w	8001780 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	f011 0f04 	tst.w	r1, #4
 800167c:	4c4a      	ldr	r4, [pc, #296]	; (80017a8 <HAL_RCC_ClockConfig+0x160>)
 800167e:	f040 808a 	bne.w	8001796 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	070b      	lsls	r3, r1, #28
 8001684:	d506      	bpl.n	8001694 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001686:	68a3      	ldr	r3, [r4, #8]
 8001688:	692a      	ldr	r2, [r5, #16]
 800168a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800168e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001692:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001694:	f7ff fd14 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 8001698:	68a3      	ldr	r3, [r4, #8]
 800169a:	4a44      	ldr	r2, [pc, #272]	; (80017ac <HAL_RCC_ClockConfig+0x164>)
 800169c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	40d8      	lsrs	r0, r3
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <HAL_RCC_ClockConfig+0x168>)
 80016a6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7fe ff69 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 80016ae:	2000      	movs	r0, #0
}
 80016b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f023 0307 	bic.w	r3, r3, #7
 80016ba:	430b      	orrs	r3, r1
 80016bc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	4299      	cmp	r1, r3
 80016c6:	d0c9      	beq.n	800165c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80016c8:	2001      	movs	r0, #1
 80016ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	686a      	ldr	r2, [r5, #4]
 80016d0:	4c35      	ldr	r4, [pc, #212]	; (80017a8 <HAL_RCC_ClockConfig+0x160>)
 80016d2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80016d4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d6:	d11c      	bne.n	8001712 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80016d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80016dc:	d0f4      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016de:	68a3      	ldr	r3, [r4, #8]
 80016e0:	f023 0303 	bic.w	r3, r3, #3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80016e8:	f7fe ff72 	bl	80005d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ec:	686b      	ldr	r3, [r5, #4]
 80016ee:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80016f0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	d118      	bne.n	800172a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f8:	68a3      	ldr	r3, [r4, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d0af      	beq.n	8001662 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7fe ff65 	bl	80005d0 <HAL_GetTick>
 8001706:	1bc0      	subs	r0, r0, r7
 8001708:	4540      	cmp	r0, r8
 800170a:	d9f5      	bls.n	80016f8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 800170c:	2003      	movs	r0, #3
 800170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	2a02      	cmp	r2, #2
 8001714:	d102      	bne.n	800171c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001716:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800171a:	e7df      	b.n	80016dc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800171c:	b912      	cbnz	r2, 8001724 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800171e:	f013 0f02 	tst.w	r3, #2
 8001722:	e7db      	b.n	80016dc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001724:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001728:	e7d8      	b.n	80016dc <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	2b02      	cmp	r3, #2
 800172c:	d10a      	bne.n	8001744 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800172e:	68a3      	ldr	r3, [r4, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d094      	beq.n	8001662 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7fe ff4a 	bl	80005d0 <HAL_GetTick>
 800173c:	1bc0      	subs	r0, r0, r7
 800173e:	4540      	cmp	r0, r8
 8001740:	d9f5      	bls.n	800172e <HAL_RCC_ClockConfig+0xe6>
 8001742:	e7e3      	b.n	800170c <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001744:	b973      	cbnz	r3, 8001764 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001746:	68a3      	ldr	r3, [r4, #8]
 8001748:	f013 0f0c 	tst.w	r3, #12
 800174c:	d089      	beq.n	8001662 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7fe ff3f 	bl	80005d0 <HAL_GetTick>
 8001752:	1bc0      	subs	r0, r0, r7
 8001754:	4540      	cmp	r0, r8
 8001756:	d9f6      	bls.n	8001746 <HAL_RCC_ClockConfig+0xfe>
 8001758:	e7d8      	b.n	800170c <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7fe ff39 	bl	80005d0 <HAL_GetTick>
 800175e:	1bc0      	subs	r0, r0, r7
 8001760:	4540      	cmp	r0, r8
 8001762:	d8d3      	bhi.n	800170c <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001764:	68a3      	ldr	r3, [r4, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d1f5      	bne.n	800175a <HAL_RCC_ClockConfig+0x112>
 800176e:	e778      	b.n	8001662 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_RCC_ClockConfig+0x160>)
 8001772:	68a8      	ldr	r0, [r5, #8]
 8001774:	6893      	ldr	r3, [r2, #8]
 8001776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177a:	4303      	orrs	r3, r0
 800177c:	6093      	str	r3, [r2, #8]
 800177e:	e774      	b.n	800166a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	4333      	orrs	r3, r6
 8001788:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	429e      	cmp	r6, r3
 8001792:	d199      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x80>
 8001794:	e770      	b.n	8001678 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	68ea      	ldr	r2, [r5, #12]
 800179a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800179e:	4313      	orrs	r3, r2
 80017a0:	60a3      	str	r3, [r4, #8]
 80017a2:	e76e      	b.n	8001682 <HAL_RCC_ClockConfig+0x3a>
 80017a4:	40022000 	.word	0x40022000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	08003354 	.word	0x08003354
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetHCLKFreq>:
}
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <HAL_RCC_GetHCLKFreq+0x8>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017ce:	6810      	ldr	r0, [r2, #0]
}
 80017d0:	40d8      	lsrs	r0, r3
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08003364 	.word	0x08003364
 80017dc:	20000000 	.word	0x20000000

080017e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017ee:	6810      	ldr	r0, [r2, #0]
}
 80017f0:	40d8      	lsrs	r0, r3
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08003364 	.word	0x08003364
 80017fc:	20000000 	.word	0x20000000

08001800 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <RCCEx_PLLSAI1_Config+0x114>)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	f012 0f03 	tst.w	r2, #3
{
 800180a:	4605      	mov	r5, r0
 800180c:	460e      	mov	r6, r1
 800180e:	461c      	mov	r4, r3
 8001810:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001812:	d039      	beq.n	8001888 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	4282      	cmp	r2, r0
 800181c:	d14b      	bne.n	80018b6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800181e:	2a00      	cmp	r2, #0
 8001820:	d049      	beq.n	80018b6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001822:	68db      	ldr	r3, [r3, #12]
       ||
 8001824:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001826:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800182a:	3301      	adds	r3, #1
       ||
 800182c:	4293      	cmp	r3, r2
 800182e:	d142      	bne.n	80018b6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001836:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001838:	f7fe feca 	bl	80005d0 <HAL_GetTick>
 800183c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	011a      	lsls	r2, r3, #4
 8001842:	d441      	bmi.n	80018c8 <RCCEx_PLLSAI1_Config+0xc8>
 8001844:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001846:	2e00      	cmp	r6, #0
 8001848:	d045      	beq.n	80018d6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800184a:	2e01      	cmp	r6, #1
 800184c:	d14f      	bne.n	80018ee <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800184e:	6922      	ldr	r2, [r4, #16]
 8001850:	6928      	ldr	r0, [r5, #16]
 8001852:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001856:	0840      	lsrs	r0, r0, #1
 8001858:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800185c:	3801      	subs	r0, #1
 800185e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001862:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001866:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800186e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7fe feae 	bl	80005d0 <HAL_GetTick>
 8001874:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	d545      	bpl.n	8001908 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800187c:	6923      	ldr	r3, [r4, #16]
 800187e:	69aa      	ldr	r2, [r5, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	6123      	str	r3, [r4, #16]
 8001884:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001888:	2802      	cmp	r0, #2
 800188a:	d010      	beq.n	80018ae <RCCEx_PLLSAI1_Config+0xae>
 800188c:	2803      	cmp	r0, #3
 800188e:	d014      	beq.n	80018ba <RCCEx_PLLSAI1_Config+0xba>
 8001890:	2801      	cmp	r0, #1
 8001892:	d110      	bne.n	80018b6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	079f      	lsls	r7, r3, #30
 8001898:	d5f5      	bpl.n	8001886 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800189a:	68e3      	ldr	r3, [r4, #12]
 800189c:	686a      	ldr	r2, [r5, #4]
 800189e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80018a2:	3a01      	subs	r2, #1
 80018a4:	4318      	orrs	r0, r3
 80018a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80018aa:	60e0      	str	r0, [r4, #12]
 80018ac:	e7c0      	b.n	8001830 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80018b4:	d1f1      	bne.n	800189a <RCCEx_PLLSAI1_Config+0x9a>
 80018b6:	2001      	movs	r0, #1
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	0391      	lsls	r1, r2, #14
 80018be:	d4ec      	bmi.n	800189a <RCCEx_PLLSAI1_Config+0x9a>
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80018c6:	e7f5      	b.n	80018b4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018c8:	f7fe fe82 	bl	80005d0 <HAL_GetTick>
 80018cc:	1bc0      	subs	r0, r0, r7
 80018ce:	2802      	cmp	r0, #2
 80018d0:	d9b5      	bls.n	800183e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
 80018d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018d6:	6922      	ldr	r2, [r4, #16]
 80018d8:	68e9      	ldr	r1, [r5, #12]
 80018da:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80018de:	06c9      	lsls	r1, r1, #27
 80018e0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80018e4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80018e8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018ea:	6123      	str	r3, [r4, #16]
 80018ec:	e7bc      	b.n	8001868 <RCCEx_PLLSAI1_Config+0x68>
 80018ee:	6923      	ldr	r3, [r4, #16]
 80018f0:	6968      	ldr	r0, [r5, #20]
 80018f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80018f6:	0840      	lsrs	r0, r0, #1
 80018f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80018fc:	3801      	subs	r0, #1
 80018fe:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001902:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001906:	e7f0      	b.n	80018ea <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001908:	f7fe fe62 	bl	80005d0 <HAL_GetTick>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	2802      	cmp	r0, #2
 8001910:	d9b1      	bls.n	8001876 <RCCEx_PLLSAI1_Config+0x76>
 8001912:	e7de      	b.n	80018d2 <RCCEx_PLLSAI1_Config+0xd2>
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800191c:	6805      	ldr	r5, [r0, #0]
 800191e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001922:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001924:	d00e      	beq.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001926:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001928:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800192c:	d05b      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800192e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001932:	d05d      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001934:	2900      	cmp	r1, #0
 8001936:	d166      	bne.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001938:	3004      	adds	r0, #4
 800193a:	f7ff ff61 	bl	8001800 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800193e:	4605      	mov	r5, r0
 8001940:	2800      	cmp	r0, #0
 8001942:	d055      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	039e      	lsls	r6, r3, #14
 8001948:	d56d      	bpl.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4e92      	ldr	r6, [pc, #584]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800194c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800194e:	00d8      	lsls	r0, r3, #3
 8001950:	d45b      	bmi.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	65b3      	str	r3, [r6, #88]	; 0x58
 800195a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001964:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001966:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001b98 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800196a:	f8d8 3000 	ldr.w	r3, [r8]
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001976:	f7fe fe2b 	bl	80005d0 <HAL_GetTick>
 800197a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800197c:	f8d8 3000 	ldr.w	r3, [r8]
 8001980:	05d9      	lsls	r1, r3, #23
 8001982:	d544      	bpl.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001984:	2d00      	cmp	r5, #0
 8001986:	d149      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001988:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800198c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001990:	d014      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001992:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001994:	4293      	cmp	r3, r2
 8001996:	d011      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001998:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800199c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80019a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019a4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019a8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019b4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80019b8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019bc:	07da      	lsls	r2, r3, #31
 80019be:	d509      	bpl.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80019c0:	f7fe fe06 	bl	80005d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80019ca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	f140 80c2 	bpl.w	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019d4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80019d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019de:	4313      	orrs	r3, r2
 80019e0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80019e4:	e01a      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80019e6:	4a6b      	ldr	r2, [pc, #428]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019e8:	68d3      	ldr	r3, [r2, #12]
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019f0:	4a68      	ldr	r2, [pc, #416]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019f2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80019f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019fc:	430b      	orrs	r3, r1
 80019fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a02:	2500      	movs	r5, #0
 8001a04:	e79e      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001a06:	2501      	movs	r5, #1
 8001a08:	e79c      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2700      	movs	r7, #0
 8001a0c:	e7ab      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7fe fddf 	bl	80005d0 <HAL_GetTick>
 8001a12:	eba0 0009 	sub.w	r0, r0, r9
 8001a16:	2802      	cmp	r0, #2
 8001a18:	d9b0      	bls.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001a1a:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001a1c:	b11f      	cbz	r7, 8001a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	07df      	lsls	r7, r3, #31
 8001a2a:	d508      	bpl.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a2c:	4959      	ldr	r1, [pc, #356]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a2e:	6a20      	ldr	r0, [r4, #32]
 8001a30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a34:	f022 0203 	bic.w	r2, r2, #3
 8001a38:	4302      	orrs	r2, r0
 8001a3a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a3e:	079e      	lsls	r6, r3, #30
 8001a40:	d508      	bpl.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a42:	4954      	ldr	r1, [pc, #336]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a4a:	f022 020c 	bic.w	r2, r2, #12
 8001a4e:	4302      	orrs	r2, r0
 8001a50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a54:	0698      	lsls	r0, r3, #26
 8001a56:	d508      	bpl.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a58:	494e      	ldr	r1, [pc, #312]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a64:	4302      	orrs	r2, r0
 8001a66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a6a:	0599      	lsls	r1, r3, #22
 8001a6c:	d508      	bpl.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a6e:	4949      	ldr	r1, [pc, #292]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a70:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001a72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a76:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001a7a:	4302      	orrs	r2, r0
 8001a7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a80:	055a      	lsls	r2, r3, #21
 8001a82:	d508      	bpl.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a84:	4943      	ldr	r1, [pc, #268]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a8c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001a90:	4302      	orrs	r2, r0
 8001a92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a96:	065f      	lsls	r7, r3, #25
 8001a98:	d508      	bpl.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a9a:	493e      	ldr	r1, [pc, #248]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001a9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001a9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001aa2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001aa6:	4302      	orrs	r2, r0
 8001aa8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001aac:	05de      	lsls	r6, r3, #23
 8001aae:	d508      	bpl.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ab0:	4938      	ldr	r1, [pc, #224]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ab2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ab4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ab8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001abc:	4302      	orrs	r2, r0
 8001abe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ac2:	0498      	lsls	r0, r3, #18
 8001ac4:	d50f      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ac6:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ac8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ace:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ad2:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ad4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001adc:	d144      	bne.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ade:	68d3      	ldr	r3, [r2, #12]
 8001ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ae4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	0359      	lsls	r1, r3, #13
 8001aea:	d50f      	bpl.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001aee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001af0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001af4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001af8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001afa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001afe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b02:	d13c      	bne.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b04:	68d3      	ldr	r3, [r2, #12]
 8001b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b0a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	045a      	lsls	r2, r3, #17
 8001b10:	d512      	bpl.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b12:	4920      	ldr	r1, [pc, #128]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b1a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b1e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b20:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b28:	d106      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	1d20      	adds	r0, r4, #4
 8001b2e:	f7ff fe67 	bl	8001800 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001b32:	2800      	cmp	r0, #0
 8001b34:	bf18      	it	ne
 8001b36:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	d508      	bpl.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001b50:	4628      	mov	r0, r5
 8001b52:	b003      	add	sp, #12
 8001b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7fe fd3a 	bl	80005d0 <HAL_GetTick>
 8001b5c:	eba0 0008 	sub.w	r0, r0, r8
 8001b60:	4548      	cmp	r0, r9
 8001b62:	f67f af32 	bls.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001b66:	e758      	b.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b68:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001b6c:	d1bb      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	1d20      	adds	r0, r4, #4
 8001b72:	f7ff fe45 	bl	8001800 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001b76:	2800      	cmp	r0, #0
 8001b78:	bf18      	it	ne
 8001b7a:	4605      	movne	r5, r0
 8001b7c:	e7b3      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001b7e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001b82:	d1c3      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b84:	2101      	movs	r1, #1
 8001b86:	1d20      	adds	r0, r4, #4
 8001b88:	f7ff fe3a 	bl	8001800 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	bf18      	it	ne
 8001b90:	4605      	movne	r5, r0
 8001b92:	e7bb      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b9c:	4a02      	ldr	r2, [pc, #8]	; (8001ba8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001bac:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bae:	69c1      	ldr	r1, [r0, #28]
{
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bb4:	6883      	ldr	r3, [r0, #8]
 8001bb6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bb8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6960      	ldr	r0, [r4, #20]
 8001bbe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bc0:	4882      	ldr	r0, [pc, #520]	; (8001dcc <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bc2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bc4:	4028      	ands	r0, r5
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bca:	6853      	ldr	r3, [r2, #4]
 8001bcc:	68e0      	ldr	r0, [r4, #12]
 8001bce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bd2:	4303      	orrs	r3, r0
 8001bd4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001bd6:	4b7e      	ldr	r3, [pc, #504]	; (8001dd0 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001bd8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001bda:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001bdc:	bf1c      	itt	ne
 8001bde:	6a23      	ldrne	r3, [r4, #32]
 8001be0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001be2:	6893      	ldr	r3, [r2, #8]
 8001be4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001be8:	4303      	orrs	r3, r0
 8001bea:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <UART_SetConfig+0x228>)
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d114      	bne.n	8001c1c <UART_SetConfig+0x70>
 8001bf2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001bf6:	4a78      	ldr	r2, [pc, #480]	; (8001dd8 <UART_SetConfig+0x22c>)
 8001bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfc:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	f040 80aa 	bne.w	8001d5e <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d820      	bhi.n	8001c50 <UART_SetConfig+0xa4>
 8001c0e:	e8df f003 	tbb	[pc, r3]
 8001c12:	8f77      	.short	0x8f77
 8001c14:	1f9b1f92 	.word	0x1f9b1f92
 8001c18:	1f1f      	.short	0x1f1f
 8001c1a:	9e          	.byte	0x9e
 8001c1b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <UART_SetConfig+0x230>)
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d107      	bne.n	8001c32 <UART_SetConfig+0x86>
 8001c22:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <UART_SetConfig+0x234>)
 8001c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	e7e6      	b.n	8001c00 <UART_SetConfig+0x54>
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <UART_SetConfig+0x224>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 80c2 	bne.w	8001dbe <UART_SetConfig+0x212>
 8001c3a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001c3e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c42:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001c46:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001c4a:	d02a      	beq.n	8001ca2 <UART_SetConfig+0xf6>
 8001c4c:	d806      	bhi.n	8001c5c <UART_SetConfig+0xb0>
 8001c4e:	b315      	cbz	r5, 8001c96 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001c50:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c56:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8001c58:	4610      	mov	r0, r2
 8001c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c5c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001c60:	d006      	beq.n	8001c70 <UART_SetConfig+0xc4>
 8001c62:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001c66:	d1f3      	bne.n	8001c50 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001c68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c6c:	2508      	movs	r5, #8
 8001c6e:	e001      	b.n	8001c74 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001c70:	485c      	ldr	r0, [pc, #368]	; (8001de4 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c72:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c7a:	4283      	cmp	r3, r0
 8001c7c:	d8e8      	bhi.n	8001c50 <UART_SetConfig+0xa4>
 8001c7e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c82:	d8e5      	bhi.n	8001c50 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001c84:	2d08      	cmp	r5, #8
 8001c86:	d838      	bhi.n	8001cfa <UART_SetConfig+0x14e>
 8001c88:	e8df f005 	tbb	[pc, r5]
 8001c8c:	3726370f 	.word	0x3726370f
 8001c90:	3737372e 	.word	0x3737372e
 8001c94:	31          	.byte	0x31
 8001c95:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001c96:	f7ff fd93 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d1ea      	bne.n	8001c74 <UART_SetConfig+0xc8>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	e7d7      	b.n	8001c52 <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001ca2:	f7ff fa0d 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
      break;
 8001ca6:	2504      	movs	r5, #4
 8001ca8:	e7f7      	b.n	8001c9a <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001caa:	f7ff fd89 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cae:	6862      	ldr	r2, [r4, #4]
 8001cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb4:	0856      	lsrs	r6, r2, #1
 8001cb6:	2700      	movs	r7, #0
 8001cb8:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cc2:	f7fe fad5 	bl	8000270 <__aeabi_uldivmod>
          break;
 8001cc6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <UART_SetConfig+0x23c>)
 8001cca:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d8be      	bhi.n	8001c50 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	60d8      	str	r0, [r3, #12]
 8001cd6:	e7bc      	b.n	8001c52 <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001cd8:	4844      	ldr	r0, [pc, #272]	; (8001dec <UART_SetConfig+0x240>)
 8001cda:	0855      	lsrs	r5, r2, #1
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ce2:	f141 0100 	adc.w	r1, r1, #0
 8001ce6:	e7ec      	b.n	8001cc2 <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ce8:	f7ff f9ea 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 8001cec:	e7df      	b.n	8001cae <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cee:	0850      	lsrs	r0, r2, #1
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001cf8:	e7f3      	b.n	8001ce2 <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 8001cfa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e7e3      	b.n	8001cc8 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d00:	f7ff fd5e 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d04:	6861      	ldr	r1, [r4, #4]
 8001d06:	084a      	lsrs	r2, r1, #1
 8001d08:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001d0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d10:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d12:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d14:	f1a3 0010 	sub.w	r0, r3, #16
 8001d18:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d1c:	4288      	cmp	r0, r1
 8001d1e:	d897      	bhi.n	8001c50 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001d20:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001d24:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d26:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	60c3      	str	r3, [r0, #12]
 8001d2e:	e790      	b.n	8001c52 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d30:	f7ff fd56 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001d34:	e7e6      	b.n	8001d04 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d36:	6860      	ldr	r0, [r4, #4]
 8001d38:	0843      	lsrs	r3, r0, #1
 8001d3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001d3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d42:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d46:	e7e3      	b.n	8001d10 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d48:	f7ff f9ba 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 8001d4c:	e7da      	b.n	8001d04 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d4e:	6860      	ldr	r0, [r4, #4]
 8001d50:	0843      	lsrs	r3, r0, #1
 8001d52:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d56:	e7f4      	b.n	8001d42 <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8001d58:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e7da      	b.n	8001d14 <UART_SetConfig+0x168>
    switch (clocksource)
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d830      	bhi.n	8001dc4 <UART_SetConfig+0x218>
 8001d62:	e8df f003 	tbb	[pc, r3]
 8001d66:	1805      	.short	0x1805
 8001d68:	2f242f1b 	.word	0x2f242f1b
 8001d6c:	2f2f      	.short	0x2f2f
 8001d6e:	27          	.byte	0x27
 8001d6f:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d70:	f7ff fd26 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d74:	6862      	ldr	r2, [r4, #4]
 8001d76:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d7e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d80:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d82:	f1a3 0010 	sub.w	r0, r3, #16
 8001d86:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001d8a:	4288      	cmp	r0, r1
 8001d8c:	f63f af60 	bhi.w	8001c50 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e75d      	b.n	8001c52 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d96:	f7ff fd23 	bl	80017e0 <HAL_RCC_GetPCLK2Freq>
 8001d9a:	e7eb      	b.n	8001d74 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d9c:	6860      	ldr	r0, [r4, #4]
 8001d9e:	0843      	lsrs	r3, r0, #1
 8001da0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001da4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001da8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dac:	e7e7      	b.n	8001d7e <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dae:	f7ff f987 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 8001db2:	e7df      	b.n	8001d74 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001db4:	6860      	ldr	r0, [r4, #4]
 8001db6:	0843      	lsrs	r3, r0, #1
 8001db8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dbc:	e7f4      	b.n	8001da8 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dbe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001dc2:	d0c9      	beq.n	8001d58 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 8001dc4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e7db      	b.n	8001d82 <UART_SetConfig+0x1d6>
 8001dca:	bf00      	nop
 8001dcc:	efff69f3 	.word	0xefff69f3
 8001dd0:	40008000 	.word	0x40008000
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	0800331c 	.word	0x0800331c
 8001ddc:	40004400 	.word	0x40004400
 8001de0:	08003320 	.word	0x08003320
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	000ffcff 	.word	0x000ffcff
 8001dec:	f4240000 	.word	0xf4240000

08001df0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001df0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df2:	07da      	lsls	r2, r3, #31
{
 8001df4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001df6:	d506      	bpl.n	8001e06 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001df8:	6801      	ldr	r1, [r0, #0]
 8001dfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001dfc:	684a      	ldr	r2, [r1, #4]
 8001dfe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e02:	4322      	orrs	r2, r4
 8001e04:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e06:	079c      	lsls	r4, r3, #30
 8001e08:	d506      	bpl.n	8001e18 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e0a:	6801      	ldr	r1, [r0, #0]
 8001e0c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e0e:	684a      	ldr	r2, [r1, #4]
 8001e10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e14:	4322      	orrs	r2, r4
 8001e16:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e18:	0759      	lsls	r1, r3, #29
 8001e1a:	d506      	bpl.n	8001e2a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e1c:	6801      	ldr	r1, [r0, #0]
 8001e1e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e20:	684a      	ldr	r2, [r1, #4]
 8001e22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e26:	4322      	orrs	r2, r4
 8001e28:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e2a:	071a      	lsls	r2, r3, #28
 8001e2c:	d506      	bpl.n	8001e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e2e:	6801      	ldr	r1, [r0, #0]
 8001e30:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e38:	4322      	orrs	r2, r4
 8001e3a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e3c:	06dc      	lsls	r4, r3, #27
 8001e3e:	d506      	bpl.n	8001e4e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e40:	6801      	ldr	r1, [r0, #0]
 8001e42:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e44:	688a      	ldr	r2, [r1, #8]
 8001e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e4a:	4322      	orrs	r2, r4
 8001e4c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e4e:	0699      	lsls	r1, r3, #26
 8001e50:	d506      	bpl.n	8001e60 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e52:	6801      	ldr	r1, [r0, #0]
 8001e54:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e56:	688a      	ldr	r2, [r1, #8]
 8001e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e60:	065a      	lsls	r2, r3, #25
 8001e62:	d50f      	bpl.n	8001e84 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e68:	684a      	ldr	r2, [r1, #4]
 8001e6a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e6e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e70:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e74:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e76:	d105      	bne.n	8001e84 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e78:	684a      	ldr	r2, [r1, #4]
 8001e7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e7c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001e80:	4322      	orrs	r2, r4
 8001e82:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	d506      	bpl.n	8001e96 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e88:	6802      	ldr	r2, [r0, #0]
 8001e8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e8c:	6853      	ldr	r3, [r2, #4]
 8001e8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6053      	str	r3, [r2, #4]
 8001e96:	bd10      	pop	{r4, pc}

08001e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9c:	9d06      	ldr	r5, [sp, #24]
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	460f      	mov	r7, r1
 8001ea2:	4616      	mov	r6, r2
 8001ea4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea6:	6821      	ldr	r1, [r4, #0]
 8001ea8:	69ca      	ldr	r2, [r1, #28]
 8001eaa:	ea37 0302 	bics.w	r3, r7, r2
 8001eae:	bf0c      	ite	eq
 8001eb0:	2201      	moveq	r2, #1
 8001eb2:	2200      	movne	r2, #0
 8001eb4:	42b2      	cmp	r2, r6
 8001eb6:	d002      	beq.n	8001ebe <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
}
 8001eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ebe:	1c6b      	adds	r3, r5, #1
 8001ec0:	d0f2      	beq.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ec2:	b99d      	cbnz	r5, 8001eec <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ecc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001edc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001eec:	f7fe fb70 	bl	80005d0 <HAL_GetTick>
 8001ef0:	eba0 0008 	sub.w	r0, r0, r8
 8001ef4:	4285      	cmp	r5, r0
 8001ef6:	d2d6      	bcs.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001ef8:	e7e4      	b.n	8001ec4 <UART_WaitOnFlagUntilTimeout+0x2c>

08001efa <UART_CheckIdleState>:
{
 8001efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001efc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	2600      	movs	r6, #0
 8001f00:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001f02:	f7fe fb65 	bl	80005d0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001f0c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f0e:	d417      	bmi.n	8001f40 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	075b      	lsls	r3, r3, #29
 8001f16:	d50a      	bpl.n	8001f2e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	462b      	mov	r3, r5
 8001f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ffb6 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001f2c:	b9a0      	cbnz	r0, 8001f58 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8001f2e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001f30:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001f32:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001f36:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8001f3a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001f3e:	e00c      	b.n	8001f5a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4632      	mov	r2, r6
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ffa2 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d0db      	beq.n	8001f10 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f58:	2003      	movs	r0, #3
}
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}

08001f5e <HAL_UART_Init>:
{
 8001f5e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f60:	4604      	mov	r4, r0
 8001f62:	b360      	cbz	r0, 8001fbe <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f64:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001f68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f6c:	b91b      	cbnz	r3, 8001f76 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001f72:	f000 f9d9 	bl	8002328 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f76:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f78:	2324      	movs	r3, #36	; 0x24
 8001f7a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff fe10 	bl	8001bac <UART_SetConfig>
 8001f8c:	2801      	cmp	r0, #1
 8001f8e:	d016      	beq.n	8001fbe <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f92:	b113      	cbz	r3, 8001f9a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff2b 	bl	8001df0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001faa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001fb2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001fba:	f7ff bf9e 	b.w	8001efa <UART_CheckIdleState>
}
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	bd10      	pop	{r4, pc}
	...

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8001fc8:	f7fe fff4 	bl	8000fb4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <SystemClock_Config+0xc8>)
 8001fce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001fd2:	f023 0318 	bic.w	r3, r3, #24
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fda:	2314      	movs	r3, #20
 8001fdc:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fe2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fe4:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fe8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fea:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001fec:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fee:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ff0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ff2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff4:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ff6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ff8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ffa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ffc:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ffe:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002000:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f7ff f8c5 	bl	8001190 <HAL_RCC_OscConfig>
 8002006:	b100      	cbz	r0, 800200a <SystemClock_Config+0x46>
 8002008:	e7fe      	b.n	8002008 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800200c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002010:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002012:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002014:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002016:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002018:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201c:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800201e:	f7ff fb13 	bl	8001648 <HAL_RCC_ClockConfig>
 8002022:	b100      	cbz	r0, 8002026 <SystemClock_Config+0x62>
 8002024:	e7fe      	b.n	8002024 <SystemClock_Config+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8002026:	f244 0302 	movw	r3, #16386	; 0x4002
 800202a:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800202c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002030:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002032:	2310      	movs	r3, #16
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002034:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002036:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002038:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800203a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800203e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002040:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002042:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002044:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002046:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002048:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	f7ff fc65 	bl	8001918 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	b100      	cbz	r0, 8002052 <SystemClock_Config+0x8e>
 8002050:	e7fe      	b.n	8002050 <SystemClock_Config+0x8c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002052:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002056:	f7fe ffbd 	bl	8000fd4 <HAL_PWREx_ControlVoltageScaling>
 800205a:	4604      	mov	r4, r0
 800205c:	b100      	cbz	r0, 8002060 <SystemClock_Config+0x9c>
 800205e:	e7fe      	b.n	800205e <SystemClock_Config+0x9a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002060:	f7ff fba8 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	fbb0 f0f3 	udiv	r0, r0, r3
 800206c:	f7fe fe04 	bl	8000c78 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002070:	2004      	movs	r0, #4
 8002072:	f7fe fe17 	bl	8000ca4 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8002076:	f7ff fd91 	bl	8001b9c <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800207a:	4622      	mov	r2, r4
 800207c:	4621      	mov	r1, r4
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	f7fe fdb9 	bl	8000bf8 <HAL_NVIC_SetPriority>
}
 8002086:	b02c      	add	sp, #176	; 0xb0
 8002088:	bd70      	pop	{r4, r5, r6, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <main>:
{
 8002090:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4c53      	ldr	r4, [pc, #332]	; (80021e0 <main+0x150>)
{
 8002094:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8002096:	f7fe fa87 	bl	80005a8 <HAL_Init>
  SystemClock_Config();
 800209a:	f7ff ff93 	bl	8001fc4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020a0:	4850      	ldr	r0, [pc, #320]	; (80021e4 <main+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80020a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80020ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80020cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020ce:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020d6:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020de:	f7fe ff5f 	bl	8000fa0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 80020e2:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80020e4:	a904      	add	r1, sp, #16
 80020e6:	483f      	ldr	r0, [pc, #252]	; (80021e4 <main+0x154>)
  GPIO_InitStruct.Pin = LD3_Pin;
 80020e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f7fe fea2 	bl	8000e38 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020f6:	4333      	orrs	r3, r6
 80020f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80020fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020fc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020fe:	462a      	mov	r2, r5
 8002100:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002102:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002104:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002106:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002108:	f7fe fd76 	bl	8000bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800210c:	200b      	movs	r0, #11
 800210e:	f7fe fda7 	bl	8000c60 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002112:	4835      	ldr	r0, [pc, #212]	; (80021e8 <main+0x158>)
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8002114:	4935      	ldr	r1, [pc, #212]	; (80021ec <main+0x15c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002116:	60c5      	str	r5, [r0, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002120:	270c      	movs	r7, #12
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8002122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart2.Init.Parity = UART_PARITY_NONE;
 8002126:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002128:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800212e:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002130:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002132:	f7ff ff14 	bl	8001f5e <HAL_UART_Init>
 8002136:	b100      	cbz	r0, 800213a <main+0xaa>
 8002138:	e7fe      	b.n	8002138 <main+0xa8>
  hadc1.Instance = ADC1;
 800213a:	4c2d      	ldr	r4, [pc, #180]	; (80021f0 <main+0x160>)
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <main+0x164>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800213e:	6060      	str	r0, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002140:	2504      	movs	r5, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002142:	60a0      	str	r0, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002144:	60e0      	str	r0, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002146:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002148:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214c:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800214e:	63a0      	str	r0, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002150:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002152:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8002154:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002156:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002158:	6165      	str	r5, [r4, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800215a:	61e6      	str	r6, [r4, #28]
  hadc1.Init.NbrOfConversion = 4;
 800215c:	6225      	str	r5, [r4, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800215e:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002160:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002162:	f7fe fa71 	bl	8000648 <HAL_ADC_Init>
 8002166:	b100      	cbz	r0, 800216a <main+0xda>
 8002168:	e7fe      	b.n	8002168 <main+0xd8>
  sConfig.Channel = ADC_CHANNEL_8;
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <main+0x168>)
 800216c:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800216e:	2306      	movs	r3, #6
 8002170:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002172:	2307      	movs	r3, #7
 8002174:	9306      	str	r3, [sp, #24]
  sConfig.Offset = 0;
 8002176:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002178:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217a:	a904      	add	r1, sp, #16
 800217c:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800217e:	9307      	str	r3, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002180:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002182:	f7fe fb2d 	bl	80007e0 <HAL_ADC_ConfigChannel>
 8002186:	b100      	cbz	r0, 800218a <main+0xfa>
 8002188:	e7fe      	b.n	8002188 <main+0xf8>
  sConfig.Channel = ADC_CHANNEL_9;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <main+0x16c>)
 800218c:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218e:	a904      	add	r1, sp, #16
 8002190:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002192:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002194:	f7fe fb24 	bl	80007e0 <HAL_ADC_ConfigChannel>
 8002198:	b100      	cbz	r0, 800219c <main+0x10c>
 800219a:	e7fe      	b.n	800219a <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_10;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <main+0x170>)
 800219e:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a0:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021a2:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a4:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021a6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a8:	f7fe fb1a 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80021ac:	b100      	cbz	r0, 80021b0 <main+0x120>
 80021ae:	e7fe      	b.n	80021ae <main+0x11e>
  sConfig.Channel = ADC_CHANNEL_11;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <main+0x174>)
 80021b2:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b4:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80021b6:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b8:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80021ba:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021bc:	f7fe fb10 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80021c0:	b100      	cbz	r0, 80021c4 <main+0x134>
 80021c2:	e7fe      	b.n	80021c2 <main+0x132>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80021c4:	4d07      	ldr	r5, [pc, #28]	; (80021e4 <main+0x154>)
	  printf("Test is %d\n",1);
 80021c6:	4c10      	ldr	r4, [pc, #64]	; (8002208 <main+0x178>)
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80021c8:	2108      	movs	r1, #8
 80021ca:	4628      	mov	r0, r5
 80021cc:	f7fe feed 	bl	8000faa <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80021d0:	2032      	movs	r0, #50	; 0x32
 80021d2:	f7fe fa03 	bl	80005dc <HAL_Delay>
	  printf("Test is %d\n",1);
 80021d6:	2101      	movs	r1, #1
 80021d8:	4620      	mov	r0, r4
 80021da:	f000 f955 	bl	8002488 <iprintf>
 80021de:	e7f3      	b.n	80021c8 <main+0x138>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	20000144 	.word	0x20000144
 80021ec:	40004400 	.word	0x40004400
 80021f0:	20000094 	.word	0x20000094
 80021f4:	50040000 	.word	0x50040000
 80021f8:	21800100 	.word	0x21800100
 80021fc:	25b00200 	.word	0x25b00200
 8002200:	2a000400 	.word	0x2a000400
 8002204:	2e300800 	.word	0x2e300800
 8002208:	0800332d 	.word	0x0800332d

0800220c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800220c:	e7fe      	b.n	800220c <_Error_Handler>
	...

08002210 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_MspInit+0x88>)
{
 8002212:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	661a      	str	r2, [r3, #96]	; 0x60
 800221c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800221e:	f002 0201 	and.w	r2, r2, #1
 8002222:	9200      	str	r2, [sp, #0]
 8002224:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800222c:	659a      	str	r2, [r3, #88]	; 0x58
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002236:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223a:	f7fe fccb 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	4611      	mov	r1, r2
 8002242:	f06f 000b 	mvn.w	r0, #11
 8002246:	f7fe fcd7 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	4611      	mov	r1, r2
 800224e:	f06f 000a 	mvn.w	r0, #10
 8002252:	f7fe fcd1 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	4611      	mov	r1, r2
 800225a:	f06f 0009 	mvn.w	r0, #9
 800225e:	f7fe fccb 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	4611      	mov	r1, r2
 8002266:	f06f 0004 	mvn.w	r0, #4
 800226a:	f7fe fcc5 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	4611      	mov	r1, r2
 8002272:	f06f 0003 	mvn.w	r0, #3
 8002276:	f7fe fcbf 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	4611      	mov	r1, r2
 800227e:	f06f 0001 	mvn.w	r0, #1
 8002282:	f7fe fcb9 	bl	8000bf8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	4611      	mov	r1, r2
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	f7fe fcb3 	bl	8000bf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	b003      	add	sp, #12
 8002294:	f85d fb04 	ldr.w	pc, [sp], #4
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800229c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800229e:	6802      	ldr	r2, [r0, #0]
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_ADC_MspInit+0x7c>)
 80022a2:	429a      	cmp	r2, r3
{
 80022a4:	b086      	sub	sp, #24
 80022a6:	4606      	mov	r6, r0
  if(hadc->Instance==ADC1)
 80022a8:	d134      	bne.n	8002314 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022aa:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80022ae:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2500      	movs	r5, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 80022b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022b6:	4c19      	ldr	r4, [pc, #100]	; (800231c <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC_CLK_ENABLE();
 80022c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80022ca:	2378      	movs	r3, #120	; 0x78
 80022cc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022d2:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022d6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f7fe fdae 	bl	8000e38 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_ADC_MspInit+0x84>)
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022de:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022e0:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ec:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f2:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022f4:	2320      	movs	r3, #32
 80022f6:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022f8:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80022fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fe:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002300:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002302:	f7fe fce1 	bl	8000cc8 <HAL_DMA_Init>
 8002306:	b118      	cbz	r0, 8002310 <HAL_ADC_MspInit+0x74>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002308:	2177      	movs	r1, #119	; 0x77
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_ADC_MspInit+0x88>)
 800230c:	f7ff ff7e 	bl	800220c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002310:	6534      	str	r4, [r6, #80]	; 0x50
 8002312:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002314:	b006      	add	sp, #24
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	50040000 	.word	0x50040000
 800231c:	200000fc 	.word	0x200000fc
 8002320:	40020008 	.word	0x40020008
 8002324:	08003339 	.word	0x08003339

08002328 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800232a:	6802      	ldr	r2, [r0, #0]
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_UART_MspInit+0x5c>)
 800232e:	429a      	cmp	r2, r3
{
 8002330:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8002332:	d125      	bne.n	8002380 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002334:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800233a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800233c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002340:	659a      	str	r2, [r3, #88]	; 0x58
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800234e:	2304      	movs	r3, #4
 8002350:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002358:	a901      	add	r1, sp, #4
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800235e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002364:	f7fe fd68 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800236c:	a901      	add	r1, sp, #4
 800236e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002372:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800237a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800237c:	f7fe fd5c 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002380:	b006      	add	sp, #24
 8002382:	bd70      	pop	{r4, r5, r6, pc}
 8002384:	40004400 	.word	0x40004400

08002388 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002388:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f7fe f919 	bl	80005c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002392:	f7fe bc94 	b.w	8000cbe <HAL_SYSTICK_IRQHandler>
	...

08002398 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <DMA1_Channel1_IRQHandler+0x8>)
 800239a:	f7fe bd05 	b.w	8000da8 <HAL_DMA_IRQHandler>
 800239e:	bf00      	nop
 80023a0:	200000fc 	.word	0x200000fc

080023a4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	490f      	ldr	r1, [pc, #60]	; (80023e4 <SystemInit+0x40>)
 80023a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <SystemInit+0x44>)
 80023b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023b6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80023be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80023c6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80023ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023d8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023da:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023e0:	608b      	str	r3, [r1, #8]
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	40021000 	.word	0x40021000

080023ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023f2:	e003      	b.n	80023fc <LoopCopyDataInit>

080023f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023fa:	3104      	adds	r1, #4

080023fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <LoopForever+0xa>)
	ldr	r3, =_edata
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002400:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002402:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002404:	d3f6      	bcc.n	80023f4 <CopyDataInit>
	ldr	r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002408:	e002      	b.n	8002410 <LoopFillZerobss>

0800240a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800240a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800240c:	f842 3b04 	str.w	r3, [r2], #4

08002410 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <LoopForever+0x16>)
	cmp	r2, r3
 8002412:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002414:	d3f9      	bcc.n	800240a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002416:	f7ff ffc5 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f000 f811 	bl	8002440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241e:	f7ff fe37 	bl	8002090 <main>

08002422 <LoopForever>:

LoopForever:
    b LoopForever
 8002422:	e7fe      	b.n	8002422 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002424:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002428:	08003444 	.word	0x08003444
	ldr	r0, =_sdata
 800242c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002430:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002434:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002438:	200001c0 	.word	0x200001c0

0800243c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC1_IRQHandler>
	...

08002440 <__libc_init_array>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	4e0d      	ldr	r6, [pc, #52]	; (8002478 <__libc_init_array+0x38>)
 8002444:	4c0d      	ldr	r4, [pc, #52]	; (800247c <__libc_init_array+0x3c>)
 8002446:	1ba4      	subs	r4, r4, r6
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	2500      	movs	r5, #0
 800244c:	42a5      	cmp	r5, r4
 800244e:	d109      	bne.n	8002464 <__libc_init_array+0x24>
 8002450:	4e0b      	ldr	r6, [pc, #44]	; (8002480 <__libc_init_array+0x40>)
 8002452:	4c0c      	ldr	r4, [pc, #48]	; (8002484 <__libc_init_array+0x44>)
 8002454:	f000 ff56 	bl	8003304 <_init>
 8002458:	1ba4      	subs	r4, r4, r6
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	2500      	movs	r5, #0
 800245e:	42a5      	cmp	r5, r4
 8002460:	d105      	bne.n	800246e <__libc_init_array+0x2e>
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002468:	4798      	blx	r3
 800246a:	3501      	adds	r5, #1
 800246c:	e7ee      	b.n	800244c <__libc_init_array+0xc>
 800246e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002472:	4798      	blx	r3
 8002474:	3501      	adds	r5, #1
 8002476:	e7f2      	b.n	800245e <__libc_init_array+0x1e>
 8002478:	0800343c 	.word	0x0800343c
 800247c:	0800343c 	.word	0x0800343c
 8002480:	0800343c 	.word	0x0800343c
 8002484:	08003440 	.word	0x08003440

08002488 <iprintf>:
 8002488:	b40f      	push	{r0, r1, r2, r3}
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <iprintf+0x2c>)
 800248c:	b513      	push	{r0, r1, r4, lr}
 800248e:	681c      	ldr	r4, [r3, #0]
 8002490:	b124      	cbz	r4, 800249c <iprintf+0x14>
 8002492:	69a3      	ldr	r3, [r4, #24]
 8002494:	b913      	cbnz	r3, 800249c <iprintf+0x14>
 8002496:	4620      	mov	r0, r4
 8002498:	f000 f84e 	bl	8002538 <__sinit>
 800249c:	ab05      	add	r3, sp, #20
 800249e:	9a04      	ldr	r2, [sp, #16]
 80024a0:	68a1      	ldr	r1, [r4, #8]
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	4620      	mov	r0, r4
 80024a6:	f000 f961 	bl	800276c <_vfiprintf_r>
 80024aa:	b002      	add	sp, #8
 80024ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b0:	b004      	add	sp, #16
 80024b2:	4770      	bx	lr
 80024b4:	20000004 	.word	0x20000004

080024b8 <_cleanup_r>:
 80024b8:	4901      	ldr	r1, [pc, #4]	; (80024c0 <_cleanup_r+0x8>)
 80024ba:	f000 b8a9 	b.w	8002610 <_fwalk_reent>
 80024be:	bf00      	nop
 80024c0:	08003041 	.word	0x08003041

080024c4 <std.isra.0>:
 80024c4:	2300      	movs	r3, #0
 80024c6:	b510      	push	{r4, lr}
 80024c8:	4604      	mov	r4, r0
 80024ca:	6003      	str	r3, [r0, #0]
 80024cc:	6043      	str	r3, [r0, #4]
 80024ce:	6083      	str	r3, [r0, #8]
 80024d0:	8181      	strh	r1, [r0, #12]
 80024d2:	6643      	str	r3, [r0, #100]	; 0x64
 80024d4:	81c2      	strh	r2, [r0, #14]
 80024d6:	6103      	str	r3, [r0, #16]
 80024d8:	6143      	str	r3, [r0, #20]
 80024da:	6183      	str	r3, [r0, #24]
 80024dc:	4619      	mov	r1, r3
 80024de:	2208      	movs	r2, #8
 80024e0:	305c      	adds	r0, #92	; 0x5c
 80024e2:	f000 f8b3 	bl	800264c <memset>
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <std.isra.0+0x38>)
 80024e8:	6263      	str	r3, [r4, #36]	; 0x24
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <std.isra.0+0x3c>)
 80024ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <std.isra.0+0x40>)
 80024f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <std.isra.0+0x44>)
 80024f4:	6224      	str	r4, [r4, #32]
 80024f6:	6323      	str	r3, [r4, #48]	; 0x30
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	bf00      	nop
 80024fc:	08002ce5 	.word	0x08002ce5
 8002500:	08002d07 	.word	0x08002d07
 8002504:	08002d3f 	.word	0x08002d3f
 8002508:	08002d63 	.word	0x08002d63

0800250c <__sfmoreglue>:
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	1e4a      	subs	r2, r1, #1
 8002510:	2568      	movs	r5, #104	; 0x68
 8002512:	4355      	muls	r5, r2
 8002514:	460e      	mov	r6, r1
 8002516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800251a:	f000 f89f 	bl	800265c <_malloc_r>
 800251e:	4604      	mov	r4, r0
 8002520:	b140      	cbz	r0, 8002534 <__sfmoreglue+0x28>
 8002522:	2100      	movs	r1, #0
 8002524:	e880 0042 	stmia.w	r0, {r1, r6}
 8002528:	300c      	adds	r0, #12
 800252a:	60a0      	str	r0, [r4, #8]
 800252c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002530:	f000 f88c 	bl	800264c <memset>
 8002534:	4620      	mov	r0, r4
 8002536:	bd70      	pop	{r4, r5, r6, pc}

08002538 <__sinit>:
 8002538:	6983      	ldr	r3, [r0, #24]
 800253a:	b510      	push	{r4, lr}
 800253c:	4604      	mov	r4, r0
 800253e:	bb33      	cbnz	r3, 800258e <__sinit+0x56>
 8002540:	6483      	str	r3, [r0, #72]	; 0x48
 8002542:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002544:	6503      	str	r3, [r0, #80]	; 0x50
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <__sinit+0x58>)
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <__sinit+0x5c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6282      	str	r2, [r0, #40]	; 0x28
 800254e:	4298      	cmp	r0, r3
 8002550:	bf04      	itt	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	6183      	streq	r3, [r0, #24]
 8002556:	f000 f81f 	bl	8002598 <__sfp>
 800255a:	6060      	str	r0, [r4, #4]
 800255c:	4620      	mov	r0, r4
 800255e:	f000 f81b 	bl	8002598 <__sfp>
 8002562:	60a0      	str	r0, [r4, #8]
 8002564:	4620      	mov	r0, r4
 8002566:	f000 f817 	bl	8002598 <__sfp>
 800256a:	2200      	movs	r2, #0
 800256c:	60e0      	str	r0, [r4, #12]
 800256e:	2104      	movs	r1, #4
 8002570:	6860      	ldr	r0, [r4, #4]
 8002572:	f7ff ffa7 	bl	80024c4 <std.isra.0>
 8002576:	2201      	movs	r2, #1
 8002578:	2109      	movs	r1, #9
 800257a:	68a0      	ldr	r0, [r4, #8]
 800257c:	f7ff ffa2 	bl	80024c4 <std.isra.0>
 8002580:	2202      	movs	r2, #2
 8002582:	2112      	movs	r1, #18
 8002584:	68e0      	ldr	r0, [r4, #12]
 8002586:	f7ff ff9d 	bl	80024c4 <std.isra.0>
 800258a:	2301      	movs	r3, #1
 800258c:	61a3      	str	r3, [r4, #24]
 800258e:	bd10      	pop	{r4, pc}
 8002590:	080033fc 	.word	0x080033fc
 8002594:	080024b9 	.word	0x080024b9

08002598 <__sfp>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <__sfp+0x74>)
 800259c:	681e      	ldr	r6, [r3, #0]
 800259e:	69b3      	ldr	r3, [r6, #24]
 80025a0:	4607      	mov	r7, r0
 80025a2:	b913      	cbnz	r3, 80025aa <__sfp+0x12>
 80025a4:	4630      	mov	r0, r6
 80025a6:	f7ff ffc7 	bl	8002538 <__sinit>
 80025aa:	3648      	adds	r6, #72	; 0x48
 80025ac:	68b4      	ldr	r4, [r6, #8]
 80025ae:	6873      	ldr	r3, [r6, #4]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	d503      	bpl.n	80025bc <__sfp+0x24>
 80025b4:	6833      	ldr	r3, [r6, #0]
 80025b6:	b133      	cbz	r3, 80025c6 <__sfp+0x2e>
 80025b8:	6836      	ldr	r6, [r6, #0]
 80025ba:	e7f7      	b.n	80025ac <__sfp+0x14>
 80025bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80025c0:	b16d      	cbz	r5, 80025de <__sfp+0x46>
 80025c2:	3468      	adds	r4, #104	; 0x68
 80025c4:	e7f4      	b.n	80025b0 <__sfp+0x18>
 80025c6:	2104      	movs	r1, #4
 80025c8:	4638      	mov	r0, r7
 80025ca:	f7ff ff9f 	bl	800250c <__sfmoreglue>
 80025ce:	6030      	str	r0, [r6, #0]
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1f1      	bne.n	80025b8 <__sfp+0x20>
 80025d4:	230c      	movs	r3, #12
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	4604      	mov	r4, r0
 80025da:	4620      	mov	r0, r4
 80025dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e2:	81e3      	strh	r3, [r4, #14]
 80025e4:	2301      	movs	r3, #1
 80025e6:	81a3      	strh	r3, [r4, #12]
 80025e8:	6665      	str	r5, [r4, #100]	; 0x64
 80025ea:	6025      	str	r5, [r4, #0]
 80025ec:	60a5      	str	r5, [r4, #8]
 80025ee:	6065      	str	r5, [r4, #4]
 80025f0:	6125      	str	r5, [r4, #16]
 80025f2:	6165      	str	r5, [r4, #20]
 80025f4:	61a5      	str	r5, [r4, #24]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4629      	mov	r1, r5
 80025fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025fe:	f000 f825 	bl	800264c <memset>
 8002602:	6365      	str	r5, [r4, #52]	; 0x34
 8002604:	63a5      	str	r5, [r4, #56]	; 0x38
 8002606:	64a5      	str	r5, [r4, #72]	; 0x48
 8002608:	64e5      	str	r5, [r4, #76]	; 0x4c
 800260a:	e7e6      	b.n	80025da <__sfp+0x42>
 800260c:	080033fc 	.word	0x080033fc

08002610 <_fwalk_reent>:
 8002610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002614:	4680      	mov	r8, r0
 8002616:	4689      	mov	r9, r1
 8002618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800261c:	2600      	movs	r6, #0
 800261e:	b914      	cbnz	r4, 8002626 <_fwalk_reent+0x16>
 8002620:	4630      	mov	r0, r6
 8002622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002626:	68a5      	ldr	r5, [r4, #8]
 8002628:	6867      	ldr	r7, [r4, #4]
 800262a:	3f01      	subs	r7, #1
 800262c:	d501      	bpl.n	8002632 <_fwalk_reent+0x22>
 800262e:	6824      	ldr	r4, [r4, #0]
 8002630:	e7f5      	b.n	800261e <_fwalk_reent+0xe>
 8002632:	89ab      	ldrh	r3, [r5, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d907      	bls.n	8002648 <_fwalk_reent+0x38>
 8002638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800263c:	3301      	adds	r3, #1
 800263e:	d003      	beq.n	8002648 <_fwalk_reent+0x38>
 8002640:	4629      	mov	r1, r5
 8002642:	4640      	mov	r0, r8
 8002644:	47c8      	blx	r9
 8002646:	4306      	orrs	r6, r0
 8002648:	3568      	adds	r5, #104	; 0x68
 800264a:	e7ee      	b.n	800262a <_fwalk_reent+0x1a>

0800264c <memset>:
 800264c:	4402      	add	r2, r0
 800264e:	4603      	mov	r3, r0
 8002650:	4293      	cmp	r3, r2
 8002652:	d100      	bne.n	8002656 <memset+0xa>
 8002654:	4770      	bx	lr
 8002656:	f803 1b01 	strb.w	r1, [r3], #1
 800265a:	e7f9      	b.n	8002650 <memset+0x4>

0800265c <_malloc_r>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	1ccd      	adds	r5, r1, #3
 8002660:	f025 0503 	bic.w	r5, r5, #3
 8002664:	3508      	adds	r5, #8
 8002666:	2d0c      	cmp	r5, #12
 8002668:	bf38      	it	cc
 800266a:	250c      	movcc	r5, #12
 800266c:	2d00      	cmp	r5, #0
 800266e:	4606      	mov	r6, r0
 8002670:	db01      	blt.n	8002676 <_malloc_r+0x1a>
 8002672:	42a9      	cmp	r1, r5
 8002674:	d903      	bls.n	800267e <_malloc_r+0x22>
 8002676:	230c      	movs	r3, #12
 8002678:	6033      	str	r3, [r6, #0]
 800267a:	2000      	movs	r0, #0
 800267c:	bd70      	pop	{r4, r5, r6, pc}
 800267e:	f000 fd7f 	bl	8003180 <__malloc_lock>
 8002682:	4a23      	ldr	r2, [pc, #140]	; (8002710 <_malloc_r+0xb4>)
 8002684:	6814      	ldr	r4, [r2, #0]
 8002686:	4621      	mov	r1, r4
 8002688:	b991      	cbnz	r1, 80026b0 <_malloc_r+0x54>
 800268a:	4c22      	ldr	r4, [pc, #136]	; (8002714 <_malloc_r+0xb8>)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	b91b      	cbnz	r3, 8002698 <_malloc_r+0x3c>
 8002690:	4630      	mov	r0, r6
 8002692:	f000 fb17 	bl	8002cc4 <_sbrk_r>
 8002696:	6020      	str	r0, [r4, #0]
 8002698:	4629      	mov	r1, r5
 800269a:	4630      	mov	r0, r6
 800269c:	f000 fb12 	bl	8002cc4 <_sbrk_r>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d126      	bne.n	80026f2 <_malloc_r+0x96>
 80026a4:	230c      	movs	r3, #12
 80026a6:	6033      	str	r3, [r6, #0]
 80026a8:	4630      	mov	r0, r6
 80026aa:	f000 fd6a 	bl	8003182 <__malloc_unlock>
 80026ae:	e7e4      	b.n	800267a <_malloc_r+0x1e>
 80026b0:	680b      	ldr	r3, [r1, #0]
 80026b2:	1b5b      	subs	r3, r3, r5
 80026b4:	d41a      	bmi.n	80026ec <_malloc_r+0x90>
 80026b6:	2b0b      	cmp	r3, #11
 80026b8:	d90f      	bls.n	80026da <_malloc_r+0x7e>
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	50cd      	str	r5, [r1, r3]
 80026be:	18cc      	adds	r4, r1, r3
 80026c0:	4630      	mov	r0, r6
 80026c2:	f000 fd5e 	bl	8003182 <__malloc_unlock>
 80026c6:	f104 000b 	add.w	r0, r4, #11
 80026ca:	1d23      	adds	r3, r4, #4
 80026cc:	f020 0007 	bic.w	r0, r0, #7
 80026d0:	1ac3      	subs	r3, r0, r3
 80026d2:	d01b      	beq.n	800270c <_malloc_r+0xb0>
 80026d4:	425a      	negs	r2, r3
 80026d6:	50e2      	str	r2, [r4, r3]
 80026d8:	bd70      	pop	{r4, r5, r6, pc}
 80026da:	428c      	cmp	r4, r1
 80026dc:	bf0d      	iteet	eq
 80026de:	6863      	ldreq	r3, [r4, #4]
 80026e0:	684b      	ldrne	r3, [r1, #4]
 80026e2:	6063      	strne	r3, [r4, #4]
 80026e4:	6013      	streq	r3, [r2, #0]
 80026e6:	bf18      	it	ne
 80026e8:	460c      	movne	r4, r1
 80026ea:	e7e9      	b.n	80026c0 <_malloc_r+0x64>
 80026ec:	460c      	mov	r4, r1
 80026ee:	6849      	ldr	r1, [r1, #4]
 80026f0:	e7ca      	b.n	8002688 <_malloc_r+0x2c>
 80026f2:	1cc4      	adds	r4, r0, #3
 80026f4:	f024 0403 	bic.w	r4, r4, #3
 80026f8:	42a0      	cmp	r0, r4
 80026fa:	d005      	beq.n	8002708 <_malloc_r+0xac>
 80026fc:	1a21      	subs	r1, r4, r0
 80026fe:	4630      	mov	r0, r6
 8002700:	f000 fae0 	bl	8002cc4 <_sbrk_r>
 8002704:	3001      	adds	r0, #1
 8002706:	d0cd      	beq.n	80026a4 <_malloc_r+0x48>
 8002708:	6025      	str	r5, [r4, #0]
 800270a:	e7d9      	b.n	80026c0 <_malloc_r+0x64>
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	bf00      	nop
 8002710:	20000084 	.word	0x20000084
 8002714:	20000088 	.word	0x20000088

08002718 <__sfputc_r>:
 8002718:	6893      	ldr	r3, [r2, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	b410      	push	{r4}
 8002720:	6093      	str	r3, [r2, #8]
 8002722:	da09      	bge.n	8002738 <__sfputc_r+0x20>
 8002724:	6994      	ldr	r4, [r2, #24]
 8002726:	42a3      	cmp	r3, r4
 8002728:	db02      	blt.n	8002730 <__sfputc_r+0x18>
 800272a:	b2cb      	uxtb	r3, r1
 800272c:	2b0a      	cmp	r3, #10
 800272e:	d103      	bne.n	8002738 <__sfputc_r+0x20>
 8002730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002734:	f000 bb1a 	b.w	8002d6c <__swbuf_r>
 8002738:	6813      	ldr	r3, [r2, #0]
 800273a:	1c58      	adds	r0, r3, #1
 800273c:	6010      	str	r0, [r2, #0]
 800273e:	7019      	strb	r1, [r3, #0]
 8002740:	b2c8      	uxtb	r0, r1
 8002742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002746:	4770      	bx	lr

08002748 <__sfputs_r>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	4606      	mov	r6, r0
 800274c:	460f      	mov	r7, r1
 800274e:	4614      	mov	r4, r2
 8002750:	18d5      	adds	r5, r2, r3
 8002752:	42ac      	cmp	r4, r5
 8002754:	d101      	bne.n	800275a <__sfputs_r+0x12>
 8002756:	2000      	movs	r0, #0
 8002758:	e007      	b.n	800276a <__sfputs_r+0x22>
 800275a:	463a      	mov	r2, r7
 800275c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002760:	4630      	mov	r0, r6
 8002762:	f7ff ffd9 	bl	8002718 <__sfputc_r>
 8002766:	1c43      	adds	r3, r0, #1
 8002768:	d1f3      	bne.n	8002752 <__sfputs_r+0xa>
 800276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800276c <_vfiprintf_r>:
 800276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002770:	b09d      	sub	sp, #116	; 0x74
 8002772:	460c      	mov	r4, r1
 8002774:	4617      	mov	r7, r2
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	4606      	mov	r6, r0
 800277a:	b118      	cbz	r0, 8002784 <_vfiprintf_r+0x18>
 800277c:	6983      	ldr	r3, [r0, #24]
 800277e:	b90b      	cbnz	r3, 8002784 <_vfiprintf_r+0x18>
 8002780:	f7ff feda 	bl	8002538 <__sinit>
 8002784:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <_vfiprintf_r+0x20c>)
 8002786:	429c      	cmp	r4, r3
 8002788:	d157      	bne.n	800283a <_vfiprintf_r+0xce>
 800278a:	6874      	ldr	r4, [r6, #4]
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	0718      	lsls	r0, r3, #28
 8002790:	d55d      	bpl.n	800284e <_vfiprintf_r+0xe2>
 8002792:	6923      	ldr	r3, [r4, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d05a      	beq.n	800284e <_vfiprintf_r+0xe2>
 8002798:	2300      	movs	r3, #0
 800279a:	9309      	str	r3, [sp, #36]	; 0x24
 800279c:	2320      	movs	r3, #32
 800279e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027a8:	f04f 0b01 	mov.w	fp, #1
 80027ac:	46b8      	mov	r8, r7
 80027ae:	4645      	mov	r5, r8
 80027b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d155      	bne.n	8002864 <_vfiprintf_r+0xf8>
 80027b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80027bc:	d00b      	beq.n	80027d6 <_vfiprintf_r+0x6a>
 80027be:	4653      	mov	r3, sl
 80027c0:	463a      	mov	r2, r7
 80027c2:	4621      	mov	r1, r4
 80027c4:	4630      	mov	r0, r6
 80027c6:	f7ff ffbf 	bl	8002748 <__sfputs_r>
 80027ca:	3001      	adds	r0, #1
 80027cc:	f000 80c4 	beq.w	8002958 <_vfiprintf_r+0x1ec>
 80027d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d2:	4453      	add	r3, sl
 80027d4:	9309      	str	r3, [sp, #36]	; 0x24
 80027d6:	f898 3000 	ldrb.w	r3, [r8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80bc 	beq.w	8002958 <_vfiprintf_r+0x1ec>
 80027e0:	2300      	movs	r3, #0
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	9304      	str	r3, [sp, #16]
 80027e8:	9307      	str	r3, [sp, #28]
 80027ea:	9205      	str	r2, [sp, #20]
 80027ec:	9306      	str	r3, [sp, #24]
 80027ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027f2:	931a      	str	r3, [sp, #104]	; 0x68
 80027f4:	2205      	movs	r2, #5
 80027f6:	7829      	ldrb	r1, [r5, #0]
 80027f8:	4860      	ldr	r0, [pc, #384]	; (800297c <_vfiprintf_r+0x210>)
 80027fa:	f7fd fce9 	bl	80001d0 <memchr>
 80027fe:	f105 0801 	add.w	r8, r5, #1
 8002802:	9b04      	ldr	r3, [sp, #16]
 8002804:	2800      	cmp	r0, #0
 8002806:	d131      	bne.n	800286c <_vfiprintf_r+0x100>
 8002808:	06d9      	lsls	r1, r3, #27
 800280a:	bf44      	itt	mi
 800280c:	2220      	movmi	r2, #32
 800280e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002812:	071a      	lsls	r2, r3, #28
 8002814:	bf44      	itt	mi
 8002816:	222b      	movmi	r2, #43	; 0x2b
 8002818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800281c:	782a      	ldrb	r2, [r5, #0]
 800281e:	2a2a      	cmp	r2, #42	; 0x2a
 8002820:	d02c      	beq.n	800287c <_vfiprintf_r+0x110>
 8002822:	9a07      	ldr	r2, [sp, #28]
 8002824:	2100      	movs	r1, #0
 8002826:	200a      	movs	r0, #10
 8002828:	46a8      	mov	r8, r5
 800282a:	3501      	adds	r5, #1
 800282c:	f898 3000 	ldrb.w	r3, [r8]
 8002830:	3b30      	subs	r3, #48	; 0x30
 8002832:	2b09      	cmp	r3, #9
 8002834:	d96d      	bls.n	8002912 <_vfiprintf_r+0x1a6>
 8002836:	b371      	cbz	r1, 8002896 <_vfiprintf_r+0x12a>
 8002838:	e026      	b.n	8002888 <_vfiprintf_r+0x11c>
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <_vfiprintf_r+0x214>)
 800283c:	429c      	cmp	r4, r3
 800283e:	d101      	bne.n	8002844 <_vfiprintf_r+0xd8>
 8002840:	68b4      	ldr	r4, [r6, #8]
 8002842:	e7a3      	b.n	800278c <_vfiprintf_r+0x20>
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <_vfiprintf_r+0x218>)
 8002846:	429c      	cmp	r4, r3
 8002848:	bf08      	it	eq
 800284a:	68f4      	ldreq	r4, [r6, #12]
 800284c:	e79e      	b.n	800278c <_vfiprintf_r+0x20>
 800284e:	4621      	mov	r1, r4
 8002850:	4630      	mov	r0, r6
 8002852:	f000 faef 	bl	8002e34 <__swsetup_r>
 8002856:	2800      	cmp	r0, #0
 8002858:	d09e      	beq.n	8002798 <_vfiprintf_r+0x2c>
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	b01d      	add	sp, #116	; 0x74
 8002860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002864:	2b25      	cmp	r3, #37	; 0x25
 8002866:	d0a7      	beq.n	80027b8 <_vfiprintf_r+0x4c>
 8002868:	46a8      	mov	r8, r5
 800286a:	e7a0      	b.n	80027ae <_vfiprintf_r+0x42>
 800286c:	4a43      	ldr	r2, [pc, #268]	; (800297c <_vfiprintf_r+0x210>)
 800286e:	1a80      	subs	r0, r0, r2
 8002870:	fa0b f000 	lsl.w	r0, fp, r0
 8002874:	4318      	orrs	r0, r3
 8002876:	9004      	str	r0, [sp, #16]
 8002878:	4645      	mov	r5, r8
 800287a:	e7bb      	b.n	80027f4 <_vfiprintf_r+0x88>
 800287c:	9a03      	ldr	r2, [sp, #12]
 800287e:	1d11      	adds	r1, r2, #4
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	9103      	str	r1, [sp, #12]
 8002884:	2a00      	cmp	r2, #0
 8002886:	db01      	blt.n	800288c <_vfiprintf_r+0x120>
 8002888:	9207      	str	r2, [sp, #28]
 800288a:	e004      	b.n	8002896 <_vfiprintf_r+0x12a>
 800288c:	4252      	negs	r2, r2
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	9207      	str	r2, [sp, #28]
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	f898 3000 	ldrb.w	r3, [r8]
 800289a:	2b2e      	cmp	r3, #46	; 0x2e
 800289c:	d110      	bne.n	80028c0 <_vfiprintf_r+0x154>
 800289e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80028a2:	2b2a      	cmp	r3, #42	; 0x2a
 80028a4:	f108 0101 	add.w	r1, r8, #1
 80028a8:	d137      	bne.n	800291a <_vfiprintf_r+0x1ae>
 80028aa:	9b03      	ldr	r3, [sp, #12]
 80028ac:	1d1a      	adds	r2, r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	9203      	str	r2, [sp, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bfb8      	it	lt
 80028b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ba:	f108 0802 	add.w	r8, r8, #2
 80028be:	9305      	str	r3, [sp, #20]
 80028c0:	4d31      	ldr	r5, [pc, #196]	; (8002988 <_vfiprintf_r+0x21c>)
 80028c2:	f898 1000 	ldrb.w	r1, [r8]
 80028c6:	2203      	movs	r2, #3
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7fd fc81 	bl	80001d0 <memchr>
 80028ce:	b140      	cbz	r0, 80028e2 <_vfiprintf_r+0x176>
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	1b40      	subs	r0, r0, r5
 80028d4:	fa03 f000 	lsl.w	r0, r3, r0
 80028d8:	9b04      	ldr	r3, [sp, #16]
 80028da:	4303      	orrs	r3, r0
 80028dc:	9304      	str	r3, [sp, #16]
 80028de:	f108 0801 	add.w	r8, r8, #1
 80028e2:	f898 1000 	ldrb.w	r1, [r8]
 80028e6:	4829      	ldr	r0, [pc, #164]	; (800298c <_vfiprintf_r+0x220>)
 80028e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028ec:	2206      	movs	r2, #6
 80028ee:	f108 0701 	add.w	r7, r8, #1
 80028f2:	f7fd fc6d 	bl	80001d0 <memchr>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d034      	beq.n	8002964 <_vfiprintf_r+0x1f8>
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <_vfiprintf_r+0x224>)
 80028fc:	bb03      	cbnz	r3, 8002940 <_vfiprintf_r+0x1d4>
 80028fe:	9b03      	ldr	r3, [sp, #12]
 8002900:	3307      	adds	r3, #7
 8002902:	f023 0307 	bic.w	r3, r3, #7
 8002906:	3308      	adds	r3, #8
 8002908:	9303      	str	r3, [sp, #12]
 800290a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290c:	444b      	add	r3, r9
 800290e:	9309      	str	r3, [sp, #36]	; 0x24
 8002910:	e74c      	b.n	80027ac <_vfiprintf_r+0x40>
 8002912:	fb00 3202 	mla	r2, r0, r2, r3
 8002916:	2101      	movs	r1, #1
 8002918:	e786      	b.n	8002828 <_vfiprintf_r+0xbc>
 800291a:	2300      	movs	r3, #0
 800291c:	9305      	str	r3, [sp, #20]
 800291e:	4618      	mov	r0, r3
 8002920:	250a      	movs	r5, #10
 8002922:	4688      	mov	r8, r1
 8002924:	3101      	adds	r1, #1
 8002926:	f898 2000 	ldrb.w	r2, [r8]
 800292a:	3a30      	subs	r2, #48	; 0x30
 800292c:	2a09      	cmp	r2, #9
 800292e:	d903      	bls.n	8002938 <_vfiprintf_r+0x1cc>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0c5      	beq.n	80028c0 <_vfiprintf_r+0x154>
 8002934:	9005      	str	r0, [sp, #20]
 8002936:	e7c3      	b.n	80028c0 <_vfiprintf_r+0x154>
 8002938:	fb05 2000 	mla	r0, r5, r0, r2
 800293c:	2301      	movs	r3, #1
 800293e:	e7f0      	b.n	8002922 <_vfiprintf_r+0x1b6>
 8002940:	ab03      	add	r3, sp, #12
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4622      	mov	r2, r4
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <_vfiprintf_r+0x228>)
 8002948:	a904      	add	r1, sp, #16
 800294a:	4630      	mov	r0, r6
 800294c:	f3af 8000 	nop.w
 8002950:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002954:	4681      	mov	r9, r0
 8002956:	d1d8      	bne.n	800290a <_vfiprintf_r+0x19e>
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	065b      	lsls	r3, r3, #25
 800295c:	f53f af7d 	bmi.w	800285a <_vfiprintf_r+0xee>
 8002960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002962:	e77c      	b.n	800285e <_vfiprintf_r+0xf2>
 8002964:	ab03      	add	r3, sp, #12
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4622      	mov	r2, r4
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <_vfiprintf_r+0x228>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	4630      	mov	r0, r6
 8002970:	f000 f888 	bl	8002a84 <_printf_i>
 8002974:	e7ec      	b.n	8002950 <_vfiprintf_r+0x1e4>
 8002976:	bf00      	nop
 8002978:	080033bc 	.word	0x080033bc
 800297c:	08003400 	.word	0x08003400
 8002980:	080033dc 	.word	0x080033dc
 8002984:	0800339c 	.word	0x0800339c
 8002988:	08003406 	.word	0x08003406
 800298c:	0800340a 	.word	0x0800340a
 8002990:	00000000 	.word	0x00000000
 8002994:	08002749 	.word	0x08002749

08002998 <_printf_common>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	4691      	mov	r9, r2
 800299e:	461f      	mov	r7, r3
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	690b      	ldr	r3, [r1, #16]
 80029a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bfb8      	it	lt
 80029ac:	4613      	movlt	r3, r2
 80029ae:	f8c9 3000 	str.w	r3, [r9]
 80029b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029b6:	4606      	mov	r6, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	b112      	cbz	r2, 80029c2 <_printf_common+0x2a>
 80029bc:	3301      	adds	r3, #1
 80029be:	f8c9 3000 	str.w	r3, [r9]
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	0699      	lsls	r1, r3, #26
 80029c6:	bf42      	ittt	mi
 80029c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029cc:	3302      	addmi	r3, #2
 80029ce:	f8c9 3000 	strmi.w	r3, [r9]
 80029d2:	6825      	ldr	r5, [r4, #0]
 80029d4:	f015 0506 	ands.w	r5, r5, #6
 80029d8:	d107      	bne.n	80029ea <_printf_common+0x52>
 80029da:	f104 0a19 	add.w	sl, r4, #25
 80029de:	68e3      	ldr	r3, [r4, #12]
 80029e0:	f8d9 2000 	ldr.w	r2, [r9]
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	429d      	cmp	r5, r3
 80029e8:	db29      	blt.n	8002a3e <_printf_common+0xa6>
 80029ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	3300      	adds	r3, #0
 80029f2:	bf18      	it	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	0692      	lsls	r2, r2, #26
 80029f8:	d42e      	bmi.n	8002a58 <_printf_common+0xc0>
 80029fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029fe:	4639      	mov	r1, r7
 8002a00:	4630      	mov	r0, r6
 8002a02:	47c0      	blx	r8
 8002a04:	3001      	adds	r0, #1
 8002a06:	d021      	beq.n	8002a4c <_printf_common+0xb4>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	68e5      	ldr	r5, [r4, #12]
 8002a0c:	f8d9 2000 	ldr.w	r2, [r9]
 8002a10:	f003 0306 	and.w	r3, r3, #6
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	bf08      	it	eq
 8002a18:	1aad      	subeq	r5, r5, r2
 8002a1a:	68a3      	ldr	r3, [r4, #8]
 8002a1c:	6922      	ldr	r2, [r4, #16]
 8002a1e:	bf0c      	ite	eq
 8002a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a24:	2500      	movne	r5, #0
 8002a26:	4293      	cmp	r3, r2
 8002a28:	bfc4      	itt	gt
 8002a2a:	1a9b      	subgt	r3, r3, r2
 8002a2c:	18ed      	addgt	r5, r5, r3
 8002a2e:	f04f 0900 	mov.w	r9, #0
 8002a32:	341a      	adds	r4, #26
 8002a34:	454d      	cmp	r5, r9
 8002a36:	d11b      	bne.n	8002a70 <_printf_common+0xd8>
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3e:	2301      	movs	r3, #1
 8002a40:	4652      	mov	r2, sl
 8002a42:	4639      	mov	r1, r7
 8002a44:	4630      	mov	r0, r6
 8002a46:	47c0      	blx	r8
 8002a48:	3001      	adds	r0, #1
 8002a4a:	d103      	bne.n	8002a54 <_printf_common+0xbc>
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a54:	3501      	adds	r5, #1
 8002a56:	e7c2      	b.n	80029de <_printf_common+0x46>
 8002a58:	18e1      	adds	r1, r4, r3
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	2030      	movs	r0, #48	; 0x30
 8002a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a62:	4422      	add	r2, r4
 8002a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	e7c4      	b.n	80029fa <_printf_common+0x62>
 8002a70:	2301      	movs	r3, #1
 8002a72:	4622      	mov	r2, r4
 8002a74:	4639      	mov	r1, r7
 8002a76:	4630      	mov	r0, r6
 8002a78:	47c0      	blx	r8
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d0e6      	beq.n	8002a4c <_printf_common+0xb4>
 8002a7e:	f109 0901 	add.w	r9, r9, #1
 8002a82:	e7d7      	b.n	8002a34 <_printf_common+0x9c>

08002a84 <_printf_i>:
 8002a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a88:	4617      	mov	r7, r2
 8002a8a:	7e0a      	ldrb	r2, [r1, #24]
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8002a90:	4698      	mov	r8, r3
 8002a92:	4606      	mov	r6, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002a9c:	f000 80bc 	beq.w	8002c18 <_printf_i+0x194>
 8002aa0:	d81a      	bhi.n	8002ad8 <_printf_i+0x54>
 8002aa2:	2a63      	cmp	r2, #99	; 0x63
 8002aa4:	d02e      	beq.n	8002b04 <_printf_i+0x80>
 8002aa6:	d80a      	bhi.n	8002abe <_printf_i+0x3a>
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	f000 80c8 	beq.w	8002c3e <_printf_i+0x1ba>
 8002aae:	2a58      	cmp	r2, #88	; 0x58
 8002ab0:	f000 808a 	beq.w	8002bc8 <_printf_i+0x144>
 8002ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002abc:	e02a      	b.n	8002b14 <_printf_i+0x90>
 8002abe:	2a64      	cmp	r2, #100	; 0x64
 8002ac0:	d001      	beq.n	8002ac6 <_printf_i+0x42>
 8002ac2:	2a69      	cmp	r2, #105	; 0x69
 8002ac4:	d1f6      	bne.n	8002ab4 <_printf_i+0x30>
 8002ac6:	6821      	ldr	r1, [r4, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ace:	d023      	beq.n	8002b18 <_printf_i+0x94>
 8002ad0:	1d11      	adds	r1, r2, #4
 8002ad2:	6019      	str	r1, [r3, #0]
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	e027      	b.n	8002b28 <_printf_i+0xa4>
 8002ad8:	2a73      	cmp	r2, #115	; 0x73
 8002ada:	f000 80b4 	beq.w	8002c46 <_printf_i+0x1c2>
 8002ade:	d808      	bhi.n	8002af2 <_printf_i+0x6e>
 8002ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8002ae2:	d02a      	beq.n	8002b3a <_printf_i+0xb6>
 8002ae4:	2a70      	cmp	r2, #112	; 0x70
 8002ae6:	d1e5      	bne.n	8002ab4 <_printf_i+0x30>
 8002ae8:	680a      	ldr	r2, [r1, #0]
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	600a      	str	r2, [r1, #0]
 8002af0:	e003      	b.n	8002afa <_printf_i+0x76>
 8002af2:	2a75      	cmp	r2, #117	; 0x75
 8002af4:	d021      	beq.n	8002b3a <_printf_i+0xb6>
 8002af6:	2a78      	cmp	r2, #120	; 0x78
 8002af8:	d1dc      	bne.n	8002ab4 <_printf_i+0x30>
 8002afa:	2278      	movs	r2, #120	; 0x78
 8002afc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002b00:	496e      	ldr	r1, [pc, #440]	; (8002cbc <_printf_i+0x238>)
 8002b02:	e064      	b.n	8002bce <_printf_i+0x14a>
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002b0a:	1d11      	adds	r1, r2, #4
 8002b0c:	6019      	str	r1, [r3, #0]
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0a3      	b.n	8002c60 <_printf_i+0x1dc>
 8002b18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002b1c:	f102 0104 	add.w	r1, r2, #4
 8002b20:	6019      	str	r1, [r3, #0]
 8002b22:	d0d7      	beq.n	8002ad4 <_printf_i+0x50>
 8002b24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da03      	bge.n	8002b34 <_printf_i+0xb0>
 8002b2c:	222d      	movs	r2, #45	; 0x2d
 8002b2e:	425b      	negs	r3, r3
 8002b30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b34:	4962      	ldr	r1, [pc, #392]	; (8002cc0 <_printf_i+0x23c>)
 8002b36:	220a      	movs	r2, #10
 8002b38:	e017      	b.n	8002b6a <_printf_i+0xe6>
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b42:	d003      	beq.n	8002b4c <_printf_i+0xc8>
 8002b44:	1d08      	adds	r0, r1, #4
 8002b46:	6018      	str	r0, [r3, #0]
 8002b48:	680b      	ldr	r3, [r1, #0]
 8002b4a:	e006      	b.n	8002b5a <_printf_i+0xd6>
 8002b4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b50:	f101 0004 	add.w	r0, r1, #4
 8002b54:	6018      	str	r0, [r3, #0]
 8002b56:	d0f7      	beq.n	8002b48 <_printf_i+0xc4>
 8002b58:	880b      	ldrh	r3, [r1, #0]
 8002b5a:	4959      	ldr	r1, [pc, #356]	; (8002cc0 <_printf_i+0x23c>)
 8002b5c:	2a6f      	cmp	r2, #111	; 0x6f
 8002b5e:	bf14      	ite	ne
 8002b60:	220a      	movne	r2, #10
 8002b62:	2208      	moveq	r2, #8
 8002b64:	2000      	movs	r0, #0
 8002b66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002b6a:	6865      	ldr	r5, [r4, #4]
 8002b6c:	60a5      	str	r5, [r4, #8]
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	f2c0 809c 	blt.w	8002cac <_printf_i+0x228>
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	f020 0004 	bic.w	r0, r0, #4
 8002b7a:	6020      	str	r0, [r4, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d13f      	bne.n	8002c00 <_printf_i+0x17c>
 8002b80:	2d00      	cmp	r5, #0
 8002b82:	f040 8095 	bne.w	8002cb0 <_printf_i+0x22c>
 8002b86:	4675      	mov	r5, lr
 8002b88:	2a08      	cmp	r2, #8
 8002b8a:	d10b      	bne.n	8002ba4 <_printf_i+0x120>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	07da      	lsls	r2, r3, #31
 8002b90:	d508      	bpl.n	8002ba4 <_printf_i+0x120>
 8002b92:	6923      	ldr	r3, [r4, #16]
 8002b94:	6862      	ldr	r2, [r4, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bfde      	ittt	le
 8002b9a:	2330      	movle	r3, #48	; 0x30
 8002b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ba4:	ebae 0305 	sub.w	r3, lr, r5
 8002ba8:	6123      	str	r3, [r4, #16]
 8002baa:	f8cd 8000 	str.w	r8, [sp]
 8002bae:	463b      	mov	r3, r7
 8002bb0:	aa03      	add	r2, sp, #12
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f7ff feef 	bl	8002998 <_printf_common>
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d155      	bne.n	8002c6a <_printf_i+0x1e6>
 8002bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc2:	b005      	add	sp, #20
 8002bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002bcc:	493c      	ldr	r1, [pc, #240]	; (8002cc0 <_printf_i+0x23c>)
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002bd6:	f100 0504 	add.w	r5, r0, #4
 8002bda:	601d      	str	r5, [r3, #0]
 8002bdc:	d001      	beq.n	8002be2 <_printf_i+0x15e>
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	e002      	b.n	8002be8 <_printf_i+0x164>
 8002be2:	0655      	lsls	r5, r2, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0x15a>
 8002be6:	8803      	ldrh	r3, [r0, #0]
 8002be8:	07d0      	lsls	r0, r2, #31
 8002bea:	bf44      	itt	mi
 8002bec:	f042 0220 	orrmi.w	r2, r2, #32
 8002bf0:	6022      	strmi	r2, [r4, #0]
 8002bf2:	b91b      	cbnz	r3, 8002bfc <_printf_i+0x178>
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	f022 0220 	bic.w	r2, r2, #32
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	e7b1      	b.n	8002b64 <_printf_i+0xe0>
 8002c00:	4675      	mov	r5, lr
 8002c02:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c06:	fb02 3310 	mls	r3, r2, r0, r3
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c10:	4603      	mov	r3, r0
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d1f5      	bne.n	8002c02 <_printf_i+0x17e>
 8002c16:	e7b7      	b.n	8002b88 <_printf_i+0x104>
 8002c18:	6808      	ldr	r0, [r1, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	6949      	ldr	r1, [r1, #20]
 8002c1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c22:	d004      	beq.n	8002c2e <_printf_i+0x1aa>
 8002c24:	1d10      	adds	r0, r2, #4
 8002c26:	6018      	str	r0, [r3, #0]
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	6019      	str	r1, [r3, #0]
 8002c2c:	e007      	b.n	8002c3e <_printf_i+0x1ba>
 8002c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c32:	f102 0004 	add.w	r0, r2, #4
 8002c36:	6018      	str	r0, [r3, #0]
 8002c38:	6813      	ldr	r3, [r2, #0]
 8002c3a:	d0f6      	beq.n	8002c2a <_printf_i+0x1a6>
 8002c3c:	8019      	strh	r1, [r3, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	6123      	str	r3, [r4, #16]
 8002c42:	4675      	mov	r5, lr
 8002c44:	e7b1      	b.n	8002baa <_printf_i+0x126>
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	1d11      	adds	r1, r2, #4
 8002c4a:	6019      	str	r1, [r3, #0]
 8002c4c:	6815      	ldr	r5, [r2, #0]
 8002c4e:	6862      	ldr	r2, [r4, #4]
 8002c50:	2100      	movs	r1, #0
 8002c52:	4628      	mov	r0, r5
 8002c54:	f7fd fabc 	bl	80001d0 <memchr>
 8002c58:	b108      	cbz	r0, 8002c5e <_printf_i+0x1da>
 8002c5a:	1b40      	subs	r0, r0, r5
 8002c5c:	6060      	str	r0, [r4, #4]
 8002c5e:	6863      	ldr	r3, [r4, #4]
 8002c60:	6123      	str	r3, [r4, #16]
 8002c62:	2300      	movs	r3, #0
 8002c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c68:	e79f      	b.n	8002baa <_printf_i+0x126>
 8002c6a:	6923      	ldr	r3, [r4, #16]
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	4639      	mov	r1, r7
 8002c70:	4630      	mov	r0, r6
 8002c72:	47c0      	blx	r8
 8002c74:	3001      	adds	r0, #1
 8002c76:	d0a2      	beq.n	8002bbe <_printf_i+0x13a>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	079b      	lsls	r3, r3, #30
 8002c7c:	d507      	bpl.n	8002c8e <_printf_i+0x20a>
 8002c7e:	2500      	movs	r5, #0
 8002c80:	f104 0919 	add.w	r9, r4, #25
 8002c84:	68e3      	ldr	r3, [r4, #12]
 8002c86:	9a03      	ldr	r2, [sp, #12]
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	429d      	cmp	r5, r3
 8002c8c:	db05      	blt.n	8002c9a <_printf_i+0x216>
 8002c8e:	68e0      	ldr	r0, [r4, #12]
 8002c90:	9b03      	ldr	r3, [sp, #12]
 8002c92:	4298      	cmp	r0, r3
 8002c94:	bfb8      	it	lt
 8002c96:	4618      	movlt	r0, r3
 8002c98:	e793      	b.n	8002bc2 <_printf_i+0x13e>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	464a      	mov	r2, r9
 8002c9e:	4639      	mov	r1, r7
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	47c0      	blx	r8
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d08a      	beq.n	8002bbe <_printf_i+0x13a>
 8002ca8:	3501      	adds	r5, #1
 8002caa:	e7eb      	b.n	8002c84 <_printf_i+0x200>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1a7      	bne.n	8002c00 <_printf_i+0x17c>
 8002cb0:	780b      	ldrb	r3, [r1, #0]
 8002cb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cba:	e765      	b.n	8002b88 <_printf_i+0x104>
 8002cbc:	08003422 	.word	0x08003422
 8002cc0:	08003411 	.word	0x08003411

08002cc4 <_sbrk_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4c06      	ldr	r4, [pc, #24]	; (8002ce0 <_sbrk_r+0x1c>)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4605      	mov	r5, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	f000 fb02 	bl	80032d8 <_sbrk>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d102      	bne.n	8002cde <_sbrk_r+0x1a>
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	b103      	cbz	r3, 8002cde <_sbrk_r+0x1a>
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	200001bc 	.word	0x200001bc

08002ce4 <__sread>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cec:	f000 fa98 	bl	8003220 <_read_r>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	bfab      	itete	ge
 8002cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cf8:	181b      	addge	r3, r3, r0
 8002cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cfe:	bfac      	ite	ge
 8002d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d02:	81a3      	strhlt	r3, [r4, #12]
 8002d04:	bd10      	pop	{r4, pc}

08002d06 <__swrite>:
 8002d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	461f      	mov	r7, r3
 8002d0c:	898b      	ldrh	r3, [r1, #12]
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	4605      	mov	r5, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	4616      	mov	r6, r2
 8002d16:	d505      	bpl.n	8002d24 <__swrite+0x1e>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d20:	f000 f9b8 	bl	8003094 <_lseek_r>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	4632      	mov	r2, r6
 8002d32:	463b      	mov	r3, r7
 8002d34:	4628      	mov	r0, r5
 8002d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	f000 b869 	b.w	8002e10 <_write_r>

08002d3e <__sseek>:
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	460c      	mov	r4, r1
 8002d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d46:	f000 f9a5 	bl	8003094 <_lseek_r>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	bf15      	itete	ne
 8002d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d5a:	81a3      	strheq	r3, [r4, #12]
 8002d5c:	bf18      	it	ne
 8002d5e:	81a3      	strhne	r3, [r4, #12]
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <__sclose>:
 8002d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d66:	f000 b8d3 	b.w	8002f10 <_close_r>
	...

08002d6c <__swbuf_r>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	460e      	mov	r6, r1
 8002d70:	4614      	mov	r4, r2
 8002d72:	4605      	mov	r5, r0
 8002d74:	b118      	cbz	r0, 8002d7e <__swbuf_r+0x12>
 8002d76:	6983      	ldr	r3, [r0, #24]
 8002d78:	b90b      	cbnz	r3, 8002d7e <__swbuf_r+0x12>
 8002d7a:	f7ff fbdd 	bl	8002538 <__sinit>
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <__swbuf_r+0x98>)
 8002d80:	429c      	cmp	r4, r3
 8002d82:	d12a      	bne.n	8002dda <__swbuf_r+0x6e>
 8002d84:	686c      	ldr	r4, [r5, #4]
 8002d86:	69a3      	ldr	r3, [r4, #24]
 8002d88:	60a3      	str	r3, [r4, #8]
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	071a      	lsls	r2, r3, #28
 8002d8e:	d52e      	bpl.n	8002dee <__swbuf_r+0x82>
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	b363      	cbz	r3, 8002dee <__swbuf_r+0x82>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	1ac0      	subs	r0, r0, r3
 8002d9a:	6963      	ldr	r3, [r4, #20]
 8002d9c:	b2f6      	uxtb	r6, r6
 8002d9e:	4298      	cmp	r0, r3
 8002da0:	4637      	mov	r7, r6
 8002da2:	db04      	blt.n	8002dae <__swbuf_r+0x42>
 8002da4:	4621      	mov	r1, r4
 8002da6:	4628      	mov	r0, r5
 8002da8:	f000 f94a 	bl	8003040 <_fflush_r>
 8002dac:	bb28      	cbnz	r0, 8002dfa <__swbuf_r+0x8e>
 8002dae:	68a3      	ldr	r3, [r4, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	60a3      	str	r3, [r4, #8]
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	6022      	str	r2, [r4, #0]
 8002dba:	701e      	strb	r6, [r3, #0]
 8002dbc:	6963      	ldr	r3, [r4, #20]
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	d004      	beq.n	8002dce <__swbuf_r+0x62>
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	07db      	lsls	r3, r3, #31
 8002dc8:	d519      	bpl.n	8002dfe <__swbuf_r+0x92>
 8002dca:	2e0a      	cmp	r6, #10
 8002dcc:	d117      	bne.n	8002dfe <__swbuf_r+0x92>
 8002dce:	4621      	mov	r1, r4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f000 f935 	bl	8003040 <_fflush_r>
 8002dd6:	b190      	cbz	r0, 8002dfe <__swbuf_r+0x92>
 8002dd8:	e00f      	b.n	8002dfa <__swbuf_r+0x8e>
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <__swbuf_r+0x9c>)
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	d101      	bne.n	8002de4 <__swbuf_r+0x78>
 8002de0:	68ac      	ldr	r4, [r5, #8]
 8002de2:	e7d0      	b.n	8002d86 <__swbuf_r+0x1a>
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <__swbuf_r+0xa0>)
 8002de6:	429c      	cmp	r4, r3
 8002de8:	bf08      	it	eq
 8002dea:	68ec      	ldreq	r4, [r5, #12]
 8002dec:	e7cb      	b.n	8002d86 <__swbuf_r+0x1a>
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f81f 	bl	8002e34 <__swsetup_r>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d0cc      	beq.n	8002d94 <__swbuf_r+0x28>
 8002dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8002dfe:	4638      	mov	r0, r7
 8002e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	080033bc 	.word	0x080033bc
 8002e08:	080033dc 	.word	0x080033dc
 8002e0c:	0800339c 	.word	0x0800339c

08002e10 <_write_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4c07      	ldr	r4, [pc, #28]	; (8002e30 <_write_r+0x20>)
 8002e14:	4605      	mov	r5, r0
 8002e16:	4608      	mov	r0, r1
 8002e18:	4611      	mov	r1, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	6022      	str	r2, [r4, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 fa68 	bl	80032f4 <_write>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d102      	bne.n	8002e2e <_write_r+0x1e>
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	b103      	cbz	r3, 8002e2e <_write_r+0x1e>
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
 8002e30:	200001bc 	.word	0x200001bc

08002e34 <__swsetup_r>:
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <__swsetup_r+0xcc>)
 8002e36:	b570      	push	{r4, r5, r6, lr}
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	4606      	mov	r6, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	b125      	cbz	r5, 8002e4a <__swsetup_r+0x16>
 8002e40:	69ab      	ldr	r3, [r5, #24]
 8002e42:	b913      	cbnz	r3, 8002e4a <__swsetup_r+0x16>
 8002e44:	4628      	mov	r0, r5
 8002e46:	f7ff fb77 	bl	8002538 <__sinit>
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <__swsetup_r+0xd0>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d10f      	bne.n	8002e70 <__swsetup_r+0x3c>
 8002e50:	686c      	ldr	r4, [r5, #4]
 8002e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	0715      	lsls	r5, r2, #28
 8002e5a:	d42c      	bmi.n	8002eb6 <__swsetup_r+0x82>
 8002e5c:	06d0      	lsls	r0, r2, #27
 8002e5e:	d411      	bmi.n	8002e84 <__swsetup_r+0x50>
 8002e60:	2209      	movs	r2, #9
 8002e62:	6032      	str	r2, [r6, #0]
 8002e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <__swsetup_r+0xd4>)
 8002e72:	429c      	cmp	r4, r3
 8002e74:	d101      	bne.n	8002e7a <__swsetup_r+0x46>
 8002e76:	68ac      	ldr	r4, [r5, #8]
 8002e78:	e7eb      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <__swsetup_r+0xd8>)
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	bf08      	it	eq
 8002e80:	68ec      	ldreq	r4, [r5, #12]
 8002e82:	e7e6      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e84:	0751      	lsls	r1, r2, #29
 8002e86:	d512      	bpl.n	8002eae <__swsetup_r+0x7a>
 8002e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8a:	b141      	cbz	r1, 8002e9e <__swsetup_r+0x6a>
 8002e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e90:	4299      	cmp	r1, r3
 8002e92:	d002      	beq.n	8002e9a <__swsetup_r+0x66>
 8002e94:	4630      	mov	r0, r6
 8002e96:	f000 f975 	bl	8003184 <_free_r>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	6923      	ldr	r3, [r4, #16]
 8002eb8:	b94b      	cbnz	r3, 8002ece <__swsetup_r+0x9a>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d003      	beq.n	8002ece <__swsetup_r+0x9a>
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f000 f919 	bl	8003100 <__smakebuf_r>
 8002ece:	89a2      	ldrh	r2, [r4, #12]
 8002ed0:	f012 0301 	ands.w	r3, r2, #1
 8002ed4:	d00c      	beq.n	8002ef0 <__swsetup_r+0xbc>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60a3      	str	r3, [r4, #8]
 8002eda:	6963      	ldr	r3, [r4, #20]
 8002edc:	425b      	negs	r3, r3
 8002ede:	61a3      	str	r3, [r4, #24]
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	b953      	cbnz	r3, 8002efa <__swsetup_r+0xc6>
 8002ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002eec:	d1ba      	bne.n	8002e64 <__swsetup_r+0x30>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	0792      	lsls	r2, r2, #30
 8002ef2:	bf58      	it	pl
 8002ef4:	6963      	ldrpl	r3, [r4, #20]
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	e7f2      	b.n	8002ee0 <__swsetup_r+0xac>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7f7      	b.n	8002eee <__swsetup_r+0xba>
 8002efe:	bf00      	nop
 8002f00:	20000004 	.word	0x20000004
 8002f04:	080033bc 	.word	0x080033bc
 8002f08:	080033dc 	.word	0x080033dc
 8002f0c:	0800339c 	.word	0x0800339c

08002f10 <_close_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4c06      	ldr	r4, [pc, #24]	; (8002f2c <_close_r+0x1c>)
 8002f14:	2300      	movs	r3, #0
 8002f16:	4605      	mov	r5, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	f000 f9b4 	bl	8003288 <_close>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_close_r+0x1a>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_close_r+0x1a>
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	200001bc 	.word	0x200001bc

08002f30 <__sflush_r>:
 8002f30:	898a      	ldrh	r2, [r1, #12]
 8002f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f36:	4605      	mov	r5, r0
 8002f38:	0710      	lsls	r0, r2, #28
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	d45a      	bmi.n	8002ff4 <__sflush_r+0xc4>
 8002f3e:	684b      	ldr	r3, [r1, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dc05      	bgt.n	8002f50 <__sflush_r+0x20>
 8002f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dc02      	bgt.n	8002f50 <__sflush_r+0x20>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f52:	2e00      	cmp	r6, #0
 8002f54:	d0f9      	beq.n	8002f4a <__sflush_r+0x1a>
 8002f56:	2300      	movs	r3, #0
 8002f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f5c:	682f      	ldr	r7, [r5, #0]
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	d033      	beq.n	8002fca <__sflush_r+0x9a>
 8002f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	075a      	lsls	r2, r3, #29
 8002f68:	d505      	bpl.n	8002f76 <__sflush_r+0x46>
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	1ac0      	subs	r0, r0, r3
 8002f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f70:	b10b      	cbz	r3, 8002f76 <__sflush_r+0x46>
 8002f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f7c:	6a21      	ldr	r1, [r4, #32]
 8002f7e:	4628      	mov	r0, r5
 8002f80:	47b0      	blx	r6
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	d106      	bne.n	8002f96 <__sflush_r+0x66>
 8002f88:	6829      	ldr	r1, [r5, #0]
 8002f8a:	291d      	cmp	r1, #29
 8002f8c:	d84b      	bhi.n	8003026 <__sflush_r+0xf6>
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	; (800303c <__sflush_r+0x10c>)
 8002f90:	40ca      	lsrs	r2, r1
 8002f92:	07d6      	lsls	r6, r2, #31
 8002f94:	d547      	bpl.n	8003026 <__sflush_r+0xf6>
 8002f96:	2200      	movs	r2, #0
 8002f98:	6062      	str	r2, [r4, #4]
 8002f9a:	04d9      	lsls	r1, r3, #19
 8002f9c:	6922      	ldr	r2, [r4, #16]
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	d504      	bpl.n	8002fac <__sflush_r+0x7c>
 8002fa2:	1c42      	adds	r2, r0, #1
 8002fa4:	d101      	bne.n	8002faa <__sflush_r+0x7a>
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	b903      	cbnz	r3, 8002fac <__sflush_r+0x7c>
 8002faa:	6560      	str	r0, [r4, #84]	; 0x54
 8002fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	d0ca      	beq.n	8002f4a <__sflush_r+0x1a>
 8002fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d002      	beq.n	8002fc2 <__sflush_r+0x92>
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f8e1 	bl	8003184 <_free_r>
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8002fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fca:	6a21      	ldr	r1, [r4, #32]
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4628      	mov	r0, r5
 8002fd0:	47b0      	blx	r6
 8002fd2:	1c41      	adds	r1, r0, #1
 8002fd4:	d1c6      	bne.n	8002f64 <__sflush_r+0x34>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0c3      	beq.n	8002f64 <__sflush_r+0x34>
 8002fdc:	2b1d      	cmp	r3, #29
 8002fde:	d001      	beq.n	8002fe4 <__sflush_r+0xb4>
 8002fe0:	2b16      	cmp	r3, #22
 8002fe2:	d101      	bne.n	8002fe8 <__sflush_r+0xb8>
 8002fe4:	602f      	str	r7, [r5, #0]
 8002fe6:	e7b0      	b.n	8002f4a <__sflush_r+0x1a>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff4:	690f      	ldr	r7, [r1, #16]
 8002ff6:	2f00      	cmp	r7, #0
 8002ff8:	d0a7      	beq.n	8002f4a <__sflush_r+0x1a>
 8002ffa:	0793      	lsls	r3, r2, #30
 8002ffc:	680e      	ldr	r6, [r1, #0]
 8002ffe:	bf08      	it	eq
 8003000:	694b      	ldreq	r3, [r1, #20]
 8003002:	600f      	str	r7, [r1, #0]
 8003004:	bf18      	it	ne
 8003006:	2300      	movne	r3, #0
 8003008:	eba6 0807 	sub.w	r8, r6, r7
 800300c:	608b      	str	r3, [r1, #8]
 800300e:	f1b8 0f00 	cmp.w	r8, #0
 8003012:	dd9a      	ble.n	8002f4a <__sflush_r+0x1a>
 8003014:	4643      	mov	r3, r8
 8003016:	463a      	mov	r2, r7
 8003018:	6a21      	ldr	r1, [r4, #32]
 800301a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800301c:	4628      	mov	r0, r5
 800301e:	47b0      	blx	r6
 8003020:	2800      	cmp	r0, #0
 8003022:	dc07      	bgt.n	8003034 <__sflush_r+0x104>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003034:	4407      	add	r7, r0
 8003036:	eba8 0800 	sub.w	r8, r8, r0
 800303a:	e7e8      	b.n	800300e <__sflush_r+0xde>
 800303c:	20400001 	.word	0x20400001

08003040 <_fflush_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	690b      	ldr	r3, [r1, #16]
 8003044:	4605      	mov	r5, r0
 8003046:	460c      	mov	r4, r1
 8003048:	b1db      	cbz	r3, 8003082 <_fflush_r+0x42>
 800304a:	b118      	cbz	r0, 8003054 <_fflush_r+0x14>
 800304c:	6983      	ldr	r3, [r0, #24]
 800304e:	b90b      	cbnz	r3, 8003054 <_fflush_r+0x14>
 8003050:	f7ff fa72 	bl	8002538 <__sinit>
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <_fflush_r+0x48>)
 8003056:	429c      	cmp	r4, r3
 8003058:	d109      	bne.n	800306e <_fflush_r+0x2e>
 800305a:	686c      	ldr	r4, [r5, #4]
 800305c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003060:	b17b      	cbz	r3, 8003082 <_fflush_r+0x42>
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800306a:	f7ff bf61 	b.w	8002f30 <__sflush_r>
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <_fflush_r+0x4c>)
 8003070:	429c      	cmp	r4, r3
 8003072:	d101      	bne.n	8003078 <_fflush_r+0x38>
 8003074:	68ac      	ldr	r4, [r5, #8]
 8003076:	e7f1      	b.n	800305c <_fflush_r+0x1c>
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <_fflush_r+0x50>)
 800307a:	429c      	cmp	r4, r3
 800307c:	bf08      	it	eq
 800307e:	68ec      	ldreq	r4, [r5, #12]
 8003080:	e7ec      	b.n	800305c <_fflush_r+0x1c>
 8003082:	2000      	movs	r0, #0
 8003084:	bd38      	pop	{r3, r4, r5, pc}
 8003086:	bf00      	nop
 8003088:	080033bc 	.word	0x080033bc
 800308c:	080033dc 	.word	0x080033dc
 8003090:	0800339c 	.word	0x0800339c

08003094 <_lseek_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4c07      	ldr	r4, [pc, #28]	; (80030b4 <_lseek_r+0x20>)
 8003098:	4605      	mov	r5, r0
 800309a:	4608      	mov	r0, r1
 800309c:	4611      	mov	r1, r2
 800309e:	2200      	movs	r2, #0
 80030a0:	6022      	str	r2, [r4, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f908 	bl	80032b8 <_lseek>
 80030a8:	1c43      	adds	r3, r0, #1
 80030aa:	d102      	bne.n	80030b2 <_lseek_r+0x1e>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	b103      	cbz	r3, 80030b2 <_lseek_r+0x1e>
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	200001bc 	.word	0x200001bc

080030b8 <__swhatbuf_r>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	460e      	mov	r6, r1
 80030bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c0:	2900      	cmp	r1, #0
 80030c2:	b090      	sub	sp, #64	; 0x40
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	da07      	bge.n	80030da <__swhatbuf_r+0x22>
 80030ca:	2300      	movs	r3, #0
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	89b3      	ldrh	r3, [r6, #12]
 80030d0:	061a      	lsls	r2, r3, #24
 80030d2:	d410      	bmi.n	80030f6 <__swhatbuf_r+0x3e>
 80030d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d8:	e00e      	b.n	80030f8 <__swhatbuf_r+0x40>
 80030da:	aa01      	add	r2, sp, #4
 80030dc:	f000 f8b2 	bl	8003244 <_fstat_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	dbf2      	blt.n	80030ca <__swhatbuf_r+0x12>
 80030e4:	9a02      	ldr	r2, [sp, #8]
 80030e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030ee:	425a      	negs	r2, r3
 80030f0:	415a      	adcs	r2, r3
 80030f2:	602a      	str	r2, [r5, #0]
 80030f4:	e7ee      	b.n	80030d4 <__swhatbuf_r+0x1c>
 80030f6:	2340      	movs	r3, #64	; 0x40
 80030f8:	2000      	movs	r0, #0
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	b010      	add	sp, #64	; 0x40
 80030fe:	bd70      	pop	{r4, r5, r6, pc}

08003100 <__smakebuf_r>:
 8003100:	898b      	ldrh	r3, [r1, #12]
 8003102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003104:	079d      	lsls	r5, r3, #30
 8003106:	4606      	mov	r6, r0
 8003108:	460c      	mov	r4, r1
 800310a:	d507      	bpl.n	800311c <__smakebuf_r+0x1c>
 800310c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	6123      	str	r3, [r4, #16]
 8003114:	2301      	movs	r3, #1
 8003116:	6163      	str	r3, [r4, #20]
 8003118:	b002      	add	sp, #8
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	ab01      	add	r3, sp, #4
 800311e:	466a      	mov	r2, sp
 8003120:	f7ff ffca 	bl	80030b8 <__swhatbuf_r>
 8003124:	9900      	ldr	r1, [sp, #0]
 8003126:	4605      	mov	r5, r0
 8003128:	4630      	mov	r0, r6
 800312a:	f7ff fa97 	bl	800265c <_malloc_r>
 800312e:	b948      	cbnz	r0, 8003144 <__smakebuf_r+0x44>
 8003130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003134:	059a      	lsls	r2, r3, #22
 8003136:	d4ef      	bmi.n	8003118 <__smakebuf_r+0x18>
 8003138:	f023 0303 	bic.w	r3, r3, #3
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	81a3      	strh	r3, [r4, #12]
 8003142:	e7e3      	b.n	800310c <__smakebuf_r+0xc>
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <__smakebuf_r+0x7c>)
 8003146:	62b3      	str	r3, [r6, #40]	; 0x28
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	6020      	str	r0, [r4, #0]
 800314c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	9b00      	ldr	r3, [sp, #0]
 8003154:	6163      	str	r3, [r4, #20]
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	6120      	str	r0, [r4, #16]
 800315a:	b15b      	cbz	r3, 8003174 <__smakebuf_r+0x74>
 800315c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003160:	4630      	mov	r0, r6
 8003162:	f000 f881 	bl	8003268 <_isatty_r>
 8003166:	b128      	cbz	r0, 8003174 <__smakebuf_r+0x74>
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	81a3      	strh	r3, [r4, #12]
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	431d      	orrs	r5, r3
 8003178:	81a5      	strh	r5, [r4, #12]
 800317a:	e7cd      	b.n	8003118 <__smakebuf_r+0x18>
 800317c:	080024b9 	.word	0x080024b9

08003180 <__malloc_lock>:
 8003180:	4770      	bx	lr

08003182 <__malloc_unlock>:
 8003182:	4770      	bx	lr

08003184 <_free_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	4605      	mov	r5, r0
 8003188:	2900      	cmp	r1, #0
 800318a:	d045      	beq.n	8003218 <_free_r+0x94>
 800318c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003190:	1f0c      	subs	r4, r1, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	bfb8      	it	lt
 8003196:	18e4      	addlt	r4, r4, r3
 8003198:	f7ff fff2 	bl	8003180 <__malloc_lock>
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <_free_r+0x98>)
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	b933      	cbnz	r3, 80031b2 <_free_r+0x2e>
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	6014      	str	r4, [r2, #0]
 80031a8:	4628      	mov	r0, r5
 80031aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ae:	f7ff bfe8 	b.w	8003182 <__malloc_unlock>
 80031b2:	42a3      	cmp	r3, r4
 80031b4:	d90c      	bls.n	80031d0 <_free_r+0x4c>
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	1862      	adds	r2, r4, r1
 80031ba:	4293      	cmp	r3, r2
 80031bc:	bf04      	itt	eq
 80031be:	681a      	ldreq	r2, [r3, #0]
 80031c0:	685b      	ldreq	r3, [r3, #4]
 80031c2:	6063      	str	r3, [r4, #4]
 80031c4:	bf04      	itt	eq
 80031c6:	1852      	addeq	r2, r2, r1
 80031c8:	6022      	streq	r2, [r4, #0]
 80031ca:	6004      	str	r4, [r0, #0]
 80031cc:	e7ec      	b.n	80031a8 <_free_r+0x24>
 80031ce:	4613      	mov	r3, r2
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	b10a      	cbz	r2, 80031d8 <_free_r+0x54>
 80031d4:	42a2      	cmp	r2, r4
 80031d6:	d9fa      	bls.n	80031ce <_free_r+0x4a>
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	1858      	adds	r0, r3, r1
 80031dc:	42a0      	cmp	r0, r4
 80031de:	d10b      	bne.n	80031f8 <_free_r+0x74>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	4401      	add	r1, r0
 80031e4:	1858      	adds	r0, r3, r1
 80031e6:	4282      	cmp	r2, r0
 80031e8:	6019      	str	r1, [r3, #0]
 80031ea:	d1dd      	bne.n	80031a8 <_free_r+0x24>
 80031ec:	6810      	ldr	r0, [r2, #0]
 80031ee:	6852      	ldr	r2, [r2, #4]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	4401      	add	r1, r0
 80031f4:	6019      	str	r1, [r3, #0]
 80031f6:	e7d7      	b.n	80031a8 <_free_r+0x24>
 80031f8:	d902      	bls.n	8003200 <_free_r+0x7c>
 80031fa:	230c      	movs	r3, #12
 80031fc:	602b      	str	r3, [r5, #0]
 80031fe:	e7d3      	b.n	80031a8 <_free_r+0x24>
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	1821      	adds	r1, r4, r0
 8003204:	428a      	cmp	r2, r1
 8003206:	bf04      	itt	eq
 8003208:	6811      	ldreq	r1, [r2, #0]
 800320a:	6852      	ldreq	r2, [r2, #4]
 800320c:	6062      	str	r2, [r4, #4]
 800320e:	bf04      	itt	eq
 8003210:	1809      	addeq	r1, r1, r0
 8003212:	6021      	streq	r1, [r4, #0]
 8003214:	605c      	str	r4, [r3, #4]
 8003216:	e7c7      	b.n	80031a8 <_free_r+0x24>
 8003218:	bd38      	pop	{r3, r4, r5, pc}
 800321a:	bf00      	nop
 800321c:	20000084 	.word	0x20000084

08003220 <_read_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4c07      	ldr	r4, [pc, #28]	; (8003240 <_read_r+0x20>)
 8003224:	4605      	mov	r5, r0
 8003226:	4608      	mov	r0, r1
 8003228:	4611      	mov	r1, r2
 800322a:	2200      	movs	r2, #0
 800322c:	6022      	str	r2, [r4, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	f000 f84a 	bl	80032c8 <_read>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_read_r+0x1e>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	b103      	cbz	r3, 800323e <_read_r+0x1e>
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	200001bc 	.word	0x200001bc

08003244 <_fstat_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4c07      	ldr	r4, [pc, #28]	; (8003264 <_fstat_r+0x20>)
 8003248:	2300      	movs	r3, #0
 800324a:	4605      	mov	r5, r0
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	f000 f821 	bl	8003298 <_fstat>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	d102      	bne.n	8003260 <_fstat_r+0x1c>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	b103      	cbz	r3, 8003260 <_fstat_r+0x1c>
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	bd38      	pop	{r3, r4, r5, pc}
 8003262:	bf00      	nop
 8003264:	200001bc 	.word	0x200001bc

08003268 <_isatty_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4c06      	ldr	r4, [pc, #24]	; (8003284 <_isatty_r+0x1c>)
 800326c:	2300      	movs	r3, #0
 800326e:	4605      	mov	r5, r0
 8003270:	4608      	mov	r0, r1
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	f000 f818 	bl	80032a8 <_isatty>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_isatty_r+0x1a>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	b103      	cbz	r3, 8003282 <_isatty_r+0x1a>
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	200001bc 	.word	0x200001bc

08003288 <_close>:
 8003288:	4b02      	ldr	r3, [pc, #8]	; (8003294 <_close+0xc>)
 800328a:	2258      	movs	r2, #88	; 0x58
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	4770      	bx	lr
 8003294:	200001bc 	.word	0x200001bc

08003298 <_fstat>:
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <_fstat+0xc>)
 800329a:	2258      	movs	r2, #88	; 0x58
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	4770      	bx	lr
 80032a4:	200001bc 	.word	0x200001bc

080032a8 <_isatty>:
 80032a8:	4b02      	ldr	r3, [pc, #8]	; (80032b4 <_isatty+0xc>)
 80032aa:	2258      	movs	r2, #88	; 0x58
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	2000      	movs	r0, #0
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	200001bc 	.word	0x200001bc

080032b8 <_lseek>:
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <_lseek+0xc>)
 80032ba:	2258      	movs	r2, #88	; 0x58
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f04f 30ff 	mov.w	r0, #4294967295
 80032c2:	4770      	bx	lr
 80032c4:	200001bc 	.word	0x200001bc

080032c8 <_read>:
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <_read+0xc>)
 80032ca:	2258      	movs	r2, #88	; 0x58
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f04f 30ff 	mov.w	r0, #4294967295
 80032d2:	4770      	bx	lr
 80032d4:	200001bc 	.word	0x200001bc

080032d8 <_sbrk>:
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <_sbrk+0x14>)
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	4602      	mov	r2, r0
 80032de:	b909      	cbnz	r1, 80032e4 <_sbrk+0xc>
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <_sbrk+0x18>)
 80032e2:	6019      	str	r1, [r3, #0]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	4402      	add	r2, r0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4770      	bx	lr
 80032ec:	2000008c 	.word	0x2000008c
 80032f0:	200001c0 	.word	0x200001c0

080032f4 <_write>:
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <_write+0xc>)
 80032f6:	2258      	movs	r2, #88	; 0x58
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	4770      	bx	lr
 8003300:	200001bc 	.word	0x200001bc

08003304 <_init>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	bf00      	nop
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr

08003310 <_fini>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr
