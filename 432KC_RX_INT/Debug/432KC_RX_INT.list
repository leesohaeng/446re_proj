
432KC_RX_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001f2c  08001f2c  00011f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001f88  08001f88  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000009c  20000004  08001f9c  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a0  08001f9c  000200a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011f71  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002560  00000000  00000000  00031fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000417b  00000000  00000000  00034505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000818  00000000  00000000  00038680  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000938  00000000  00000000  00038e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a34  00000000  00000000  000397d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000339f  00000000  00000000  0003e204  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000415a3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000013c4  00000000  00000000  00041620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001f14 	.word	0x08001f14

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08001f14 	.word	0x08001f14

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97a 	b.w	80004d8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9e08      	ldr	r6, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d151      	bne.n	80002b0 <__udivmoddi4+0xb4>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96d      	bls.n	80002ee <__udivmoddi4+0xf2>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0c20 	rsb	ip, lr, #32
 8000220:	fa01 f50e 	lsl.w	r5, r1, lr
 8000224:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000238:	0c25      	lsrs	r5, r4, #16
 800023a:	fbbc f8fa 	udiv	r8, ip, sl
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb0a cc18 	mls	ip, sl, r8, ip
 8000246:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024a:	fb08 f309 	mul.w	r3, r8, r9
 800024e:	42ab      	cmp	r3, r5
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x6c>
 8000252:	19ed      	adds	r5, r5, r7
 8000254:	f108 32ff 	add.w	r2, r8, #4294967295
 8000258:	f080 8123 	bcs.w	80004a2 <__udivmoddi4+0x2a6>
 800025c:	42ab      	cmp	r3, r5
 800025e:	f240 8120 	bls.w	80004a2 <__udivmoddi4+0x2a6>
 8000262:	f1a8 0802 	sub.w	r8, r8, #2
 8000266:	443d      	add	r5, r7
 8000268:	1aed      	subs	r5, r5, r3
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000270:	fb0a 5510 	mls	r5, sl, r0, r5
 8000274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000278:	fb00 f909 	mul.w	r9, r0, r9
 800027c:	45a1      	cmp	r9, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x98>
 8000280:	19e4      	adds	r4, r4, r7
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 810a 	bcs.w	800049e <__udivmoddi4+0x2a2>
 800028a:	45a1      	cmp	r9, r4
 800028c:	f240 8107 	bls.w	800049e <__udivmoddi4+0x2a2>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	eba4 0409 	sub.w	r4, r4, r9
 8000298:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d061      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a6:	2300      	movs	r3, #0
 80002a8:	6034      	str	r4, [r6, #0]
 80002aa:	6073      	str	r3, [r6, #4]
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0xc8>
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d054      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e886 0021 	stmia.w	r6, {r0, r5}
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	f040 808e 	bne.w	80003ea <__udivmoddi4+0x1ee>
 80002ce:	42ab      	cmp	r3, r5
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xdc>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2d0>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb65 0503 	sbc.w	r5, r5, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	46ac      	mov	ip, r5
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d03f      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b912      	cbnz	r2, 80002f6 <__udivmoddi4+0xfa>
 80002f0:	2701      	movs	r7, #1
 80002f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f6:	fab7 fe87 	clz	lr, r7
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d134      	bne.n	800036a <__udivmoddi4+0x16e>
 8000300:	1beb      	subs	r3, r5, r7
 8000302:	0c3a      	lsrs	r2, r7, #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f8f2 	udiv	r8, r3, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	fb02 3318 	mls	r3, r2, r8, r3
 8000314:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000318:	fb0c f308 	mul.w	r3, ip, r8
 800031c:	42ab      	cmp	r3, r5
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19ed      	adds	r5, r5, r7
 8000322:	f108 30ff 	add.w	r0, r8, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42ab      	cmp	r3, r5
 800032a:	f200 80d1 	bhi.w	80004d0 <__udivmoddi4+0x2d4>
 800032e:	4680      	mov	r8, r0
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb5 f0f2 	udiv	r0, r5, r2
 8000338:	fb02 5510 	mls	r5, r2, r0, r5
 800033c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000340:	fb0c fc00 	mul.w	ip, ip, r0
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 040c 	sub.w	r4, r4, ip
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	e79d      	b.n	800029e <__udivmoddi4+0xa2>
 8000362:	4631      	mov	r1, r6
 8000364:	4630      	mov	r0, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0420 	rsb	r4, lr, #32
 800036e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f804 	lsr.w	r8, r0, r4
 800037a:	0c3a      	lsrs	r2, r7, #16
 800037c:	fa25 f404 	lsr.w	r4, r5, r4
 8000380:	ea48 0803 	orr.w	r8, r8, r3
 8000384:	fbb4 f1f2 	udiv	r1, r4, r2
 8000388:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800038c:	fb02 4411 	mls	r4, r2, r1, r4
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000398:	fb01 f30c 	mul.w	r3, r1, ip
 800039c:	42ab      	cmp	r3, r5
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1bc>
 80003a4:	19ed      	adds	r5, r5, r7
 80003a6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003aa:	f080 808a 	bcs.w	80004c2 <__udivmoddi4+0x2c6>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	f240 8087 	bls.w	80004c2 <__udivmoddi4+0x2c6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	1aeb      	subs	r3, r5, r3
 80003ba:	fa1f f588 	uxth.w	r5, r8
 80003be:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c2:	fb02 3310 	mls	r3, r2, r0, r3
 80003c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ca:	fb00 f30c 	mul.w	r3, r0, ip
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1e6>
 80003d2:	19ed      	adds	r5, r5, r7
 80003d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d8:	d26f      	bcs.n	80004ba <__udivmoddi4+0x2be>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0x2be>
 80003de:	3802      	subs	r0, #2
 80003e0:	443d      	add	r5, r7
 80003e2:	1aeb      	subs	r3, r5, r3
 80003e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e8:	e78f      	b.n	800030a <__udivmoddi4+0x10e>
 80003ea:	f1c1 0720 	rsb	r7, r1, #32
 80003ee:	fa22 f807 	lsr.w	r8, r2, r7
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa05 f401 	lsl.w	r4, r5, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	40fd      	lsrs	r5, r7
 8000406:	ea4e 0e04 	orr.w	lr, lr, r4
 800040a:	fbb5 f9fc 	udiv	r9, r5, ip
 800040e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000412:	fb0c 5519 	mls	r5, ip, r9, r5
 8000416:	fa1f f883 	uxth.w	r8, r3
 800041a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041e:	fb09 f408 	mul.w	r4, r9, r8
 8000422:	42ac      	cmp	r4, r5
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 fa01 	lsl.w	sl, r0, r1
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x244>
 800042e:	18ed      	adds	r5, r5, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d243      	bcs.n	80004be <__udivmoddi4+0x2c2>
 8000436:	42ac      	cmp	r4, r5
 8000438:	d941      	bls.n	80004be <__udivmoddi4+0x2c2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	441d      	add	r5, r3
 8000440:	1b2d      	subs	r5, r5, r4
 8000442:	fa1f fe8e 	uxth.w	lr, lr
 8000446:	fbb5 f0fc 	udiv	r0, r5, ip
 800044a:	fb0c 5510 	mls	r5, ip, r0, r5
 800044e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45a0      	cmp	r8, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26e>
 800045a:	18e4      	adds	r4, r4, r3
 800045c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000460:	d229      	bcs.n	80004b6 <__udivmoddi4+0x2ba>
 8000462:	45a0      	cmp	r8, r4
 8000464:	d927      	bls.n	80004b6 <__udivmoddi4+0x2ba>
 8000466:	3802      	subs	r0, #2
 8000468:	441c      	add	r4, r3
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454c      	cmp	r4, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	464d      	mov	r5, r9
 800047c:	d315      	bcc.n	80004aa <__udivmoddi4+0x2ae>
 800047e:	d012      	beq.n	80004a6 <__udivmoddi4+0x2aa>
 8000480:	b156      	cbz	r6, 8000498 <__udivmoddi4+0x29c>
 8000482:	ebba 030e 	subs.w	r3, sl, lr
 8000486:	eb64 0405 	sbc.w	r4, r4, r5
 800048a:	fa04 f707 	lsl.w	r7, r4, r7
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	6037      	str	r7, [r6, #0]
 8000496:	6074      	str	r4, [r6, #4]
 8000498:	2100      	movs	r1, #0
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	4618      	mov	r0, r3
 80004a0:	e6f8      	b.n	8000294 <__udivmoddi4+0x98>
 80004a2:	4690      	mov	r8, r2
 80004a4:	e6e0      	b.n	8000268 <__udivmoddi4+0x6c>
 80004a6:	45c2      	cmp	sl, r8
 80004a8:	d2ea      	bcs.n	8000480 <__udivmoddi4+0x284>
 80004aa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ae:	eb69 0503 	sbc.w	r5, r9, r3
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7e4      	b.n	8000480 <__udivmoddi4+0x284>
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7d7      	b.n	800046a <__udivmoddi4+0x26e>
 80004ba:	4640      	mov	r0, r8
 80004bc:	e791      	b.n	80003e2 <__udivmoddi4+0x1e6>
 80004be:	4681      	mov	r9, r0
 80004c0:	e7be      	b.n	8000440 <__udivmoddi4+0x244>
 80004c2:	4601      	mov	r1, r0
 80004c4:	e778      	b.n	80003b8 <__udivmoddi4+0x1bc>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	e745      	b.n	8000358 <__udivmoddi4+0x15c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004d0:	f1a8 0802 	sub.w	r8, r8, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	e72b      	b.n	8000330 <__udivmoddi4+0x134>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_InitTick+0x24>)
{
 80004e0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f876 	bl	80005dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	4621      	mov	r1, r4
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f830 	bl	800055c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004fc:	2000      	movs	r0, #0
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	20000000 	.word	0x20000000

08000504 <HAL_Init>:
{
 8000504:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	2003      	movs	r0, #3
 8000508:	f000 f816 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff ffe5 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000512:	f001 fc01 	bl	8001d18 <HAL_MspInit>
}
 8000516:	2000      	movs	r0, #0
 8000518:	bd08      	pop	{r3, pc}
	...

0800051c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800051c:	4a02      	ldr	r2, [pc, #8]	; (8000528 <HAL_IncTick+0xc>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000020 	.word	0x20000020

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000020 	.word	0x20000020

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfaf      	iteee	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
 80005a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	bfa5      	ittet	ge
 80005ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005c4:	0942      	lsrs	r2, r0, #5
 80005c6:	2301      	movs	r3, #1
 80005c8:	f000 001f 	and.w	r0, r0, #31
 80005cc:	fa03 f000 	lsl.w	r0, r3, r0
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_NVIC_EnableIRQ+0x14>)
 80005d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100

080005dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	3801      	subs	r0, #1
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d20a      	bcs.n	80005fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800060c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060e:	bf0c      	ite	eq
 8000610:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000614:	f022 0204 	bicne.w	r2, r2, #4
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	4770      	bx	lr
 800061c:	e000e010 	.word	0xe000e010

08000620 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000620:	4770      	bx	lr

08000622 <HAL_SYSTICK_IRQHandler>:
{
 8000622:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000624:	f7ff fffc 	bl	8000620 <HAL_SYSTICK_Callback>
 8000628:	bd08      	pop	{r3, pc}

0800062a <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800062a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800062e:	2a02      	cmp	r2, #2
{
 8000630:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000632:	d003      	beq.n	800063c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000634:	2204      	movs	r2, #4
 8000636:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000638:	2001      	movs	r0, #1
 800063a:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800063c:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800063e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000640:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000642:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000644:	f021 010e 	bic.w	r1, r1, #14
 8000648:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	f021 0101 	bic.w	r1, r1, #1
 8000650:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000652:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800065c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800065e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000662:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000666:	b113      	cbz	r3, 800066e <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000668:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800066a:	4620      	mov	r0, r4
 800066c:	bd10      	pop	{r4, pc}
 800066e:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8000670:	bd10      	pop	{r4, pc}
	...

08000674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000678:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800067a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80007d8 <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000680:	4a53      	ldr	r2, [pc, #332]	; (80007d0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000682:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000684:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 8000688:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800068a:	9c01      	ldr	r4, [sp, #4]
 800068c:	40dc      	lsrs	r4, r3
 800068e:	d102      	bne.n	8000696 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000690:	b005      	add	sp, #20
 8000692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000696:	2401      	movs	r4, #1
 8000698:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800069c:	9c01      	ldr	r4, [sp, #4]
 800069e:	ea14 050a 	ands.w	r5, r4, sl
 80006a2:	f000 808f 	beq.w	80007c4 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006a6:	684c      	ldr	r4, [r1, #4]
 80006a8:	f024 0b10 	bic.w	fp, r4, #16
 80006ac:	f1bb 0f02 	cmp.w	fp, #2
 80006b0:	d111      	bne.n	80006d6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006b2:	08df      	lsrs	r7, r3, #3
 80006b4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006b8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80006bc:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80006c2:	fa09 fc0e 	lsl.w	ip, r9, lr
 80006c6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006ca:	690e      	ldr	r6, [r1, #16]
 80006cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80006d4:	623e      	str	r6, [r7, #32]
 80006d6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006da:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80006dc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006de:	fa07 f70c 	lsl.w	r7, r7, ip
 80006e2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006e4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006ea:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ee:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006f2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fc:	d811      	bhi.n	8000722 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80006fe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000700:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000704:	68ce      	ldr	r6, [r1, #12]
 8000706:	fa06 fe0c 	lsl.w	lr, r6, ip
 800070a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800070e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000710:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000712:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000716:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800071a:	409e      	lsls	r6, r3
 800071c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000720:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000722:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000724:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000726:	688e      	ldr	r6, [r1, #8]
 8000728:	fa06 f60c 	lsl.w	r6, r6, ip
 800072c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800072e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000730:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000732:	d547      	bpl.n	80007c4 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000734:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000738:	f046 0601 	orr.w	r6, r6, #1
 800073c:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8000740:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000744:	f023 0703 	bic.w	r7, r3, #3
 8000748:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800074c:	f006 0601 	and.w	r6, r6, #1
 8000750:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000754:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000756:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800075c:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800075e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000762:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000766:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800076a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800076e:	d02b      	beq.n	80007c8 <HAL_GPIO_Init+0x154>
 8000770:	4e18      	ldr	r6, [pc, #96]	; (80007d4 <HAL_GPIO_Init+0x160>)
 8000772:	42b0      	cmp	r0, r6
 8000774:	d02a      	beq.n	80007cc <HAL_GPIO_Init+0x158>
 8000776:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800077a:	42b0      	cmp	r0, r6
 800077c:	bf14      	ite	ne
 800077e:	2607      	movne	r6, #7
 8000780:	2602      	moveq	r6, #2
 8000782:	fa06 f60e 	lsl.w	r6, r6, lr
 8000786:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800078a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800078c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800078e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000790:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000794:	bf0c      	ite	eq
 8000796:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000798:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800079a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 800079c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007a2:	bf0c      	ite	eq
 80007a4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80007a6:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 80007a8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 80007aa:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007b0:	bf0c      	ite	eq
 80007b2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80007b4:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80007b6:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80007b8:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ba:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007bc:	bf54      	ite	pl
 80007be:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80007c0:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80007c2:	60d6      	str	r6, [r2, #12]
    position++;
 80007c4:	3301      	adds	r3, #1
 80007c6:	e760      	b.n	800068a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007c8:	2600      	movs	r6, #0
 80007ca:	e7da      	b.n	8000782 <HAL_GPIO_Init+0x10e>
 80007cc:	2601      	movs	r6, #1
 80007ce:	e7d8      	b.n	8000782 <HAL_GPIO_Init+0x10e>
 80007d0:	40010400 	.word	0x40010400
 80007d4:	48000400 	.word	0x48000400
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007dc:	b10a      	cbz	r2, 80007e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007de:	6181      	str	r1, [r0, #24]
 80007e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e2:	6281      	str	r1, [r0, #40]	; 0x28
 80007e4:	4770      	bx	lr

080007e6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007e6:	6943      	ldr	r3, [r0, #20]
 80007e8:	4059      	eors	r1, r3
 80007ea:	6141      	str	r1, [r0, #20]
 80007ec:	4770      	bx	lr
	...

080007f0 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <HAL_PWR_EnableBkUpAccess+0xc>)
 80007f2:	6813      	ldr	r3, [r2, #0]
 80007f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4770      	bx	lr
 80007fc:	40007000 	.word	0x40007000

08000800 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <HAL_PWREx_GetVoltageRange+0xc>)
 8000802:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000804:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40007000 	.word	0x40007000

08000810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000812:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000814:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000818:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800081c:	d11a      	bne.n	8000854 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800081e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000822:	d013      	beq.n	800084c <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000826:	4912      	ldr	r1, [pc, #72]	; (8000870 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800082c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000830:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	fbb2 f1f1 	udiv	r1, r2, r1
 800083a:	2232      	movs	r2, #50	; 0x32
 800083c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800083e:	b112      	cbz	r2, 8000846 <HAL_PWREx_ControlVoltageScaling+0x36>
 8000840:	6959      	ldr	r1, [r3, #20]
 8000842:	0549      	lsls	r1, r1, #21
 8000844:	d404      	bmi.n	8000850 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	055b      	lsls	r3, r3, #21
 800084a:	d40d      	bmi.n	8000868 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 800084c:	2000      	movs	r0, #0
 800084e:	4770      	bx	lr
        wait_loop_index--;
 8000850:	3a01      	subs	r2, #1
 8000852:	e7f4      	b.n	800083e <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000854:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000858:	bf1f      	itttt	ne
 800085a:	681a      	ldrne	r2, [r3, #0]
 800085c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000860:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000864:	601a      	strne	r2, [r3, #0]
 8000866:	e7f1      	b.n	800084c <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8000868:	2003      	movs	r0, #3
}  
 800086a:	4770      	bx	lr
 800086c:	40007000 	.word	0x40007000
 8000870:	000f4240 	.word	0x000f4240
 8000874:	20000000 	.word	0x20000000

08000878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000878:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800087a:	4d1e      	ldr	r5, [pc, #120]	; (80008f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800087c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800087e:	00da      	lsls	r2, r3, #3
{
 8000880:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000882:	d518      	bpl.n	80008b6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000884:	f7ff ffbc 	bl	8000800 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000888:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800088c:	d123      	bne.n	80008d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800088e:	2c80      	cmp	r4, #128	; 0x80
 8000890:	d929      	bls.n	80008e6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000892:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000894:	bf8c      	ite	hi
 8000896:	2002      	movhi	r0, #2
 8000898:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800089c:	6813      	ldr	r3, [r2, #0]
 800089e:	f023 0307 	bic.w	r3, r3, #7
 80008a2:	4303      	orrs	r3, r0
 80008a4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80008ac:	1a18      	subs	r0, r3, r0
 80008ae:	bf18      	it	ne
 80008b0:	2001      	movne	r0, #1
 80008b2:	b003      	add	sp, #12
 80008b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	65ab      	str	r3, [r5, #88]	; 0x58
 80008be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80008c8:	f7ff ff9a 	bl	8000800 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80008cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80008d4:	e7d8      	b.n	8000888 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80008d6:	2c80      	cmp	r4, #128	; 0x80
 80008d8:	d807      	bhi.n	80008ea <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80008da:	d008      	beq.n	80008ee <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80008dc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008e0:	4258      	negs	r0, r3
 80008e2:	4158      	adcs	r0, r3
 80008e4:	e7d9      	b.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008e6:	2000      	movs	r0, #0
 80008e8:	e7d7      	b.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008ea:	2003      	movs	r0, #3
 80008ec:	e7d5      	b.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008ee:	2002      	movs	r0, #2
 80008f0:	e7d3      	b.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_RCC_GetSysClockFreq+0xc0>)
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	f012 0f0c 	tst.w	r2, #12
{
 8000904:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000906:	d009      	beq.n	800091c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800090e:	2a0c      	cmp	r2, #12
 8000910:	d12d      	bne.n	800096e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	f002 0203 	and.w	r2, r2, #3
 8000918:	2a01      	cmp	r2, #1
 800091a:	d128      	bne.n	800096e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800091c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800091e:	4928      	ldr	r1, [pc, #160]	; (80009c0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000920:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000922:	bf55      	itete	pl
 8000924:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000928:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800092a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800092e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000936:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8000938:	f011 0f0c 	tst.w	r1, #12
 800093c:	bf0c      	ite	eq
 800093e:	4610      	moveq	r0, r2
 8000940:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000942:	6899      	ldr	r1, [r3, #8]
 8000944:	f001 010c 	and.w	r1, r1, #12
 8000948:	290c      	cmp	r1, #12
 800094a:	d130      	bne.n	80009ae <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800094c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800094e:	68d8      	ldr	r0, [r3, #12]
 8000950:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000954:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000956:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800095a:	2802      	cmp	r0, #2
 800095c:	d019      	beq.n	8000992 <HAL_RCC_GetSysClockFreq+0x96>
 800095e:	2803      	cmp	r0, #3
 8000960:	d026      	beq.n	80009b0 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000962:	fbb2 f2f1 	udiv	r2, r2, r1
 8000966:	68d8      	ldr	r0, [r3, #12]
 8000968:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800096c:	e017      	b.n	800099e <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	f002 020c 	and.w	r2, r2, #12
 8000974:	2a04      	cmp	r2, #4
 8000976:	d007      	beq.n	8000988 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	f002 020c 	and.w	r2, r2, #12
 800097e:	2a08      	cmp	r2, #8
 8000980:	d104      	bne.n	800098c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000984:	2200      	movs	r2, #0
 8000986:	e7dc      	b.n	8000942 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800098a:	e7fb      	b.n	8000984 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800098c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800098e:	4602      	mov	r2, r0
 8000990:	e7d7      	b.n	8000942 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000996:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800099a:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80009a4:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009a6:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80009a8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80009aa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80009ae:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80009b4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80009b8:	e7ef      	b.n	800099a <HAL_RCC_GetSysClockFreq+0x9e>
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	08001f58 	.word	0x08001f58
 80009c4:	007a1200 	.word	0x007a1200
 80009c8:	00f42400 	.word	0x00f42400

080009cc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009cc:	6803      	ldr	r3, [r0, #0]
{
 80009ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80009d2:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009d4:	06d8      	lsls	r0, r3, #27
 80009d6:	d539      	bpl.n	8000a4c <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80009d8:	4cab      	ldr	r4, [pc, #684]	; (8000c88 <HAL_RCC_OscConfig+0x2bc>)
 80009da:	68a3      	ldr	r3, [r4, #8]
 80009dc:	f013 0f0c 	tst.w	r3, #12
 80009e0:	d162      	bne.n	8000aa8 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	0799      	lsls	r1, r3, #30
 80009e6:	d503      	bpl.n	80009f0 <HAL_RCC_OscConfig+0x24>
 80009e8:	69ab      	ldr	r3, [r5, #24]
 80009ea:	b90b      	cbnz	r3, 80009f0 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
 80009ee:	e07f      	b.n	8000af0 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	6a28      	ldr	r0, [r5, #32]
 80009f4:	071a      	lsls	r2, r3, #28
 80009f6:	bf56      	itet	pl
 80009f8:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009fc:	6823      	ldrmi	r3, [r4, #0]
 80009fe:	091b      	lsrpl	r3, r3, #4
 8000a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a04:	4283      	cmp	r3, r0
 8000a06:	d23a      	bcs.n	8000a7e <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a08:	f7ff ff36 	bl	8000878 <RCC_SetFlashLatencyFromMSIRange>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d1ed      	bne.n	80009ec <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6023      	str	r3, [r4, #0]
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	6a2a      	ldr	r2, [r5, #32]
 8000a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a20:	4313      	orrs	r3, r2
 8000a22:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a24:	6863      	ldr	r3, [r4, #4]
 8000a26:	69ea      	ldr	r2, [r5, #28]
 8000a28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a30:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000a32:	f7ff ff63 	bl	80008fc <HAL_RCC_GetSysClockFreq>
 8000a36:	68a3      	ldr	r3, [r4, #8]
 8000a38:	4a94      	ldr	r2, [pc, #592]	; (8000c8c <HAL_RCC_OscConfig+0x2c0>)
 8000a3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	40d8      	lsrs	r0, r3
 8000a42:	4b93      	ldr	r3, [pc, #588]	; (8000c90 <HAL_RCC_OscConfig+0x2c4>)
 8000a44:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fd48 	bl	80004dc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	07d8      	lsls	r0, r3, #31
 8000a50:	d461      	bmi.n	8000b16 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	0799      	lsls	r1, r3, #30
 8000a56:	f100 80a9 	bmi.w	8000bac <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5a:	682b      	ldr	r3, [r5, #0]
 8000a5c:	071a      	lsls	r2, r3, #28
 8000a5e:	f100 80e7 	bmi.w	8000c30 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	f100 8115 	bmi.w	8000c94 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	069a      	lsls	r2, r3, #26
 8000a6e:	f100 817c 	bmi.w	8000d6a <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 81a3 	bne.w	8000dc0 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e038      	b.n	8000af0 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6023      	str	r3, [r4, #0]
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a8c:	4303      	orrs	r3, r0
 8000a8e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a90:	6863      	ldr	r3, [r4, #4]
 8000a92:	69ea      	ldr	r2, [r5, #28]
 8000a94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a9c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a9e:	f7ff feeb 	bl	8000878 <RCC_SetFlashLatencyFromMSIRange>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d0c5      	beq.n	8000a32 <HAL_RCC_OscConfig+0x66>
 8000aa6:	e7a1      	b.n	80009ec <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aa8:	69ab      	ldr	r3, [r5, #24]
 8000aaa:	b323      	cbz	r3, 8000af6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ab4:	f7ff fd3a 	bl	800052c <HAL_GetTick>
 8000ab8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	079b      	lsls	r3, r3, #30
 8000abe:	d511      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6023      	str	r3, [r4, #0]
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	6a2a      	ldr	r2, [r5, #32]
 8000acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	69ea      	ldr	r2, [r5, #28]
 8000ad8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ae0:	6063      	str	r3, [r4, #4]
 8000ae2:	e7b3      	b.n	8000a4c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fd22 	bl	800052c <HAL_GetTick>
 8000ae8:	1b80      	subs	r0, r0, r6
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9e5      	bls.n	8000aba <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8000aee:	2003      	movs	r0, #3
}
 8000af0:	b002      	add	sp, #8
 8000af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000afe:	f7ff fd15 	bl	800052c <HAL_GetTick>
 8000b02:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	079f      	lsls	r7, r3, #30
 8000b08:	d5a0      	bpl.n	8000a4c <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b0a:	f7ff fd0f 	bl	800052c <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f7      	bls.n	8000b04 <HAL_RCC_OscConfig+0x138>
 8000b14:	e7eb      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b16:	4c5c      	ldr	r4, [pc, #368]	; (8000c88 <HAL_RCC_OscConfig+0x2bc>)
 8000b18:	68a3      	ldr	r3, [r4, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d009      	beq.n	8000b36 <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b22:	68a3      	ldr	r3, [r4, #8]
 8000b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d10b      	bne.n	8000b44 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b2c:	68e3      	ldr	r3, [r4, #12]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d106      	bne.n	8000b44 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	039a      	lsls	r2, r3, #14
 8000b3a:	d58a      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x86>
 8000b3c:	686b      	ldr	r3, [r5, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d187      	bne.n	8000a52 <HAL_RCC_OscConfig+0x86>
 8000b42:	e753      	b.n	80009ec <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b44:	686b      	ldr	r3, [r5, #4]
 8000b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4a:	d110      	bne.n	8000b6e <HAL_RCC_OscConfig+0x1a2>
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b54:	f7ff fcea 	bl	800052c <HAL_GetTick>
 8000b58:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	039b      	lsls	r3, r3, #14
 8000b5e:	f53f af78 	bmi.w	8000a52 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b62:	f7ff fce3 	bl	800052c <HAL_GetTick>
 8000b66:	1b80      	subs	r0, r0, r6
 8000b68:	2864      	cmp	r0, #100	; 0x64
 8000b6a:	d9f6      	bls.n	8000b5a <HAL_RCC_OscConfig+0x18e>
 8000b6c:	e7bf      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b72:	d104      	bne.n	8000b7e <HAL_RCC_OscConfig+0x1b2>
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7a:	6023      	str	r3, [r4, #0]
 8000b7c:	e7e6      	b.n	8000b4c <HAL_RCC_OscConfig+0x180>
 8000b7e:	6822      	ldr	r2, [r4, #0]
 8000b80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b84:	6022      	str	r2, [r4, #0]
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b8c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1e0      	bne.n	8000b54 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8000b92:	f7ff fccb 	bl	800052c <HAL_GetTick>
 8000b96:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	039f      	lsls	r7, r3, #14
 8000b9c:	f57f af59 	bpl.w	8000a52 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fcc4 	bl	800052c <HAL_GetTick>
 8000ba4:	1b80      	subs	r0, r0, r6
 8000ba6:	2864      	cmp	r0, #100	; 0x64
 8000ba8:	d9f6      	bls.n	8000b98 <HAL_RCC_OscConfig+0x1cc>
 8000baa:	e7a0      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bac:	4c36      	ldr	r4, [pc, #216]	; (8000c88 <HAL_RCC_OscConfig+0x2bc>)
 8000bae:	68a3      	ldr	r3, [r4, #8]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d009      	beq.n	8000bcc <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bb8:	68a3      	ldr	r3, [r4, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bbe:	2b0c      	cmp	r3, #12
 8000bc0:	d113      	bne.n	8000bea <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bc2:	68e3      	ldr	r3, [r4, #12]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d10e      	bne.n	8000bea <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	055e      	lsls	r6, r3, #21
 8000bd0:	d503      	bpl.n	8000bda <HAL_RCC_OscConfig+0x20e>
 8000bd2:	68eb      	ldr	r3, [r5, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f43f af09 	beq.w	80009ec <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bda:	6863      	ldr	r3, [r4, #4]
 8000bdc:	692a      	ldr	r2, [r5, #16]
 8000bde:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000be2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000be6:	6063      	str	r3, [r4, #4]
 8000be8:	e737      	b.n	8000a5a <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bea:	68eb      	ldr	r3, [r5, #12]
 8000bec:	b17b      	cbz	r3, 8000c0e <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fc99 	bl	800052c <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	0558      	lsls	r0, r3, #21
 8000c00:	d4eb      	bmi.n	8000bda <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c02:	f7ff fc93 	bl	800052c <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f7      	bls.n	8000bfc <HAL_RCC_OscConfig+0x230>
 8000c0c:	e76f      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc89 	bl	800052c <HAL_GetTick>
 8000c1a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	0559      	lsls	r1, r3, #21
 8000c20:	f57f af1b 	bpl.w	8000a5a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c24:	f7ff fc82 	bl	800052c <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9f6      	bls.n	8000c1c <HAL_RCC_OscConfig+0x250>
 8000c2e:	e75e      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c30:	696b      	ldr	r3, [r5, #20]
 8000c32:	4c15      	ldr	r4, [pc, #84]	; (8000c88 <HAL_RCC_OscConfig+0x2bc>)
 8000c34:	b19b      	cbz	r3, 8000c5e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8000c36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c42:	f7ff fc73 	bl	800052c <HAL_GetTick>
 8000c46:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000c48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c4c:	079f      	lsls	r7, r3, #30
 8000c4e:	f53f af08 	bmi.w	8000a62 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c52:	f7ff fc6b 	bl	800052c <HAL_GetTick>
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f5      	bls.n	8000c48 <HAL_RCC_OscConfig+0x27c>
 8000c5c:	e747      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000c5e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c62:	f023 0301 	bic.w	r3, r3, #1
 8000c66:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fc5f 	bl	800052c <HAL_GetTick>
 8000c6e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000c70:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c74:	0798      	lsls	r0, r3, #30
 8000c76:	f57f aef4 	bpl.w	8000a62 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fc57 	bl	800052c <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9f5      	bls.n	8000c70 <HAL_RCC_OscConfig+0x2a4>
 8000c84:	e733      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	08001f3d 	.word	0x08001f3d
 8000c90:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c94:	4c79      	ldr	r4, [pc, #484]	; (8000e7c <HAL_RCC_OscConfig+0x4b0>)
 8000c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c98:	00d9      	lsls	r1, r3, #3
 8000c9a:	d427      	bmi.n	8000cec <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cae:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cb0:	4e73      	ldr	r6, [pc, #460]	; (8000e80 <HAL_RCC_OscConfig+0x4b4>)
 8000cb2:	6833      	ldr	r3, [r6, #0]
 8000cb4:	05da      	lsls	r2, r3, #23
 8000cb6:	d51b      	bpl.n	8000cf0 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb8:	68ab      	ldr	r3, [r5, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d129      	bne.n	8000d12 <HAL_RCC_OscConfig+0x346>
 8000cbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000cca:	f7ff fc2f 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cd2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000cd4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cd8:	0798      	lsls	r0, r3, #30
 8000cda:	d540      	bpl.n	8000d5e <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000cdc:	2f00      	cmp	r7, #0
 8000cde:	f43f aec4 	beq.w	8000a6a <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cea:	e6be      	b.n	8000a6a <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8000cec:	2700      	movs	r7, #0
 8000cee:	e7df      	b.n	8000cb0 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fc18 	bl	800052c <HAL_GetTick>
 8000cfc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cfe:	6833      	ldr	r3, [r6, #0]
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	d4d9      	bmi.n	8000cb8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d04:	f7ff fc12 	bl	800052c <HAL_GetTick>
 8000d08:	eba0 0008 	sub.w	r0, r0, r8
 8000d0c:	2802      	cmp	r0, #2
 8000d0e:	d9f6      	bls.n	8000cfe <HAL_RCC_OscConfig+0x332>
 8000d10:	e6ed      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d106      	bne.n	8000d24 <HAL_RCC_OscConfig+0x358>
 8000d16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d22:	e7cc      	b.n	8000cbe <HAL_RCC_OscConfig+0x2f2>
 8000d24:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d30:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d34:	f022 0204 	bic.w	r2, r2, #4
 8000d38:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1c4      	bne.n	8000cca <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8000d40:	f7ff fbf4 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d44:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d48:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d4e:	0799      	lsls	r1, r3, #30
 8000d50:	d5c4      	bpl.n	8000cdc <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d52:	f7ff fbeb 	bl	800052c <HAL_GetTick>
 8000d56:	1b80      	subs	r0, r0, r6
 8000d58:	4540      	cmp	r0, r8
 8000d5a:	d9f6      	bls.n	8000d4a <HAL_RCC_OscConfig+0x37e>
 8000d5c:	e6c7      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fbe5 	bl	800052c <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	4540      	cmp	r0, r8
 8000d66:	d9b5      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x308>
 8000d68:	e6c1      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d6c:	4c43      	ldr	r4, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x4b0>)
 8000d6e:	b19b      	cbz	r3, 8000d98 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8000d70:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fbd6 	bl	800052c <HAL_GetTick>
 8000d80:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000d82:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d86:	079b      	lsls	r3, r3, #30
 8000d88:	f53f ae73 	bmi.w	8000a72 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d8c:	f7ff fbce 	bl	800052c <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d9f5      	bls.n	8000d82 <HAL_RCC_OscConfig+0x3b6>
 8000d96:	e6aa      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000d98:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000da4:	f7ff fbc2 	bl	800052c <HAL_GetTick>
 8000da8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000daa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000dae:	079f      	lsls	r7, r3, #30
 8000db0:	f57f ae5f 	bpl.w	8000a72 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000db4:	f7ff fbba 	bl	800052c <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f5      	bls.n	8000daa <HAL_RCC_OscConfig+0x3de>
 8000dbe:	e696      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dc0:	4c2e      	ldr	r4, [pc, #184]	; (8000e7c <HAL_RCC_OscConfig+0x4b0>)
 8000dc2:	68a3      	ldr	r3, [r4, #8]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	f43f ae0f 	beq.w	80009ec <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000dce:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dd0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dd6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dd8:	d136      	bne.n	8000e48 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8000dda:	f7ff fba7 	bl	800052c <HAL_GetTick>
 8000dde:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	0198      	lsls	r0, r3, #6
 8000de4:	d42a      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000de8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000dea:	06db      	lsls	r3, r3, #27
 8000dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000df0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000df2:	4313      	orrs	r3, r2
 8000df4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000df6:	3a01      	subs	r2, #1
 8000df8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000dfc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000dfe:	0852      	lsrs	r2, r2, #1
 8000e00:	3a01      	subs	r2, #1
 8000e02:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000e06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e08:	0852      	lsrs	r2, r2, #1
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e10:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e18:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e1a:	68e3      	ldr	r3, [r4, #12]
 8000e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e20:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e22:	f7ff fb83 	bl	800052c <HAL_GetTick>
 8000e26:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	0199      	lsls	r1, r3, #6
 8000e2c:	f53f ae25 	bmi.w	8000a7a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e30:	f7ff fb7c 	bl	800052c <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f6      	bls.n	8000e28 <HAL_RCC_OscConfig+0x45c>
 8000e3a:	e658      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e3c:	f7ff fb76 	bl	800052c <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9cc      	bls.n	8000de0 <HAL_RCC_OscConfig+0x414>
 8000e46:	e652      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e4c:	bf5e      	ittt	pl
 8000e4e:	68e3      	ldrpl	r3, [r4, #12]
 8000e50:	f023 0303 	bicpl.w	r3, r3, #3
 8000e54:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000e56:	68e3      	ldr	r3, [r4, #12]
 8000e58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e62:	f7ff fb63 	bl	800052c <HAL_GetTick>
 8000e66:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	019b      	lsls	r3, r3, #6
 8000e6c:	f57f ae05 	bpl.w	8000a7a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e70:	f7ff fb5c 	bl	800052c <HAL_GetTick>
 8000e74:	1b40      	subs	r0, r0, r5
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9f6      	bls.n	8000e68 <HAL_RCC_OscConfig+0x49c>
 8000e7a:	e638      	b.n	8000aee <HAL_RCC_OscConfig+0x122>
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e84:	4a56      	ldr	r2, [pc, #344]	; (8000fe0 <HAL_RCC_ClockConfig+0x15c>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	428b      	cmp	r3, r1
{
 8000e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e92:	4605      	mov	r5, r0
 8000e94:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e96:	d32b      	bcc.n	8000ef0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	07d9      	lsls	r1, r3, #31
 8000e9c:	d435      	bmi.n	8000f0a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e9e:	6829      	ldr	r1, [r5, #0]
 8000ea0:	078a      	lsls	r2, r1, #30
 8000ea2:	f100 8083 	bmi.w	8000fac <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000ea6:	4a4e      	ldr	r2, [pc, #312]	; (8000fe0 <HAL_RCC_ClockConfig+0x15c>)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f0c0 8084 	bcc.w	8000fbc <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb4:	f011 0f04 	tst.w	r1, #4
 8000eb8:	4c4a      	ldr	r4, [pc, #296]	; (8000fe4 <HAL_RCC_ClockConfig+0x160>)
 8000eba:	f040 808a 	bne.w	8000fd2 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ebe:	070b      	lsls	r3, r1, #28
 8000ec0:	d506      	bpl.n	8000ed0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ec2:	68a3      	ldr	r3, [r4, #8]
 8000ec4:	692a      	ldr	r2, [r5, #16]
 8000ec6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000eca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ece:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ed0:	f7ff fd14 	bl	80008fc <HAL_RCC_GetSysClockFreq>
 8000ed4:	68a3      	ldr	r3, [r4, #8]
 8000ed6:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_RCC_ClockConfig+0x164>)
 8000ed8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	40d8      	lsrs	r0, r3
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_RCC_ClockConfig+0x168>)
 8000ee2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff faf9 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 8000eea:	2000      	movs	r0, #0
}
 8000eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	f023 0307 	bic.w	r3, r3, #7
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d0c9      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f0a:	686a      	ldr	r2, [r5, #4]
 8000f0c:	4c35      	ldr	r4, [pc, #212]	; (8000fe4 <HAL_RCC_ClockConfig+0x160>)
 8000f0e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f10:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f12:	d11c      	bne.n	8000f4e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f18:	d0f4      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f1a:	68a3      	ldr	r3, [r4, #8]
 8000f1c:	f023 0303 	bic.w	r3, r3, #3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000f24:	f7ff fb02 	bl	800052c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f28:	686b      	ldr	r3, [r5, #4]
 8000f2a:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000f2c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f32:	d118      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f34:	68a3      	ldr	r3, [r4, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b0c      	cmp	r3, #12
 8000f3c:	d0af      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3e:	f7ff faf5 	bl	800052c <HAL_GetTick>
 8000f42:	1bc0      	subs	r0, r0, r7
 8000f44:	4540      	cmp	r0, r8
 8000f46:	d9f5      	bls.n	8000f34 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000f48:	2003      	movs	r0, #3
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4e:	2a02      	cmp	r2, #2
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f56:	e7df      	b.n	8000f18 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f58:	b912      	cbnz	r2, 8000f60 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f5a:	f013 0f02 	tst.w	r3, #2
 8000f5e:	e7db      	b.n	8000f18 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f60:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f64:	e7d8      	b.n	8000f18 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d10a      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000f6a:	68a3      	ldr	r3, [r4, #8]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d094      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f74:	f7ff fada 	bl	800052c <HAL_GetTick>
 8000f78:	1bc0      	subs	r0, r0, r7
 8000f7a:	4540      	cmp	r0, r8
 8000f7c:	d9f5      	bls.n	8000f6a <HAL_RCC_ClockConfig+0xe6>
 8000f7e:	e7e3      	b.n	8000f48 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f80:	b973      	cbnz	r3, 8000fa0 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000f82:	68a3      	ldr	r3, [r4, #8]
 8000f84:	f013 0f0c 	tst.w	r3, #12
 8000f88:	d089      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8a:	f7ff facf 	bl	800052c <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4540      	cmp	r0, r8
 8000f92:	d9f6      	bls.n	8000f82 <HAL_RCC_ClockConfig+0xfe>
 8000f94:	e7d8      	b.n	8000f48 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f96:	f7ff fac9 	bl	800052c <HAL_GetTick>
 8000f9a:	1bc0      	subs	r0, r0, r7
 8000f9c:	4540      	cmp	r0, r8
 8000f9e:	d8d3      	bhi.n	8000f48 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000fa0:	68a3      	ldr	r3, [r4, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d1f5      	bne.n	8000f96 <HAL_RCC_ClockConfig+0x112>
 8000faa:	e778      	b.n	8000e9e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_RCC_ClockConfig+0x160>)
 8000fae:	68a8      	ldr	r0, [r5, #8]
 8000fb0:	6893      	ldr	r3, [r2, #8]
 8000fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	6093      	str	r3, [r2, #8]
 8000fba:	e774      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f023 0307 	bic.w	r3, r3, #7
 8000fc2:	4333      	orrs	r3, r6
 8000fc4:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d199      	bne.n	8000f04 <HAL_RCC_ClockConfig+0x80>
 8000fd0:	e770      	b.n	8000eb4 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fd2:	68a3      	ldr	r3, [r4, #8]
 8000fd4:	68ea      	ldr	r2, [r5, #12]
 8000fd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60a3      	str	r3, [r4, #8]
 8000fde:	e76e      	b.n	8000ebe <HAL_RCC_ClockConfig+0x3a>
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	08001f3d 	.word	0x08001f3d
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_RCC_GetHCLKFreq>:
}
 8000ff0:	4b01      	ldr	r3, [pc, #4]	; (8000ff8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800100a:	6810      	ldr	r0, [r2, #0]
}
 800100c:	40d8      	lsrs	r0, r3
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	08001f4d 	.word	0x08001f4d
 8001018:	20000000 	.word	0x20000000

0800101c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_RCC_GetPCLK2Freq+0x14>)
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800102a:	6810      	ldr	r0, [r2, #0]
}
 800102c:	40d8      	lsrs	r0, r3
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	08001f4d 	.word	0x08001f4d
 8001038:	20000000 	.word	0x20000000

0800103c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <RCCEx_PLLSAI1_Config+0x114>)
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	f012 0f03 	tst.w	r2, #3
{
 8001046:	4605      	mov	r5, r0
 8001048:	460e      	mov	r6, r1
 800104a:	461c      	mov	r4, r3
 800104c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800104e:	d039      	beq.n	80010c4 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	4282      	cmp	r2, r0
 8001058:	d14b      	bne.n	80010f2 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800105a:	2a00      	cmp	r2, #0
 800105c:	d049      	beq.n	80010f2 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800105e:	68db      	ldr	r3, [r3, #12]
       ||
 8001060:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001062:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001066:	3301      	adds	r3, #1
       ||
 8001068:	4293      	cmp	r3, r2
 800106a:	d142      	bne.n	80010f2 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001072:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001074:	f7ff fa5a 	bl	800052c <HAL_GetTick>
 8001078:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	011a      	lsls	r2, r3, #4
 800107e:	d441      	bmi.n	8001104 <RCCEx_PLLSAI1_Config+0xc8>
 8001080:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001082:	2e00      	cmp	r6, #0
 8001084:	d045      	beq.n	8001112 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001086:	2e01      	cmp	r6, #1
 8001088:	d14f      	bne.n	800112a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800108a:	6922      	ldr	r2, [r4, #16]
 800108c:	6928      	ldr	r0, [r5, #16]
 800108e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001092:	0840      	lsrs	r0, r0, #1
 8001094:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001098:	3801      	subs	r0, #1
 800109a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800109e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80010a2:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010aa:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ac:	f7ff fa3e 	bl	800052c <HAL_GetTick>
 80010b0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	d545      	bpl.n	8001144 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80010b8:	6923      	ldr	r3, [r4, #16]
 80010ba:	69aa      	ldr	r2, [r5, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	6123      	str	r3, [r4, #16]
 80010c0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80010c4:	2802      	cmp	r0, #2
 80010c6:	d010      	beq.n	80010ea <RCCEx_PLLSAI1_Config+0xae>
 80010c8:	2803      	cmp	r0, #3
 80010ca:	d014      	beq.n	80010f6 <RCCEx_PLLSAI1_Config+0xba>
 80010cc:	2801      	cmp	r0, #1
 80010ce:	d110      	bne.n	80010f2 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	079f      	lsls	r7, r3, #30
 80010d4:	d5f5      	bpl.n	80010c2 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80010d6:	68e3      	ldr	r3, [r4, #12]
 80010d8:	686a      	ldr	r2, [r5, #4]
 80010da:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80010de:	3a01      	subs	r2, #1
 80010e0:	4318      	orrs	r0, r3
 80010e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80010e6:	60e0      	str	r0, [r4, #12]
 80010e8:	e7c0      	b.n	800106c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010f0:	d1f1      	bne.n	80010d6 <RCCEx_PLLSAI1_Config+0x9a>
 80010f2:	2001      	movs	r0, #1
 80010f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	0391      	lsls	r1, r2, #14
 80010fa:	d4ec      	bmi.n	80010d6 <RCCEx_PLLSAI1_Config+0x9a>
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001102:	e7f5      	b.n	80010f0 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001104:	f7ff fa12 	bl	800052c <HAL_GetTick>
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	2802      	cmp	r0, #2
 800110c:	d9b5      	bls.n	800107a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001112:	6922      	ldr	r2, [r4, #16]
 8001114:	68e9      	ldr	r1, [r5, #12]
 8001116:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800111a:	06c9      	lsls	r1, r1, #27
 800111c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001120:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001124:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001126:	6123      	str	r3, [r4, #16]
 8001128:	e7bc      	b.n	80010a4 <RCCEx_PLLSAI1_Config+0x68>
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	6968      	ldr	r0, [r5, #20]
 800112e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001132:	0840      	lsrs	r0, r0, #1
 8001134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001138:	3801      	subs	r0, #1
 800113a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800113e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001142:	e7f0      	b.n	8001126 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001144:	f7ff f9f2 	bl	800052c <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d9b1      	bls.n	80010b2 <RCCEx_PLLSAI1_Config+0x76>
 800114e:	e7de      	b.n	800110e <RCCEx_PLLSAI1_Config+0xd2>
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001158:	6805      	ldr	r5, [r0, #0]
 800115a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800115e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001160:	d00e      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001162:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001164:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001168:	d05b      	beq.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800116a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800116e:	d05d      	beq.n	800122c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001170:	2900      	cmp	r1, #0
 8001172:	d166      	bne.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001174:	3004      	adds	r0, #4
 8001176:	f7ff ff61 	bl	800103c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800117a:	4605      	mov	r5, r0
 800117c:	2800      	cmp	r0, #0
 800117e:	d055      	beq.n	800122c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	039e      	lsls	r6, r3, #14
 8001184:	d56d      	bpl.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001186:	4e92      	ldr	r6, [pc, #584]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001188:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800118a:	00d8      	lsls	r0, r3, #3
 800118c:	d45b      	bmi.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	65b3      	str	r3, [r6, #88]	; 0x58
 8001196:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011a0:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a2:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80013d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80011a6:	f8d8 3000 	ldr.w	r3, [r8]
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80011b2:	f7ff f9bb 	bl	800052c <HAL_GetTick>
 80011b6:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80011b8:	f8d8 3000 	ldr.w	r3, [r8]
 80011bc:	05d9      	lsls	r1, r3, #23
 80011be:	d544      	bpl.n	800124a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 80011c0:	2d00      	cmp	r5, #0
 80011c2:	d149      	bne.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80011c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80011c8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011cc:	d014      	beq.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80011ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d011      	beq.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80011d4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80011d8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80011dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011e0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80011e4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80011e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80011ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011f0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80011f4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80011f8:	07da      	lsls	r2, r3, #31
 80011fa:	d509      	bpl.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80011fc:	f7ff f996 	bl	800052c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001200:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001204:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001206:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800120a:	079b      	lsls	r3, r3, #30
 800120c:	f140 80c2 	bpl.w	8001394 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001210:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001214:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	4313      	orrs	r3, r2
 800121c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001220:	e01a      	b.n	8001258 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001222:	4a6b      	ldr	r2, [pc, #428]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001224:	68d3      	ldr	r3, [r2, #12]
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800122c:	4a68      	ldr	r2, [pc, #416]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800122e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001230:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001234:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001238:	430b      	orrs	r3, r1
 800123a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800123e:	2500      	movs	r5, #0
 8001240:	e79e      	b.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001242:	2501      	movs	r5, #1
 8001244:	e79c      	b.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2700      	movs	r7, #0
 8001248:	e7ab      	b.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff f96f 	bl	800052c <HAL_GetTick>
 800124e:	eba0 0009 	sub.w	r0, r0, r9
 8001252:	2802      	cmp	r0, #2
 8001254:	d9b0      	bls.n	80011b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001256:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001258:	b11f      	cbz	r7, 8001262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800125c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001260:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	07df      	lsls	r7, r3, #31
 8001266:	d508      	bpl.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001268:	4959      	ldr	r1, [pc, #356]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800126a:	6a20      	ldr	r0, [r4, #32]
 800126c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001270:	f022 0203 	bic.w	r2, r2, #3
 8001274:	4302      	orrs	r2, r0
 8001276:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800127a:	079e      	lsls	r6, r3, #30
 800127c:	d508      	bpl.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800127e:	4954      	ldr	r1, [pc, #336]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001280:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001282:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001286:	f022 020c 	bic.w	r2, r2, #12
 800128a:	4302      	orrs	r2, r0
 800128c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001290:	0698      	lsls	r0, r3, #26
 8001292:	d508      	bpl.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001294:	494e      	ldr	r1, [pc, #312]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001298:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800129c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012a0:	4302      	orrs	r2, r0
 80012a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80012a6:	0599      	lsls	r1, r3, #22
 80012a8:	d508      	bpl.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80012aa:	4949      	ldr	r1, [pc, #292]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80012ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012b2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012b6:	4302      	orrs	r2, r0
 80012b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80012bc:	055a      	lsls	r2, r3, #21
 80012be:	d508      	bpl.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80012c0:	4943      	ldr	r1, [pc, #268]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80012cc:	4302      	orrs	r2, r0
 80012ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012d2:	065f      	lsls	r7, r3, #25
 80012d4:	d508      	bpl.n	80012e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012d6:	493e      	ldr	r1, [pc, #248]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80012da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012e2:	4302      	orrs	r2, r0
 80012e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012e8:	05de      	lsls	r6, r3, #23
 80012ea:	d508      	bpl.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012ec:	4938      	ldr	r1, [pc, #224]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012f8:	4302      	orrs	r2, r0
 80012fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80012fe:	0498      	lsls	r0, r3, #18
 8001300:	d50f      	bpl.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001304:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001306:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800130a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800130e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001310:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001318:	d144      	bne.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800131a:	68d3      	ldr	r3, [r2, #12]
 800131c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001320:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	0359      	lsls	r1, r3, #13
 8001326:	d50f      	bpl.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800132a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800132c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001330:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001334:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001336:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800133a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800133e:	d13c      	bne.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001340:	68d3      	ldr	r3, [r2, #12]
 8001342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001346:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	045a      	lsls	r2, r3, #17
 800134c:	d512      	bpl.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800134e:	4920      	ldr	r1, [pc, #128]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001350:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001352:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001356:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800135a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800135c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001364:	d106      	bne.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001366:	2102      	movs	r1, #2
 8001368:	1d20      	adds	r0, r4, #4
 800136a:	f7ff fe67 	bl	800103c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800136e:	2800      	cmp	r0, #0
 8001370:	bf18      	it	ne
 8001372:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	041b      	lsls	r3, r3, #16
 8001378:	d508      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800137c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800137e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001386:	430b      	orrs	r3, r1
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800138c:	4628      	mov	r0, r5
 800138e:	b003      	add	sp, #12
 8001390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff f8ca 	bl	800052c <HAL_GetTick>
 8001398:	eba0 0008 	sub.w	r0, r0, r8
 800139c:	4548      	cmp	r0, r9
 800139e:	f67f af32 	bls.w	8001206 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80013a2:	e758      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80013a4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80013a8:	d1bb      	bne.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80013aa:	2101      	movs	r1, #1
 80013ac:	1d20      	adds	r0, r4, #4
 80013ae:	f7ff fe45 	bl	800103c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	bf18      	it	ne
 80013b6:	4605      	movne	r5, r0
 80013b8:	e7b3      	b.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80013ba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80013be:	d1c3      	bne.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80013c0:	2101      	movs	r1, #1
 80013c2:	1d20      	adds	r0, r4, #4
 80013c4:	f7ff fe3a 	bl	800103c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80013c8:	2800      	cmp	r0, #0
 80013ca:	bf18      	it	ne
 80013cc:	4605      	movne	r5, r0
 80013ce:	e7bb      	b.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80013d8:	4a02      	ldr	r2, [pc, #8]	; (80013e4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000

080013e8 <UART_EndRxTransfer>:
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013e8:	6803      	ldr	r3, [r0, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013f0:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013fa:	2320      	movs	r3, #32
 80013fc:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001400:	2300      	movs	r3, #0
 8001402:	6603      	str	r3, [r0, #96]	; 0x60
 8001404:	4770      	bx	lr
	...

08001408 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001408:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800140c:	2b20      	cmp	r3, #32
 800140e:	d149      	bne.n	80014a4 <HAL_UART_Receive_IT+0x9c>
    if((pData == NULL ) || (Size == 0U))
 8001410:	2900      	cmp	r1, #0
 8001412:	d045      	beq.n	80014a0 <HAL_UART_Receive_IT+0x98>
 8001414:	2a00      	cmp	r2, #0
 8001416:	d043      	beq.n	80014a0 <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 8001418:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800141c:	2b01      	cmp	r3, #1
 800141e:	d041      	beq.n	80014a4 <HAL_UART_Receive_IT+0x9c>
 8001420:	2301      	movs	r3, #1
 8001422:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800142a:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 800142c:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800142e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8001432:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001436:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800143a:	d121      	bne.n	8001480 <HAL_UART_Receive_IT+0x78>
 800143c:	6902      	ldr	r2, [r0, #16]
 800143e:	b9ea      	cbnz	r2, 800147c <HAL_UART_Receive_IT+0x74>
 8001440:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001444:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001448:	2200      	movs	r2, #0
 800144a:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800144c:	2222      	movs	r2, #34	; 0x22
 800144e:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001452:	6802      	ldr	r2, [r0, #0]
 8001454:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800145a:	f041 0101 	orr.w	r1, r1, #1
 800145e:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001460:	d11c      	bne.n	800149c <HAL_UART_Receive_IT+0x94>
 8001462:	6903      	ldr	r3, [r0, #16]
 8001464:	b9d3      	cbnz	r3, 800149c <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001468:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800146a:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800146c:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 8001470:	2300      	movs	r3, #0
 8001472:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001476:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001478:	4618      	mov	r0, r3
 800147a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	e7e1      	b.n	8001444 <HAL_UART_Receive_IT+0x3c>
 8001480:	b923      	cbnz	r3, 800148c <HAL_UART_Receive_IT+0x84>
 8001482:	6902      	ldr	r2, [r0, #16]
 8001484:	2a00      	cmp	r2, #0
 8001486:	d0f9      	beq.n	800147c <HAL_UART_Receive_IT+0x74>
 8001488:	227f      	movs	r2, #127	; 0x7f
 800148a:	e7db      	b.n	8001444 <HAL_UART_Receive_IT+0x3c>
 800148c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001490:	d1da      	bne.n	8001448 <HAL_UART_Receive_IT+0x40>
 8001492:	6902      	ldr	r2, [r0, #16]
 8001494:	2a00      	cmp	r2, #0
 8001496:	d0f7      	beq.n	8001488 <HAL_UART_Receive_IT+0x80>
 8001498:	223f      	movs	r2, #63	; 0x3f
 800149a:	e7d3      	b.n	8001444 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_UART_Receive_IT+0xa4>)
 800149e:	e7e3      	b.n	8001468 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	4770      	bx	lr
    return HAL_BUSY;
 80014a4:	2002      	movs	r0, #2
}
 80014a6:	4770      	bx	lr
 80014a8:	08001509 	.word	0x08001509
 80014ac:	080014b3 	.word	0x080014b3

080014b0 <HAL_UART_TxCpltCallback>:
 80014b0:	4770      	bx	lr

080014b2 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014b2:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80014b6:	2a22      	cmp	r2, #34	; 0x22
{
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014bc:	d11e      	bne.n	80014fc <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80014be:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80014c0:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 80014c2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80014c6:	1c65      	adds	r5, r4, #1
 80014c8:	400a      	ands	r2, r1
 80014ca:	6545      	str	r5, [r0, #84]	; 0x54
 80014cc:	7022      	strb	r2, [r4, #0]
    
    if(--huart->RxXferCount == 0)
 80014ce:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80014d2:	3a01      	subs	r2, #1
 80014d4:	b292      	uxth	r2, r2
 80014d6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 80014da:	b9a2      	cbnz	r2, 8001506 <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014dc:	6801      	ldr	r1, [r0, #0]
 80014de:	680c      	ldr	r4, [r1, #0]
 80014e0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80014e4:	600c      	str	r4, [r1, #0]
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e6:	688c      	ldr	r4, [r1, #8]
 80014e8:	f024 0401 	bic.w	r4, r4, #1
 80014ec:	608c      	str	r4, [r1, #8]
     
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80014ee:	2120      	movs	r1, #32
 80014f0:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80014f4:	6602      	str	r2, [r0, #96]	; 0x60
      
      HAL_UART_RxCpltCallback(huart);
 80014f6:	f000 fb3d 	bl	8001b74 <HAL_UART_RxCpltCallback>
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80014fc:	8b13      	ldrh	r3, [r2, #24]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	8313      	strh	r3, [r2, #24]
 8001506:	bd38      	pop	{r3, r4, r5, pc}

08001508 <UART_RxISR_16BIT>:
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001508:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 800150c:	2a22      	cmp	r2, #34	; 0x22
{
 800150e:	b510      	push	{r4, lr}
 8001510:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001512:	d11d      	bne.n	8001550 <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001514:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001516:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800151a:	400c      	ands	r4, r1
 800151c:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800151e:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr +=2;
 8001522:	6541      	str	r1, [r0, #84]	; 0x54
    
    if(--huart->RxXferCount == 0)
 8001524:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8001528:	3901      	subs	r1, #1
 800152a:	b289      	uxth	r1, r1
 800152c:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 8001530:	b999      	cbnz	r1, 800155a <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001532:	6814      	ldr	r4, [r2, #0]
 8001534:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8001538:	6014      	str	r4, [r2, #0]
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800153a:	6894      	ldr	r4, [r2, #8]
 800153c:	f024 0401 	bic.w	r4, r4, #1
 8001540:	6094      	str	r4, [r2, #8]
      
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001542:	2220      	movs	r2, #32
 8001544:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001548:	6601      	str	r1, [r0, #96]	; 0x60

      HAL_UART_RxCpltCallback(huart);
 800154a:	f000 fb13 	bl	8001b74 <HAL_UART_RxCpltCallback>
 800154e:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001550:	8b13      	ldrh	r3, [r2, #24]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	8313      	strh	r3, [r2, #24]
 800155a:	bd10      	pop	{r4, pc}

0800155c <HAL_UART_ErrorCallback>:
 800155c:	4770      	bx	lr
	...

08001560 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001564:	6819      	ldr	r1, [r3, #0]
{
 8001566:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001568:	0716      	lsls	r6, r2, #28
{
 800156a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800156c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 800156e:	d10a      	bne.n	8001586 <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8001570:	0696      	lsls	r6, r2, #26
 8001572:	d565      	bpl.n	8001640 <HAL_UART_IRQHandler+0xe0>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001574:	068e      	lsls	r6, r1, #26
 8001576:	d563      	bpl.n	8001640 <HAL_UART_IRQHandler+0xe0>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8001578:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8089 	beq.w	8001692 <HAL_UART_IRQHandler+0x132>
}
 8001580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8001584:	4718      	bx	r3
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001586:	f015 0001 	ands.w	r0, r5, #1
 800158a:	d102      	bne.n	8001592 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800158c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001590:	d056      	beq.n	8001640 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001592:	07d5      	lsls	r5, r2, #31
 8001594:	d507      	bpl.n	80015a6 <HAL_UART_IRQHandler+0x46>
 8001596:	05ce      	lsls	r6, r1, #23
 8001598:	d505      	bpl.n	80015a6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800159a:	2501      	movs	r5, #1
 800159c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800159e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80015a0:	f045 0501 	orr.w	r5, r5, #1
 80015a4:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015a6:	0795      	lsls	r5, r2, #30
 80015a8:	d506      	bpl.n	80015b8 <HAL_UART_IRQHandler+0x58>
 80015aa:	b128      	cbz	r0, 80015b8 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80015ac:	2502      	movs	r5, #2
 80015ae:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015b0:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80015b2:	f045 0504 	orr.w	r5, r5, #4
 80015b6:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015b8:	0756      	lsls	r6, r2, #29
 80015ba:	d506      	bpl.n	80015ca <HAL_UART_IRQHandler+0x6a>
 80015bc:	b128      	cbz	r0, 80015ca <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80015be:	2504      	movs	r5, #4
 80015c0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015c2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80015c4:	f045 0502 	orr.w	r5, r5, #2
 80015c8:	6765      	str	r5, [r4, #116]	; 0x74
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80015ca:	0715      	lsls	r5, r2, #28
 80015cc:	d507      	bpl.n	80015de <HAL_UART_IRQHandler+0x7e>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80015ce:	068e      	lsls	r6, r1, #26
 80015d0:	d400      	bmi.n	80015d4 <HAL_UART_IRQHandler+0x74>
 80015d2:	b120      	cbz	r0, 80015de <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80015d4:	2008      	movs	r0, #8
 80015d6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80015da:	4303      	orrs	r3, r0
 80015dc:	6763      	str	r3, [r4, #116]	; 0x74
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d056      	beq.n	8001692 <HAL_UART_IRQHandler+0x132>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 80015e4:	0695      	lsls	r5, r2, #26
 80015e6:	d505      	bpl.n	80015f4 <HAL_UART_IRQHandler+0x94>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015e8:	0688      	lsls	r0, r1, #26
 80015ea:	d503      	bpl.n	80015f4 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80015ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015ee:	b10b      	cbz	r3, 80015f4 <HAL_UART_IRQHandler+0x94>
 80015f0:	4620      	mov	r0, r4
 80015f2:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80015f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80015f6:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 80015f8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80015fa:	d404      	bmi.n	8001606 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001600:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001604:	d018      	beq.n	8001638 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001606:	f7ff feef 	bl	80013e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	0652      	lsls	r2, r2, #25
 8001610:	d50e      	bpl.n	8001630 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001612:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001614:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800161a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800161c:	b140      	cbz	r0, 8001630 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_UART_IRQHandler+0x134>)
 8001620:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001622:	f7ff f802 	bl	800062a <HAL_DMA_Abort_IT>
 8001626:	2800      	cmp	r0, #0
 8001628:	d033      	beq.n	8001692 <HAL_UART_IRQHandler+0x132>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800162a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800162c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800162e:	e7a7      	b.n	8001580 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff ff93 	bl	800155c <HAL_UART_ErrorCallback>
 8001636:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001638:	f7ff ff90 	bl	800155c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	6765      	str	r5, [r4, #116]	; 0x74
 800163e:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001640:	02d6      	lsls	r6, r2, #11
 8001642:	d50e      	bpl.n	8001662 <HAL_UART_IRQHandler+0x102>
 8001644:	0268      	lsls	r0, r5, #9
 8001646:	d50c      	bpl.n	8001662 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800164c:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800164e:	2320      	movs	r3, #32
 8001650:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    HAL_UARTEx_WakeupCallback(huart);
 8001654:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001656:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
 800165a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800165e:	f000 ba87 	b.w	8001b70 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8001662:	0616      	lsls	r6, r2, #24
 8001664:	d505      	bpl.n	8001672 <HAL_UART_IRQHandler+0x112>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001666:	060d      	lsls	r5, r1, #24
 8001668:	d503      	bpl.n	8001672 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 800166a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800166c:	b18b      	cbz	r3, 8001692 <HAL_UART_IRQHandler+0x132>
 800166e:	4620      	mov	r0, r4
 8001670:	e786      	b.n	8001580 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001672:	0650      	lsls	r0, r2, #25
 8001674:	d50d      	bpl.n	8001692 <HAL_UART_IRQHandler+0x132>
 8001676:	064a      	lsls	r2, r1, #25
 8001678:	d50b      	bpl.n	8001692 <HAL_UART_IRQHandler+0x132>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001680:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001682:	2320      	movs	r3, #32
 8001684:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 8001688:	2300      	movs	r3, #0
 800168a:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800168c:	4620      	mov	r0, r4
 800168e:	f7ff ff0f 	bl	80014b0 <HAL_UART_TxCpltCallback>
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	08001699 	.word	0x08001699

08001698 <UART_DMAAbortOnError>:
{
 8001698:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800169a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80016a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80016a6:	f7ff ff59 	bl	800155c <HAL_UART_ErrorCallback>
 80016aa:	bd08      	pop	{r3, pc}

080016ac <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 80016ac:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016ae:	69c1      	ldr	r1, [r0, #28]
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016b4:	6883      	ldr	r3, [r0, #8]
 80016b6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016b8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016ba:	4303      	orrs	r3, r0
 80016bc:	6960      	ldr	r0, [r4, #20]
 80016be:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016c0:	4882      	ldr	r0, [pc, #520]	; (80018cc <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80016c2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016c4:	4028      	ands	r0, r5
 80016c6:	4303      	orrs	r3, r0
 80016c8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016ca:	6853      	ldr	r3, [r2, #4]
 80016cc:	68e0      	ldr	r0, [r4, #12]
 80016ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d2:	4303      	orrs	r3, r0
 80016d4:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016d8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80016da:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80016dc:	bf1c      	itt	ne
 80016de:	6a23      	ldrne	r3, [r4, #32]
 80016e0:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016e2:	6893      	ldr	r3, [r2, #8]
 80016e4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80016e8:	4303      	orrs	r3, r0
 80016ea:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <UART_SetConfig+0x228>)
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d114      	bne.n	800171c <UART_SetConfig+0x70>
 80016f2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80016f6:	4a78      	ldr	r2, [pc, #480]	; (80018d8 <UART_SetConfig+0x22c>)
 80016f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fc:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001700:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	f040 80aa 	bne.w	800185e <UART_SetConfig+0x1b2>
    switch (clocksource)
 800170a:	2b08      	cmp	r3, #8
 800170c:	d820      	bhi.n	8001750 <UART_SetConfig+0xa4>
 800170e:	e8df f003 	tbb	[pc, r3]
 8001712:	8f77      	.short	0x8f77
 8001714:	1f9b1f92 	.word	0x1f9b1f92
 8001718:	1f1f      	.short	0x1f1f
 800171a:	9e          	.byte	0x9e
 800171b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <UART_SetConfig+0x230>)
 800171e:	429a      	cmp	r2, r3
 8001720:	d107      	bne.n	8001732 <UART_SetConfig+0x86>
 8001722:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <UART_SetConfig+0x234>)
 8001728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	e7e6      	b.n	8001700 <UART_SetConfig+0x54>
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <UART_SetConfig+0x224>)
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 80c2 	bne.w	80018be <UART_SetConfig+0x212>
 800173a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800173e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001742:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001746:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800174a:	d02a      	beq.n	80017a2 <UART_SetConfig+0xf6>
 800174c:	d806      	bhi.n	800175c <UART_SetConfig+0xb0>
 800174e:	b315      	cbz	r5, 8001796 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001750:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8001752:	2300      	movs	r3, #0
 8001754:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001756:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001758:	4610      	mov	r0, r2
 800175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800175c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001760:	d006      	beq.n	8001770 <UART_SetConfig+0xc4>
 8001762:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001766:	d1f3      	bne.n	8001750 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800176c:	2508      	movs	r5, #8
 800176e:	e001      	b.n	8001774 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001770:	485c      	ldr	r0, [pc, #368]	; (80018e4 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001772:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800177a:	4283      	cmp	r3, r0
 800177c:	d8e8      	bhi.n	8001750 <UART_SetConfig+0xa4>
 800177e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001782:	d8e5      	bhi.n	8001750 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001784:	2d08      	cmp	r5, #8
 8001786:	d838      	bhi.n	80017fa <UART_SetConfig+0x14e>
 8001788:	e8df f005 	tbb	[pc, r5]
 800178c:	3726370f 	.word	0x3726370f
 8001790:	3737372e 	.word	0x3737372e
 8001794:	31          	.byte	0x31
 8001795:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001796:	f7ff fc31 	bl	8000ffc <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800179a:	2800      	cmp	r0, #0
 800179c:	d1ea      	bne.n	8001774 <UART_SetConfig+0xc8>
 800179e:	4602      	mov	r2, r0
 80017a0:	e7d7      	b.n	8001752 <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80017a2:	f7ff f8ab 	bl	80008fc <HAL_RCC_GetSysClockFreq>
      break;
 80017a6:	2504      	movs	r5, #4
 80017a8:	e7f7      	b.n	800179a <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017aa:	f7ff fc27 	bl	8000ffc <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017ae:	6862      	ldr	r2, [r4, #4]
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	0856      	lsrs	r6, r2, #1
 80017b6:	2700      	movs	r7, #0
 80017b8:	fbe1 6700 	umlal	r6, r7, r1, r0
 80017bc:	2300      	movs	r3, #0
 80017be:	4630      	mov	r0, r6
 80017c0:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017c2:	f7fe fd03 	bl	80001cc <__aeabi_uldivmod>
          break;
 80017c6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80017c8:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <UART_SetConfig+0x23c>)
 80017ca:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80017ce:	4299      	cmp	r1, r3
 80017d0:	d8be      	bhi.n	8001750 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	60d8      	str	r0, [r3, #12]
 80017d6:	e7bc      	b.n	8001752 <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80017d8:	4844      	ldr	r0, [pc, #272]	; (80018ec <UART_SetConfig+0x240>)
 80017da:	0855      	lsrs	r5, r2, #1
 80017dc:	2300      	movs	r3, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017e2:	f141 0100 	adc.w	r1, r1, #0
 80017e6:	e7ec      	b.n	80017c2 <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017e8:	f7ff f888 	bl	80008fc <HAL_RCC_GetSysClockFreq>
 80017ec:	e7df      	b.n	80017ae <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80017ee:	0850      	lsrs	r0, r2, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	2300      	movs	r3, #0
 80017f4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80017f8:	e7f3      	b.n	80017e2 <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 80017fa:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80017fc:	2000      	movs	r0, #0
 80017fe:	e7e3      	b.n	80017c8 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001800:	f7ff fbfc 	bl	8000ffc <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001804:	6861      	ldr	r1, [r4, #4]
 8001806:	084a      	lsrs	r2, r1, #1
 8001808:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800180c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001810:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001812:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001814:	f1a3 0010 	sub.w	r0, r3, #16
 8001818:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800181c:	4288      	cmp	r0, r1
 800181e:	d897      	bhi.n	8001750 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001820:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001824:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001826:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800182a:	430b      	orrs	r3, r1
 800182c:	60c3      	str	r3, [r0, #12]
 800182e:	e790      	b.n	8001752 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001830:	f7ff fbf4 	bl	800101c <HAL_RCC_GetPCLK2Freq>
 8001834:	e7e6      	b.n	8001804 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001836:	6860      	ldr	r0, [r4, #4]
 8001838:	0843      	lsrs	r3, r0, #1
 800183a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800183e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001842:	fbb3 f3f0 	udiv	r3, r3, r0
 8001846:	e7e3      	b.n	8001810 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001848:	f7ff f858 	bl	80008fc <HAL_RCC_GetSysClockFreq>
 800184c:	e7da      	b.n	8001804 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800184e:	6860      	ldr	r0, [r4, #4]
 8001850:	0843      	lsrs	r3, r0, #1
 8001852:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001856:	e7f4      	b.n	8001842 <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8001858:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800185a:	2300      	movs	r3, #0
 800185c:	e7da      	b.n	8001814 <UART_SetConfig+0x168>
    switch (clocksource)
 800185e:	2b08      	cmp	r3, #8
 8001860:	d830      	bhi.n	80018c4 <UART_SetConfig+0x218>
 8001862:	e8df f003 	tbb	[pc, r3]
 8001866:	1805      	.short	0x1805
 8001868:	2f242f1b 	.word	0x2f242f1b
 800186c:	2f2f      	.short	0x2f2f
 800186e:	27          	.byte	0x27
 800186f:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001870:	f7ff fbc4 	bl	8000ffc <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001874:	6862      	ldr	r2, [r4, #4]
 8001876:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800187a:	fbb3 f3f2 	udiv	r3, r3, r2
 800187e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001880:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001882:	f1a3 0010 	sub.w	r0, r3, #16
 8001886:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800188a:	4288      	cmp	r0, r1
 800188c:	f63f af60 	bhi.w	8001750 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001890:	6821      	ldr	r1, [r4, #0]
 8001892:	60cb      	str	r3, [r1, #12]
 8001894:	e75d      	b.n	8001752 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001896:	f7ff fbc1 	bl	800101c <HAL_RCC_GetPCLK2Freq>
 800189a:	e7eb      	b.n	8001874 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800189c:	6860      	ldr	r0, [r4, #4]
 800189e:	0843      	lsrs	r3, r0, #1
 80018a0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80018a4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80018ac:	e7e7      	b.n	800187e <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018ae:	f7ff f825 	bl	80008fc <HAL_RCC_GetSysClockFreq>
 80018b2:	e7df      	b.n	8001874 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018b4:	6860      	ldr	r0, [r4, #4]
 80018b6:	0843      	lsrs	r3, r0, #1
 80018b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018bc:	e7f4      	b.n	80018a8 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018c2:	d0c9      	beq.n	8001858 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 80018c4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e7db      	b.n	8001882 <UART_SetConfig+0x1d6>
 80018ca:	bf00      	nop
 80018cc:	efff69f3 	.word	0xefff69f3
 80018d0:	40008000 	.word	0x40008000
 80018d4:	40013800 	.word	0x40013800
 80018d8:	08001f2c 	.word	0x08001f2c
 80018dc:	40004400 	.word	0x40004400
 80018e0:	08001f30 	.word	0x08001f30
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	000ffcff 	.word	0x000ffcff
 80018ec:	f4240000 	.word	0xf4240000

080018f0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018f2:	07da      	lsls	r2, r3, #31
{
 80018f4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018f6:	d506      	bpl.n	8001906 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018f8:	6801      	ldr	r1, [r0, #0]
 80018fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80018fc:	684a      	ldr	r2, [r1, #4]
 80018fe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001902:	4322      	orrs	r2, r4
 8001904:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001906:	079c      	lsls	r4, r3, #30
 8001908:	d506      	bpl.n	8001918 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800190a:	6801      	ldr	r1, [r0, #0]
 800190c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800190e:	684a      	ldr	r2, [r1, #4]
 8001910:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001914:	4322      	orrs	r2, r4
 8001916:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001918:	0759      	lsls	r1, r3, #29
 800191a:	d506      	bpl.n	800192a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800191c:	6801      	ldr	r1, [r0, #0]
 800191e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001920:	684a      	ldr	r2, [r1, #4]
 8001922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001926:	4322      	orrs	r2, r4
 8001928:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800192a:	071a      	lsls	r2, r3, #28
 800192c:	d506      	bpl.n	800193c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800192e:	6801      	ldr	r1, [r0, #0]
 8001930:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001932:	684a      	ldr	r2, [r1, #4]
 8001934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001938:	4322      	orrs	r2, r4
 800193a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800193c:	06dc      	lsls	r4, r3, #27
 800193e:	d506      	bpl.n	800194e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001940:	6801      	ldr	r1, [r0, #0]
 8001942:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001944:	688a      	ldr	r2, [r1, #8]
 8001946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800194a:	4322      	orrs	r2, r4
 800194c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800194e:	0699      	lsls	r1, r3, #26
 8001950:	d506      	bpl.n	8001960 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001952:	6801      	ldr	r1, [r0, #0]
 8001954:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001956:	688a      	ldr	r2, [r1, #8]
 8001958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800195c:	4322      	orrs	r2, r4
 800195e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001960:	065a      	lsls	r2, r3, #25
 8001962:	d50f      	bpl.n	8001984 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001964:	6801      	ldr	r1, [r0, #0]
 8001966:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001968:	684a      	ldr	r2, [r1, #4]
 800196a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800196e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001970:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001974:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001976:	d105      	bne.n	8001984 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001978:	684a      	ldr	r2, [r1, #4]
 800197a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800197c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001980:	4322      	orrs	r2, r4
 8001982:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	d506      	bpl.n	8001996 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001992:	430b      	orrs	r3, r1
 8001994:	6053      	str	r3, [r2, #4]
 8001996:	bd10      	pop	{r4, pc}

08001998 <UART_WaitOnFlagUntilTimeout>:
{
 8001998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199c:	9d06      	ldr	r5, [sp, #24]
 800199e:	4604      	mov	r4, r0
 80019a0:	460f      	mov	r7, r1
 80019a2:	4616      	mov	r6, r2
 80019a4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019a6:	6821      	ldr	r1, [r4, #0]
 80019a8:	69ca      	ldr	r2, [r1, #28]
 80019aa:	ea37 0302 	bics.w	r3, r7, r2
 80019ae:	bf0c      	ite	eq
 80019b0:	2201      	moveq	r2, #1
 80019b2:	2200      	movne	r2, #0
 80019b4:	42b2      	cmp	r2, r6
 80019b6:	d002      	beq.n	80019be <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80019b8:	2000      	movs	r0, #0
}
 80019ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019be:	1c6b      	adds	r3, r5, #1
 80019c0:	d0f2      	beq.n	80019a8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019c2:	b99d      	cbnz	r5, 80019ec <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80019d6:	2320      	movs	r3, #32
 80019d8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80019dc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80019e0:	2300      	movs	r3, #0
 80019e2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80019e6:	2003      	movs	r0, #3
 80019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019ec:	f7fe fd9e 	bl	800052c <HAL_GetTick>
 80019f0:	eba0 0008 	sub.w	r0, r0, r8
 80019f4:	4285      	cmp	r5, r0
 80019f6:	d2d6      	bcs.n	80019a6 <UART_WaitOnFlagUntilTimeout+0xe>
 80019f8:	e7e4      	b.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x2c>

080019fa <HAL_UART_Transmit>:
{
 80019fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80019fe:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001a00:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001a04:	2b20      	cmp	r3, #32
{
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001a0c:	d14a      	bne.n	8001aa4 <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8001a0e:	2900      	cmp	r1, #0
 8001a10:	d046      	beq.n	8001aa0 <HAL_UART_Transmit+0xa6>
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d044      	beq.n	8001aa0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001a16:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d042      	beq.n	8001aa4 <HAL_UART_Transmit+0xaa>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a28:	2321      	movs	r3, #33	; 0x21
 8001a2a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001a2e:	f7fe fd7d 	bl	800052c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001a32:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001a36:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001a38:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001a3c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a40:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8001a42:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a44:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8001a46:	b952      	cbnz	r2, 8001a5e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a48:	2140      	movs	r1, #64	; 0x40
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff ffa4 	bl	8001998 <UART_WaitOnFlagUntilTimeout>
 8001a50:	b958      	cbnz	r0, 8001a6a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001a52:	2320      	movs	r3, #32
 8001a54:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001a58:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001a5c:	e006      	b.n	8001a6c <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff ff98 	bl	8001998 <UART_WaitOnFlagUntilTimeout>
 8001a68:	b118      	cbz	r0, 8001a72 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a72:	68a3      	ldr	r3, [r4, #8]
 8001a74:	6822      	ldr	r2, [r4, #0]
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7a:	d10d      	bne.n	8001a98 <HAL_UART_Transmit+0x9e>
 8001a7c:	6923      	ldr	r3, [r4, #16]
 8001a7e:	b95b      	cbnz	r3, 8001a98 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001a80:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a88:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001a8a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001a96:	e7d1      	b.n	8001a3c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001a98:	782b      	ldrb	r3, [r5, #0]
 8001a9a:	8513      	strh	r3, [r2, #40]	; 0x28
 8001a9c:	3501      	adds	r5, #1
 8001a9e:	e7f4      	b.n	8001a8a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	e7e3      	b.n	8001a6c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	e7e1      	b.n	8001a6c <HAL_UART_Transmit+0x72>

08001aa8 <UART_CheckIdleState>:
{
 8001aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001aaa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aac:	2600      	movs	r6, #0
 8001aae:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001ab0:	f7fe fd3c 	bl	800052c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001aba:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001abc:	d417      	bmi.n	8001aee <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	075b      	lsls	r3, r3, #29
 8001ac4:	d50a      	bpl.n	8001adc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	462b      	mov	r3, r5
 8001ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff ff5f 	bl	8001998 <UART_WaitOnFlagUntilTimeout>
 8001ada:	b9a0      	cbnz	r0, 8001b06 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8001adc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001ade:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001ae0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001ae4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8001ae8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001aec:	e00c      	b.n	8001b08 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4632      	mov	r2, r6
 8001af6:	4603      	mov	r3, r0
 8001af8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff4b 	bl	8001998 <UART_WaitOnFlagUntilTimeout>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d0db      	beq.n	8001abe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b06:	2003      	movs	r0, #3
}
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}

08001b0c <HAL_UART_Init>:
{
 8001b0c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b0e:	4604      	mov	r4, r0
 8001b10:	b360      	cbz	r0, 8001b6c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b12:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001b16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b1a:	b91b      	cbnz	r3, 8001b24 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b1c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001b20:	f000 f940 	bl	8001da4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001b24:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b26:	2324      	movs	r3, #36	; 0x24
 8001b28:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff fdb9 	bl	80016ac <UART_SetConfig>
 8001b3a:	2801      	cmp	r0, #1
 8001b3c:	d016      	beq.n	8001b6c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b40:	b113      	cbz	r3, 8001b48 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fed4 	bl	80018f0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b58:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001b60:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001b68:	f7ff bf9e 	b.w	8001aa8 <UART_CheckIdleState>
}
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	bd10      	pop	{r4, pc}

08001b70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001b78:	2108      	movs	r1, #8
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <HAL_UART_RxCpltCallback+0x34>)
 8001b7c:	f7fe fe33 	bl	80007e6 <HAL_GPIO_TogglePin>

	if(huart->Instance==USART2)
 8001b80:	6822      	ldr	r2, [r4, #0]
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_UART_RxCpltCallback+0x38>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10d      	bne.n	8001ba4 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart2,Rx_Buffer,1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <HAL_UART_RxCpltCallback+0x40>)
 8001b8e:	f7ff fc3b 	bl	8001408 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2,Rx_Buffer,1,1000);
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	2201      	movs	r2, #1
 8001b98:	4905      	ldr	r1, [pc, #20]	; (8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <HAL_UART_RxCpltCallback+0x40>)
	}
}
 8001b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart2,Rx_Buffer,1,1000);
 8001ba0:	f7ff bf2b 	b.w	80019fa <HAL_UART_Transmit>
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	bf00      	nop
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	20000024 	.word	0x20000024
 8001bb4:	20000028 	.word	0x20000028

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8001bbc:	f7fe fe18 	bl	80007f0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bc0:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <SystemClock_Config+0xa8>)
 8001bc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bc6:	f023 0318 	bic.w	r3, r3, #24
 8001bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bce:	2314      	movs	r3, #20
 8001bd0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bd2:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bd4:	2200      	movs	r2, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bd6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bd8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bda:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bdc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001bde:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2402      	movs	r4, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001be2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001be4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001be6:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001be8:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bea:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bec:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bf0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bf2:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bf4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf6:	f7fe fee9 	bl	80009cc <HAL_RCC_OscConfig>
 8001bfa:	b100      	cbz	r0, 8001bfe <SystemClock_Config+0x46>
 8001bfc:	e7fe      	b.n	8001bfc <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfe:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c00:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c02:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c04:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c06:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c08:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c0c:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c12:	f7ff f937 	bl	8000e84 <HAL_RCC_ClockConfig>
 8001c16:	b100      	cbz	r0, 8001c1a <SystemClock_Config+0x62>
 8001c18:	e7fe      	b.n	8001c18 <SystemClock_Config+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c1a:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1c:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1e:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	f7ff fa98 	bl	8001154 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	b100      	cbz	r0, 8001c28 <SystemClock_Config+0x70>
 8001c26:	e7fe      	b.n	8001c26 <SystemClock_Config+0x6e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c2c:	f7fe fdf0 	bl	8000810 <HAL_PWREx_ControlVoltageScaling>
 8001c30:	4604      	mov	r4, r0
 8001c32:	b100      	cbz	r0, 8001c36 <SystemClock_Config+0x7e>
 8001c34:	e7fe      	b.n	8001c34 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c36:	f7ff f9db 	bl	8000ff0 <HAL_RCC_GetHCLKFreq>
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c42:	f7fe fccb 	bl	80005dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7fe fcde 	bl	8000608 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c4c:	f7ff fbc4 	bl	80013d8 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c50:	4622      	mov	r2, r4
 8001c52:	4621      	mov	r1, r4
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7fe fc80 	bl	800055c <HAL_NVIC_SetPriority>
}
 8001c5c:	b02c      	add	sp, #176	; 0xb0
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	40021000 	.word	0x40021000

08001c64 <main>:
{
 8001c64:	b500      	push	{lr}
 8001c66:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001c68:	f7fe fc4c 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 8001c6c:	f7ff ffa4 	bl	8001bb8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <main+0xa0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c72:	4825      	ldr	r0, [pc, #148]	; (8001d08 <main+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  huart2.Instance = USART2;
 8001c76:	4c25      	ldr	r4, [pc, #148]	; (8001d0c <main+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c78:	f042 0204 	orr.w	r2, r2, #4
 8001c7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c80:	f002 0204 	and.w	r2, r2, #4
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c92:	f002 0201 	and.w	r2, r2, #1
 8001c96:	9201      	str	r2, [sp, #4]
 8001c98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c9c:	f042 0202 	orr.w	r2, r2, #2
 8001ca0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001cac:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001cb0:	f7fe fd94 	bl	80007dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001cb4:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = LD3_Pin;
 8001cb8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001cba:	4813      	ldr	r0, [pc, #76]	; (8001d08 <main+0xa4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f7fe fcd5 	bl	8000674 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8001cca:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <main+0xac>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ccc:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8001cce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cd2:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd6:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cda:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cdc:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cde:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce0:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce2:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce4:	6225      	str	r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce6:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce8:	f7ff ff10 	bl	8001b0c <HAL_UART_Init>
 8001cec:	b940      	cbnz	r0, 8001d00 <main+0x9c>
  while(HAL_UART_Receive_IT(&huart2,Rx_Buffer,1)!=HAL_OK);
 8001cee:	4d09      	ldr	r5, [pc, #36]	; (8001d14 <main+0xb0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fb87 	bl	8001408 <HAL_UART_Receive_IT>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d1f8      	bne.n	8001cf0 <main+0x8c>
 8001cfe:	e7fe      	b.n	8001cfe <main+0x9a>
 8001d00:	e7fe      	b.n	8001d00 <main+0x9c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	20000028 	.word	0x20000028
 8001d10:	40004400 	.word	0x40004400
 8001d14:	20000024 	.word	0x20000024

08001d18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_MspInit+0x88>)
{
 8001d1a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	661a      	str	r2, [r3, #96]	; 0x60
 8001d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d26:	f002 0201 	and.w	r2, r2, #1
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d34:	659a      	str	r2, [r3, #88]	; 0x58
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	f7fe fbf9 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	4611      	mov	r1, r2
 8001d4a:	f06f 000b 	mvn.w	r0, #11
 8001d4e:	f7fe fc05 	bl	800055c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	4611      	mov	r1, r2
 8001d56:	f06f 000a 	mvn.w	r0, #10
 8001d5a:	f7fe fbff 	bl	800055c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4611      	mov	r1, r2
 8001d62:	f06f 0009 	mvn.w	r0, #9
 8001d66:	f7fe fbf9 	bl	800055c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	f06f 0004 	mvn.w	r0, #4
 8001d72:	f7fe fbf3 	bl	800055c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	4611      	mov	r1, r2
 8001d7a:	f06f 0003 	mvn.w	r0, #3
 8001d7e:	f7fe fbed 	bl	800055c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	4611      	mov	r1, r2
 8001d86:	f06f 0001 	mvn.w	r0, #1
 8001d8a:	f7fe fbe7 	bl	800055c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4611      	mov	r1, r2
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295
 8001d96:	f7fe fbe1 	bl	800055c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	b003      	add	sp, #12
 8001d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001da6:	6802      	ldr	r2, [r0, #0]
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_UART_MspInit+0x6c>)
 8001daa:	429a      	cmp	r2, r3
{
 8001dac:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8001dae:	d12d      	bne.n	8001e0c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001dca:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001dce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	a901      	add	r1, sp, #4
 8001dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dda:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f7fe fc48 	bl	8000674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001de8:	a901      	add	r1, sp, #4
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001dee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001df6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f7fe fc3c 	bl	8000674 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dfc:	2026      	movs	r0, #38	; 0x26
 8001dfe:	4622      	mov	r2, r4
 8001e00:	4621      	mov	r1, r4
 8001e02:	f7fe fbab 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e06:	2026      	movs	r0, #38	; 0x26
 8001e08:	f7fe fbdc 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	40004400 	.word	0x40004400

08001e14 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e16:	f7fe fb81 	bl	800051c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001e1e:	f7fe bc00 	b.w	8000622 <HAL_SYSTICK_IRQHandler>
	...

08001e24 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e24:	4801      	ldr	r0, [pc, #4]	; (8001e2c <USART2_IRQHandler+0x8>)
 8001e26:	f7ff bb9b 	b.w	8001560 <HAL_UART_IRQHandler>
 8001e2a:	bf00      	nop
 8001e2c:	20000028 	.word	0x20000028

08001e30 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	490f      	ldr	r1, [pc, #60]	; (8001e70 <SystemInit+0x40>)
 8001e32:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <SystemInit+0x44>)
 8001e40:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e42:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001e4a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001e52:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e56:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e64:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e66:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e6c:	608b      	str	r3, [r1, #8]
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00
 8001e74:	40021000 	.word	0x40021000

08001e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e7e:	e003      	b.n	8001e88 <LoopCopyDataInit>

08001e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e86:	3104      	adds	r1, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e90:	d3f6      	bcc.n	8001e80 <CopyDataInit>
	ldr	r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e94:	e002      	b.n	8001e9c <LoopFillZerobss>

08001e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e98:	f842 3b04 	str.w	r3, [r2], #4

08001e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <LoopForever+0x16>)
	cmp	r2, r3
 8001e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ea0:	d3f9      	bcc.n	8001e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffc5 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f000 f811 	bl	8001ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eaa:	f7ff fedb 	bl	8001c64 <main>

08001eae <LoopForever>:

LoopForever:
    b LoopForever
 8001eae:	e7fe      	b.n	8001eae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001eb4:	08001f98 	.word	0x08001f98
	ldr	r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ebc:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001ec0:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001ec4:	200000a0 	.word	0x200000a0

08001ec8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_IRQHandler>
	...

08001ecc <__libc_init_array>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	4e0d      	ldr	r6, [pc, #52]	; (8001f04 <__libc_init_array+0x38>)
 8001ed0:	4c0d      	ldr	r4, [pc, #52]	; (8001f08 <__libc_init_array+0x3c>)
 8001ed2:	1ba4      	subs	r4, r4, r6
 8001ed4:	10a4      	asrs	r4, r4, #2
 8001ed6:	2500      	movs	r5, #0
 8001ed8:	42a5      	cmp	r5, r4
 8001eda:	d109      	bne.n	8001ef0 <__libc_init_array+0x24>
 8001edc:	4e0b      	ldr	r6, [pc, #44]	; (8001f0c <__libc_init_array+0x40>)
 8001ede:	4c0c      	ldr	r4, [pc, #48]	; (8001f10 <__libc_init_array+0x44>)
 8001ee0:	f000 f818 	bl	8001f14 <_init>
 8001ee4:	1ba4      	subs	r4, r4, r6
 8001ee6:	10a4      	asrs	r4, r4, #2
 8001ee8:	2500      	movs	r5, #0
 8001eea:	42a5      	cmp	r5, r4
 8001eec:	d105      	bne.n	8001efa <__libc_init_array+0x2e>
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
 8001ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ef4:	4798      	blx	r3
 8001ef6:	3501      	adds	r5, #1
 8001ef8:	e7ee      	b.n	8001ed8 <__libc_init_array+0xc>
 8001efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001efe:	4798      	blx	r3
 8001f00:	3501      	adds	r5, #1
 8001f02:	e7f2      	b.n	8001eea <__libc_init_array+0x1e>
 8001f04:	08001f90 	.word	0x08001f90
 8001f08:	08001f90 	.word	0x08001f90
 8001f0c:	08001f90 	.word	0x08001f90
 8001f10:	08001f94 	.word	0x08001f94

08001f14 <_init>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr

08001f20 <_fini>:
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f22:	bf00      	nop
 8001f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f26:	bc08      	pop	{r3}
 8001f28:	469e      	mov	lr, r3
 8001f2a:	4770      	bx	lr
