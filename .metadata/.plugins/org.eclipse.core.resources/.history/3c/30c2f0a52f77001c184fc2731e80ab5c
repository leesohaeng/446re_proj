/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "RteAdc.h"
#include "RteCom.h"
#include "RteTim.h"
#include "AscTask.h"
#include "AscPWM.h"
#include "AscCom.h"
#include "AscCDD.h"

#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define ON 1
#define OFF 0

#define pv	0.3
#define iv	0.3
#define dv	0

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t	u32LoopCount = 0ul;										/**< Loop count */
volatile uint32_t newTick=0, oldTick=0;
volatile unsigned int FR[4],FRo[4];
volatile uint8_t FR_Flags[8];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 return ch;
}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint8_t	debugtxstr[100];
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_ADC3_Init();
  MX_CAN1_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_SPI2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rx1_data,1);			//Enable(start) UART1 RX Interrupt
  HAL_UART_Receive_IT(&huart2,&rx2_data,1);			//Enable(start) UART3 RX Interrupt

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);			//Enable(start) Timer3 PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);			//Enable(start) Timer3 PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);			//Enable(start) Timer3 PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Enable(start) Timer3 PWM

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);			//Enable(start) Timer4 PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);			//Enable(start) Timer4 PWM

  HAL_TIM_Base_Start_IT(&htim2);					//Enable(start) Timer2 Interrupt
  HAL_TIM_Base_Start_IT(&htim3);					//Enable(start) Timer3 Interrupt
  HAL_TIM_Base_Start_IT(&htim4);					//Enable(start) Timer4 Interrupt

  HAL_ADC_Start_DMA(&hadc1, &gval_adc_1[0], 10);	//Enable(start) ADC3
  HAL_ADC_Start_DMA(&hadc3, &gval_adc_2[0],6);		//Enable(start) ADC3

  //////////////////////PWM INIT////////////////////////////////////////
  SET_PWM_VOL(1,0);
  SET_PWM_VOL(2,0);
  SET_PWM_VOL(3,0);
  SET_PWM_VOL(4,0);
  SET_PWM_VOL(5,0);
  SET_PWM_VOL(6,0);
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////

  PID_PV = 0.1;
  PID_IV = 0.3;
  PID_DV = 0;

  CAN_INIT();

  HAL_Delay(1000);
  // printf("AT+BTSCAN\r\n");
  HAL_Delay(10);

  ILI9341_Init();									//initial driver setup to drive ili9341

  ILI9341_Fill_Screen(WHITE);					//TFT RESET
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);

  SampleTestDisplay();							//TFT Demo Screen

  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);		//status1 LED OFF

  gval_flag_tic_fault1S = 0;
  gval_flag_tic_fault100mS = 0;
  gval_flag_tic_fault10mS = 0;
  gval_flag_tic_fault1mS = 0;	//Task period Monitoring Start!
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, "Start ....\r\n",12 ,1000);

  uint8_t tx_str_temp[100];
  uint8_t old_tx[8]={0,0,0,0,0,0,0,0};
  uint8_t CANFAILP=0;

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	TaskManager();
	u32LoopCount++;

	if(gval_can_rxc_flag) {
		if(memcmp(old_tx,can1Rx0Data,8)!=0) {
			sprintf(tx_str_temp,"%06x:%2x:%2x:%2x:%2x:%2x:%2x:%2x:%2x\r\n",canRxHeader.StdId,
			   can1Rx0Data[0], can1Rx0Data[1], can1Rx0Data[2],can1Rx0Data[3],
			   can1Rx0Data[4], can1Rx0Data[5], can1Rx0Data[6],can1Rx0Data[7]
			  );

			HAL_UART_Transmit(&huart1, &tx_str_temp, strlen(tx_str_temp),1000);

			if(canRxHeader.StdId==0x81)
			{
				// old_data_parsing
				for(int fr=0;fr<4;fr++) 	FRo[fr] = (old_tx[fr*2]<<8) | old_tx[fr*2+1];
                // new_data_parsing
				for(int fr=0;fr<4;fr++)
				{
					FR[fr] = (can1Rx0Data[fr*2]<<8) | can1Rx0Data[fr*2+1];
					if(can1Rx0Data[fr*2]==0 && can1Rx0Data[fr*2+1]==0) FR[fr]=0;
				}

				for(int fr=0;fr<4;fr++)
				{
					if(FRo[fr]==FR[fr])		FR_Flags[fr] = 0;
					else 					FR_Flags[fr] = 1;
				}

				// FR[0] = (FR[0] * 1500) / 1200;
				// FR[1] = (FR[1] * 1500) / 1200;

				if(FR[0] > 1500) FR[0] = 1500;
				if(FR[1] > 1500) FR[1] = 1500;
				// new PID Control
				sprintf(tx_str_temp,"");
				HAL_UART_Transmit(&huart1, &tx_str_temp, strlen(tx_str_temp),1000);

				PID_Target[0] = PID_Target[1] = FR[0];
				// SET_PWM_VOL(1,PID_Target[0]);

				PID_Target[2] = PID_Target[3] = FR[1];
				// SET_PWM_VOL(3,PID_Target[2]);
				// if(FR[2]==-1) FR[2]=1; 				if(FR[3]==-1) FR[3]=1;
				sprintf(tx_str_temp,"%d:%d\r\n",FR[2],FR[3]);
				HAL_UART_Transmit(&huart1, &tx_str_temp, strlen(tx_str_temp),1000);

			}
			memcpy(old_tx,can1Rx0Data,8);

		}
		gval_can_rxc_flag = OFF;
		newTick = HAL_GetTick();
        oldTick = newTick;
        CANFAILP=0;
	}
	else {
		newTick = HAL_GetTick();
		if(newTick-oldTick > 1000) {
			if(!CANFAILP) HAL_UART_Transmit(&huart1, "CAN Fail...\r\n", 13,1000);
	        oldTick = newTick;
			CANFAILP=1;
		}
	}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 6;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART2_IRQn);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

